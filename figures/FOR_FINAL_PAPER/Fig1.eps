%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Fig1.pdf
%%Creator: (Adobe Acrobat 17.12.0)
%%For: niema
%%CreationDate: 11/13/17, 12:06 PM
%%BoundingBox: -1 0 452 177
%%HiResBoundingBox: 0 0 451.6360 176.2901
%%CropBox: 0 0 451.6360 176.2901
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 985 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2017-11-13T19:34:22Z"
   xmp:CreatorTool="TeX"
   xmp:ModifyDate="2017-11-13T11:52:01-08:00"
   xmp:MetadataDate="2017-11-13T11:52:01-08:00"
   pdfx:PTEX.Fullbanner="This is pdfTeX, Version 3.14159265-2.6-1.40.17 (TeX Live 2016/Debian) kpathsea version 6.2.2"
   pdf:Producer="pdfTeX-1.40.17"
   pdf:Trapped="False"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:b9e9c7e2-c3d5-2d4b-abf3-ae8a41fafbcf"
   xmpMM:InstanceID="uuid:fb62d935-a2d7-944c-8229-4f9f8cb31f7a"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -176.29 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-1.52588e-05 0 mo
-1.52588e-05 176.29 li
451.636 176.29 li
451.636 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: EAAAAA+CMR10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /EAAAAA+CMR10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 34 /quotedblright putdup 35 /numbersign putdup 47 /slash putdup 48 /zero putdup 49 /one putdup 50 /two putdup 51 /three putdup 52 /four putdup 55 /seven putdup 57 /nine putdup 58 /colon putdup 92 /quotedblleft putdup 97 /a putdup 101 /e putdup 103 /g putdup 105 /i putdup 109 /m putdup 110 /n putdup 112 /p putdup 124 /emdash putdef/FontBBox {-40 -250 1009 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 448 666 677 683 705] def/OtherBlues [-206 -194] def/BlueScale 0.04379 def/StdHW [31] def/StdVW [69] def/StemSnapH [22 31] def/StemSnapV [69 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings21 dict dup begin/quotedblright <1C60D8A8C9B7A73DB6A586101A03C13EF29189841EC98600F4F938578CC836AED61BE54DE625E7DE85A626C709CAE7DB33134B3099F360C2116C48E066211565BDB2C36C8316D1DD6081F6081FFDDBF36673D683770EAFA93B277E05FA6244D8C2DC6F1E9215B9C8FF1EA304ED53BB6DF8E06B7CB262D3181ACCB88ED784372338FCC4DF63B3B7AFC488FDCB0E39B234BBAB8ABEB843E5727F54E08E3A25BEEC84DFCA2BA64EF5> |-/numbersign <1C60D8A8C9B6B41CB76164536DF595EC4149B248DF3D5E339B2698995A23C683E6331085B7155ED6595EDBE4D004A7DFAB4B071E91D5AEA387A9FFED0F0F6EC631F981192CA7493E1CEA21DFBF59B8C91B47945AB809CCF1DE02322CD0C07C89D73BB18E6805F8B238996ECD0D114CE7AC14A802EC3175940522D939863057B846574EFB73E48D47802B15F17618B2F9BFA11D022EF325711067B5EA838C426F795DF28926FDFB1FB300361989BEAEE41CF5E65B3FF6B124CA0FFFF6E05AEB5122635136F2400D5AB012BAACB122ED682FC37E746B78534760115ECE3E126711B4B387D160D5B835A50F> |-/slash <1C60D8A8C9B7A73DB56225352A24C6E389DE2B55CA06CAB1D904D74FE21B6520E910DE6837DBFFB95567192F781E541A03B8446689265DEAE7140ED23D1C3943714CDFC12315> |-/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C12484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF025DDA723DD68103C537890571B4B95BCC242A78DD7EA0DA80E91751ED6DEA668D97ECF27E58978E82B8932F2635747B0D240AA> |-/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A07BD51606BCA866C4BD24CA34E86B9CA5A529B664F3EEDB6B4AF8A2B994DB57B49473E162231CB943675FE63E9B92B8AEBB62FB22456EC4173C66EF6C2F34FFEC22ACAE77FFFAAD70F3754CADC0D2CF63CB6D286D930AEA5A613E5AB9CB004BEAEBADDD070EDAF4FF25FDB6421F540D58D2C7A3FC40290CBCF831BE1B89B7F> |-/three <1C60D8A8C9B7A73D3B2B97DEB4C7BDB68E0D63865C8BF294429AD1BAAE59A25299F9306A9E28AA5C0C0AF9F97F56096DB0FD0EC440ACCE834B0BA5392FD94D026768A961AA5D1A88FAE30F2B2033E77AFAB55B0B9C8092CD226DD9EFEEAAF5CD5AE79D6DDEC4C37DC43DE3B85DD2A2EC4DC0C9F349D5E8F9F615782EDC8C53805553FD3C0007C1818BF3D99AB659A079ED36132BBDC613CA63D7A0FE429706DBC6BA998CE56A89C002758EF37F90A390F83B3DFE49D312FA66FDF2F16212D1503559B7B1637726D82590655B813B5B489A6AB087D0B93F61541C20829B36C95E4A39F5BDDBA400> |-/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065FCDD01CF53F54AF89DAF22339F0A467CEB54960C4097888AD7CBC676C4076733D124E7B4C79B6D0E020E27E56B7A34848B450E2A23F2DF3103BCB5E75D289FAF3FD67A12C99B2EB0A8390A7DAB0DD8B7BFBE34B66044D4D46D3CB580B3DAECD8E50CD2549B4550A6A6B131A61C4> |-/seven <1C60D8A8C9B7A73D3B2C65B72E385362D3FF7D42FC1474C3A39537FCE1B11D49C7F4AB33C92C477E32DCC2F1BD151153AF4EE29C83442C1DFE7C2987EA59B8FDB804F00FC474C14A4DFC5A3D044493631292AC23CA9773EED32B6950E181E1AF2402423A225C4B964BA7C80C0A352DE0DDD502> |-/nine <1C60D8A8C9B7A73D3B2B97B3700AD7AED0795D43DB5ABA64A35CE8EC855A5CBF20AE28D441242F899F7C2493AF719033D6B385FC121C95EE56A8AC87E982F921115084DE39E9BA3D7A44F69554488D091CCA5CE48FA54B9DEDF323B6058F2C417BA9D8B1544EFE093FFB579140C54032384DB55AB4741347233EB3F0889C3AE9CB13C1ACCD104A4ADC6B007505E3B778FEDE19DEF83A3068F5B724ADA3C344D842CC2CBF224CC820F9BF9DFC7E3B557C2AF89D9733BA75FFB6FA3D5E09792EE955B766D3FBD4F37E75E41F5A464FD3C1DC7611C4A6> |-/colon <1C60D8A8C9B8574464AEAFAC7C68900D93273DA49162F3A5B8C16D30B96C6FD4E30E80E1F78558AD2540B994A3F8C4499D90D9C7B92969D703EA7177FFCAE7C73BA4F83773> |-/quotedblleft <1C60D8A8C9B7A73DB6A4ADEB3ADC0814B6E0E7C33077B32C7BBE5570C04E876B8ECBC350E095219E53555D59CB092E54280EB0730D7D09BC8E57E7B09F35920687417B2753729047DC79092C5CE71E03B2A93E3867513980E4B800F360F5199D650C9E1DA8172AAA9F07C91BEF18761AB04BA64EDFA8CAC040AFBAE7384ACAC268F430C40B96944FF1E6118520FD96CEE0D2954DFEB53514ADE5FD432E0CB65460CA8BEBCA22C18E> |-/a <1C60D8A8C9B7A73DCB03313BCF7AD8C8EE234E5372D46A65E92A78F4B7E02ECC58F71EE6C027AD4D56C5E4DE1AF1031295DC17C0E7AC8D8358634F9A19B02A110E5539C10136C68E0D2CBEA6658A501D9D73323861F8C29EB92F9080ACC3E236C5F14389534682EC2925F59CD4A215569A7BD7B9F7827A30BA75EB840535B2A2C8F92AD166CE93D277314A4C690C47DB847F73BFE1049631CDDB9124FD762753AA8DB187C216ED3005CA929015114EA53826E55872B63FD1FA60DB9883C727F137C754792AB823A705DD0DF28293037E1DA5DE4936C6573A1718CA6713783EC51D8DA977> |-/e <1C60D8A8C9B77FE2B98B448A6D851DB2CAC9451BC5A778A9834F3ED148EF8C2095ABE60FC1B26DBB94057B63BED2BEE770D96BCB613AAAF017CD18C97CCA61C46589119EDD299B58A1852EFEBDB7EF2A6D8606D19DEFCD13B1531BE3098F0C00520EFD32FA435A0514B86269DFF5EE650657E526962BA2F3447589A03D4DA2371542253C2A1E1B028917A1E5> |-/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A163CFC67672A34CC74B0AEAADF24229DF1CCAA1488AE3E348FE2ACD572EA487EC9D77FBB0710AB421B03DD5B8AE5519B5C269E9648E819E7ECE806EEF16A6618D07D9AAB350E57F26F5259E8FCF9E5C2D96BBEAD16502F9E7819E854042DDB2BC674C39681CC2E5224219582BC7B59BBAEF869C9DF91CA7770A97BAD53C3C3A99175BA8F0A5744B5969D3BC15831A95918F7C707E41F5D87B8DB2D57378BC9C297DAE69E4BF438246E63F565B22D86CBE28DEF748262FB9FF82A88935451D6280A28F1AD964E6E476D5779321E42D3A86BE41122F1BED36C3DC47E1E01C22534598D0431873197ABE1C8EC03B4011E4B26D249635BDBABB8E5B69BE07AFA65F88EAF6> |-/i <1C60D8A8C9B8574464F1B435BC57209FEB2C54026A3BBB707C1ACEEAD444C0BCD7940801068D7665A567CBC52ABA43208AF37F075A1C65586B76611081AB5310CF42CD496B0F8F59766AFDA0C4BF40BC709402C0DD0AB42B4F3987C50B5617CF3B4859C86132A1A7E65B42225B2228E50B44DBFBE367ABD36EBF02ACAD4FB895EE90259DCAEBCEFB9765574F> |-/m <1C60D8A8C9B6B41CBB73614D2DDC1714A2872D80DD283A0865738F60F13894266612CF652F44C217A476812BE532AC6358E0DAFFB0D5E5117642F5BA2923BEDB1C7E5DCDCA6F9C7FD13A241FE9CAACF60BAB1EA0492936F6C6CF04C43B9AFAC5B2026A794CD9C7836D055F7A78383659A460B574C21AA89D092E6B58E9A31CB4E83AFE695EB2A4193C039EA5F618CAF7745B1FDA9ADBC0C4AFF43C821C2538E4D3E0311619B8D0096703429D61227134D3D4F10264801F2AA4B0A71E89914A580FDC8088D541BDE06B262C3D90AF19EF55DBE228CA71D5828F50534BACCEF423C267E1995B8408ADC61022455B144160D98EB158310C4459DDC5A63157F982CF307D29294A260DA3997052E3598EEBA826650D8D48FE852C19EC9306D47760211C4650B51CCF133ADCA8B28F2087D2999D418C5739327F2B40FD7891074FBE2A054E78BE9D42> |-/n <1C60D8A8C9B790A83D946A52D13353207152D3DCC239C62B9F0F0BD9624AAEAC8EB33D804BC103BF4C84F8FCB252709B3422B4E5F4D698E79D5531B2BC676C0D12EEB603C056C169F17DCC9F0F6AC43F292D82458847D2D279D19F466EA84C7027B712BFD7C4B4B770C9E0BD2D556C526F95495C91C927B8F7463DFDACF3970984B31C39C074ECA243D9C8BFA10955B7D910908799AA616A425B937E17FF6121AD71909EE5D3B89CA2D13AAC585FB6F54A794E7F44844B39E96B6AE21032D420B68967AC9AC0F0DA0D53B8016F26EED527CB2387F1592BCDB6A91E073E83C3181BD7505792D4855E> |-/p <1C60D8A8C9B790A84D73DFE4D381CFD68735E4475645A4E53BCF7DB579C1AFDD13D1A6F15CA06B47ED1C3E1B244798306364BC5CABD6DA63519493A5C659BC60B5447F0104F114BE694DF580105735E360631FEECD6EC7A012CC851718281D07B0CC157A8E7B5931B7103AE94662442B62C7C336402079CFF632ADA590C0779C308A1FCAF94180306BE01E5D89C2BD042F11A347AFB582199E7E84F8C797ABEE0EDBB75C6E1AC5F4E76437DB6ED4E096E1BDAADA422AEEAC70BB94A61E61EC7C901D077227549E6F61C4273BAEF20A141FBE8FA9A551273E39D70B> |-/emdash <1C60D8A8C9B5EE310D9C6BAED29BEE7ECAB2AF71B9AA7B5BCCDC15147D37> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQG+CMR10 /EAAAAA+CMR10 findfont ct_VMDictPut/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 11{/.notdef}rp /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 33{/.notdef}rp /quotedblleft 4{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /.notdef /p 11{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf124.795 -82.684 mo(\\main"|2017/11/13|19:34|page4|#4)[4.98129 8.30182 4.98129 2.76764 5.53525 9.96259 14.9439 4.98129 4.98132 4.98129 4.98129 4.98129 4.98129 4.98132 4.98129 4.98129 9.96259 14.9439 4.98132 4.98129 2.76761 4.98132 9.96259 14.9439 5.53525 4.98129 4.98132 9.40863 9.96259 14.9439 8.30182 0 ]xsh%ADOBeginSubsetFont: FAAAAA+LCIRCLE10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /FAAAAA+LCIRCLE10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name LCIRCLE10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 105 /a105 putdef/FontBBox {-2000 -2000 2040 2040} defendsystemdict begindup /Private9 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/StdHW [40] def/StdVW [40] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/a105 <1C60D8A8C9B5EE3106F69024B980EEE1EC0D7515B15DDF47AF23D99D035B8BB0C15DE9C468B3327220F7055539F467E35AA3DAA5B291046F24CC262C72AEEC7B9EE64B189A45E08618F488C2330D65A085731C1A1677AD8EFB4A81FAA9C3F8E3C43E14014EE51676> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQH+LCIRCLE10 /FAAAAA+LCIRCLE10 findfont ct_VMDictPut/YRBUQH+LCIRCLE10*1 [105{/.notdef}rp /a105 150{/.notdef}rp]YRBUQH+LCIRCLE10 nfYRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf-89.349 -74.714 mo(i)sh.398 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
-89.349 -69.732 mo
-89.349 -79.6949 li
@
-94.331 -74.714 mo
-64.443 -74.714 li
@
YRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf-59.461 -104.602 mo(i)sh-64.443 -104.602 mo
-54.48 -104.602 li
@
-59.461 -79.695 mo
-59.461 -109.583 li
@
YRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf565.867 -74.714 mo(i)sh565.867 -69.732 mo
565.867 -79.6949 li
@
540.96 -74.714 mo
570.848 -74.714 li
@
YRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf535.979 -104.602 mo(i)sh530.998 -104.602 mo
540.961 -104.602 li
@
535.979 -79.695 mo
535.979 -109.583 li
@
YRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf-89.349 707.926 mo(i)sh-89.349 712.907 mo
-89.349 702.944 li
@
-94.331 707.926 mo
-64.443 707.926 li
@
YRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf-59.461 737.814 mo(i)sh-64.443 737.814 mo
-54.48 737.814 li
@
-59.461 742.795 mo
-59.461 712.907 li
@
YRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf565.867 707.926 mo(i)sh565.867 712.907 mo
565.867 702.944 li
@
540.96 707.926 mo
570.848 707.926 li
@
YRBUQH+LCIRCLE10*1 [9.9626 0 0 -9.9626 0 0 ]msf535.979 737.814 mo(i)sh530.998 737.814 mo
540.961 737.814 li
@
535.979 742.795 mo
535.979 712.907 li
@
.498 lw
-11.966 -9.87396 mo
488.159 -9.87396 li
@
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 -12.613 mo(4)sh%ADOBeginSubsetFont: LAAAAA+CMR8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /LAAAAA+CMR8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMR8.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdup 66 /B putdup 67 /C putdup 69 /E putdup 71 /G putdup 73 /I putdup 76 /L putdup 77 /M putdup 79 /O putdup 83 /S putdup 84 /T putdup 89 /Y putdef/FontBBox {-36 -250 1070 750} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 446 665 675 683 704] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [33] def/StdVW [76] def/StemSnapH [28 33] def/StemSnapV [76 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings13 dict dup begin/A <1C60D8A8C9B6CE042A9AE41131EAFA2F31741CF3EC73D841699673AF1F9E5A2A23E8A49D4F1BFDCB34195C2382F4F813AFB0D1B9C58D3DF6F1BC06E2ADE7598A64B8BCB582D1CA695398CF983AD2F9E5957C5091781771852BB9FABFBC1AC1A8537258999841593EFF6ECD9F2C2FB3A6D4C267C0E3DE5082F0F7E6EC10C4351AF31B4C4A440990084A30F3D4FA245118293712D80A14C75A60CB042BCEA2A4DEABC0F3482563CE1944E99A57CC10A916AD0F7766E959759D2E9ACAD5A6C598FF1BCCFF4AF7> |-/B <1C60D8A8C9B6E5992D583DE028A2F6575B9CF2A2BC61536DD7478D13CFA2C3C42157E7BB5C45A8571DDA887FBE32605C773D4C21D9D262E5B50F885F82BA3A1D9D8548CEC122A3F001209AD2771EC52D1D4A6D7A5852D9587CFF37A79180281BBC9B854839271E950621D7E87C98C51036D5A04EB405E3646ABB1CA22E2C1F156175B374C8044B55A154F153> |-/C <1C60D8A8C9B6F21DF6FE617E3DB59C3DC015EF12E5D412DE1AD82AC9B34A30F8D91E4DAA8FB2D1A9268CC71AA1F97E2A4536CB9B8AC2501C132D42A1A90D33674FBB0B549A751A3815AF40E7DE8C32BD62E0D95C262A9934B8E89DC47EBDAD2A04A620316353B32EDB44C18AC8D38E7DAF239FA87DBAEB88F39B5995C0C7301392180503C7B0> |-/E <1C60D8A8C9B6079F1E7AD77A8FE47234B0DE6BCDE2364141DF23ABE1E27910AE1803DB6B0C74F430B7FDB8C5D826A277DC3630F15F3FCC4402260146A527711CB539543CFFCB49D52DA6BB7068E11F7AAB2A388C36341A31DD6B2B6AC715058199BFA1DBF47CD9CD09386391E4C360C96AEF8C52A1E7FD0D89E173246DDB6F43735B> |-/G <1C60D8A8C9B6B41C3AC0F8A6CFD0EA0C6E0645B0F02A1B72089775F254D06AFF4A9082C914212EC8277AB6B3184BE2F8410EDF226ED09581DF60C5C383AA21763A0EC268A0BCD31393F2ACEA0FAA2215424F99CE20113D03EC5B09687F646F28AEC8FF867156B90E8AC024286BF4EC8AA2E8D9EDAD964BE454D5312CB56B07CDACFA030EEACDEF4A66D46920EE1494D63C33E6C3A35437A703BE6F9BB2905B12C0689045045AC20AA3290DF58842F6CB34544C038E2CE1D8A9824DA592CD438C429B9CDD409B98D6F64D> |-/I <1C60D8A8C9B73DBAA2706020A91CDEE962DC7B760779A00428CC9A9D6C090ED2B1EF5711DA02E304C9D05056DCCCA42AD131F5FD84EC6895476ABE53CAA128FD4FB84D8B33D544AC7071771C170905C9D1B35A78615C56EAC07635C7B0781D9D34ABA96B919033C84A517A3137503020BB67D1C817FA8EDEE2EDB2E7589AD3A71CC0AFB00E21388BA733C40EFBA5E7> |-/L <1C60D8A8C9B64A95655D28C35556490ECBB4CD59A1A6F03D64F87F89083FE47D3CB94563837F557C375F7715F469AF7D0D3626702EC00DAEA831564043F8CEF7A807799CCB7A444C1BB89CDF1B31C66C11D4CBD68B372AADA2226A0B14357E82E984D4C93A550A179D8515075C5F154B038327958F2A2F69> |-/M <1C60D8A8C9B5F2782FECA1105B41D6E28EC779688E8AD07B7C2B4A1F83DD1F52909BF0E529D982554A888249730ADC750416AA5B78BBB86EB362352B1F75E329854437BA2CE0D6AEC7BA43D15EE7AEAFAA9CD19DDFC9186FB9929FF42C2AEC6003548D8560834338AFA049297B4C515EAD42BD756AA4242DAECC84079AB5B4CB4DCDD8ED2472769C3D0546A275DA0737186E64D3F4FE41AF67FD5508A3A48EEA5369CEFB9DCDAB5A0FA1BC800D8DEADAD5D5AB57C5ED7196A41F3F76FC87F8C812F3C8E4D14278BDD8B133F34B3A53570C2AE2886B43D4BE7C7541EAFA1C27A7D2> |-/O <1C60D8A8C9B6AF049823E66ACED9C580AE0FFD08FD1BD8147BC352F45E0920A322324EC625E223788C7F3E0B452EE38F8BD74D2A50B7CAA8C8F46D8A6699A70FA04E526AA08B8F2EB3D71DCDBA643A5901AE933924C98589BC5D3630BB3179704A76BCABB8> |-/S <1C60D8A8C9B7CDD8432CD730264968C71FF57A8F96F0EEA4479A99F3454304C9917FEB0EC244E2CDBBD5A3DA2F7865544972DD22618B53337E4DD119B948274AAE57EB2BE86F8B6257FABBE64A7E34B7F494AB6D3A9F597D482DA6B4096EC10472A5464AD5873E6DF0804DB96FF12071F878ECA7F6E0A811E077932CB7C5415845CEE29EF4F02AAB72AFDECBC1E4D22023674B79DC16F0EC93A5E6B2A0256B8D81328883BC718AA26F0115C4C317C27D64B6D70EDE18E3764912C5FD333208> |-/T <1C60D8A8C9B6F21D0B7895110C6AF8E828DFD22ECF6A0B10449743075BFE9D6FA6E260A3C08546F7A1CAD389C0CD6CAC8D1F3A5A3BBF5B7FE896D98799E7FCE9A80DF22F5CB6B9A777E1AAC449356855D5B7A00DB202F9BC2435C518B5180A29714FD0A13ECF687C4CB09526C2CB29B9ECCA7837F2D2235F827CF495FF57622E5C9BFD4721A30049330358119CCB3B470C31C71BE0> |-/Y <1C60D8A8C9B6CE042A9AE41F8CB5724C96ADBA3291CAD163B4621350E12AACB0FD1DA92BA26BC007A1D0D5DC35A1E26D89D9F74014D9C298FB415E9578B0D9D6822A46E63C3DC5CA7278B73D9D50594FC1947E155FE190DBB583B94DAE7DEA494F3DC372BE1E7CB0D4F4415B7D76E122D8E94555E867D4F4EC7C756FA4FE95161B5F97C924CBF57A6E5B8DB6F84E2A661C1C0C02CDFA1376B7676C4F00963B598FA13E8265D12DEB8AECD26C7ED213783256AB0FDE25A199B3B210878481F55214CB98F35B36F907F8B1AE677C96F2C3546759E1CBAC9D5B106E3357A14306B341176571A72237E2> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQI+CMR8 /LAAAAA+CMR8 findfont ct_VMDictPut/YRBUQI+CMR8*1 [65{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S /T 4{/.notdef}rp /Y 166{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf177.149 -12.613 mo(SYSTEMATICBIOLOGY)[4.70477 6.34265 4.70477 6.11621 5.75916 7.75409 5.6413 6.11621 3.04938 8.93762 5.99435 3.04935 6.58652 5.28897 6.58652 6.64304 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-/L <1C60D8A8C9B66482C0AC2637AE818322843640782B4084B6BCB7EAC5B87BB576EB951099027BB2082BCC7485557848EF03B40B2EB92530435BB00C45D61522480C8796A82EF484C18DA82780A6A608D2AF86DBDD9D897934B97F7994CA6E17FD38486E39BD34B7586F9E2776CCA87540F517999D98A29B36F10CD04369FAA3B4> |-/O <1C60D8A8C9B6FC2D1A57C75D245B70BE97404F13CE569FC422D9D09438E71013F439099D7D1EDC655B119E118302674ABD7D84DACED31CA7555EFEA3863036A42A3B6E915F562C999DD49FE5D9B5063789DDDB66696771EDD533333BB57A5D6AC1A9E3> |-/V <1C60D8A8C9B6E3FADD48816EB8424E8F57A41D8613F7E968C9BB1B02E143FC779521473E85AC3FDDB70230FD5AC8A799CC105B900902F681C26F2CF5169E1D28FA4F6B0C7A570A1EAEDD1568F3815B4073CFD3901DA4DC138D832EA953776BC457AFDFF8491C649A0DB6870897DD41335AD9B9589634784946F43BCBBD7A4581826E0D3C585AA4EFCF9736D89BF657946580134CB715D83D4A12A5D3C2E565E9CF92286FED111732FC93E1CA96F815A6B51DE39654A3FF21> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 46 /period putdup 76 /L putdup 79 /O putdup 86 /V putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 10{/.notdef}rp /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 17{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V 5{/.notdef}rp /quotedblleft 4{/.notdef}rp /a 3{/.notdef}rp /e /.notdef /g /.notdef /i 3{/.notdef}rp /m /n /.notdef /p 11{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf460.899 -12.613 mo(VOL.)[7.19299 7.7489 6.22662 0 ]xshgsave
.537933 97.421 mo
225.593 97.421 li
225.593 2.43857 li
.537933 2.43857 li
.537933 97.421 li
clp
225.593 97.421 mo
.537933 97.421 li
.537933 2.43857 li
225.593 2.43857 li
225.593 97.421 li
0 0 0 0 cmyk
f
1.05536 lw
8 ml
28.2412 95.1009 mo
111.345 5.07701 li
.535302 .450416 .448524 .0988174 cmyk
@
[3.16608 1.05536 ] 0 dsh
111.351 5.07701 mo
194.454 95.1009 li
.38294 .310368 .315282 .00225834 cmyk
@
.26384 lw
[.26384 .26384 ] 0 dsh
10.9597 95.1784 mo
211.719 95.1784 li
.750271 .679713 .654902 .901945 cmyk
@
1.05536 lw
[] 0 dsh
63.068 95.3239 mo
128.598 24.3373 li
.535302 .450416 .448524 .0988174 cmyk
@
97.8949 95.6057 mo
146.149 43.3338 li
@
[3.16608 1.05536 ] 0 dsh
124.807 65.4964 mo
152.508 95.5042 li
.38294 .310368 .315282 .00225834 cmyk
@
.26384 lw
[.26384 .26384 ] 0 dsh
10.9597 66.4198 mo
211.719 66.4198 li
.750271 .679713 .654902 .901945 cmyk
@
[.26384 .26384 ] 0 dsh
10.9597 43.4657 mo
211.719 43.4658 li
@
[.26384 .26384 ] 0 dsh
10.9597 24.4693 mo
211.719 24.4693 li
@
[.26384 .26384 ] 0 dsh
10.9597 5.20893 mo
211.719 5.20895 li
@
.535302 .450416 .448524 .0988174 cmyk
%ADOBeginSubsetFont: SBAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /SBAAAA+CambriaMath
Type42DictBegin
[<000100000008000800080008676c796600000000000001a0000008e26865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e80000004c6c6f636100000000000001340000
00286d617870000000000000015c000000206e616d65000000000000017c
0000002467646972000000000000000000000000000100000006e66638ef
545c5f0f3cf5001b080000000000b9e6983d00000000d18d01e4f434ec4a
16f118ef00000009000200000000000000010000079afe390000175af434
fda416f1000100000000000000000000000000000013054400be046e0081
046e00b2046e0081046e0090046e004d0287008a044d006403ab002304f8
006904db005c0482000f04a1009004a100b704a1008804a1009d04a10051
05fa009502da009500000050008400af00ec01300168019701e1021b0269
02b202f80330036f03b8040204490460047100010000001300c0002d0097
000600020010002f0086000009a411280003000100000001001200010000
0000000600120000454e594e4f522b43616d627269614d61746800>
[2275 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 1380 11 <0001000ffff00473059e002c000001020321373637012e0223220607273e
0233321e011514070615141e0233323637170e0123222635341302d1df91
feae1053b501b00b1b2e2728483d465653553346602d050508111b191c3e
21485a83424c42150259fea8feff4266f4024b826a2c27344d503d2040b4
c083adac63726b37162d24485347717b5f011e00>SBAAAA+CambriaMath AddT42Char 
1 1078 9 <00020069fff004e003f0002200330000010615141633323637170e012322
26353437270e022322263534123e01333217371701363534262322060215
141633323e013703df0f161b1f4830486998545462060e49697648787c4e
92dd8c95696170fe981032395d90582b2d4289542101383f332124383748
694f5d4c19170256572ea39c87010ac16f484810fe8e4a4a4244bbfec47d
494881ae9700>SBAAAA+CambriaMath AddT42Char 
1 0 0 <000400be0000048605540028002c0030003400000135343e02373e033534
2623220e020723353e0133321e0215140e02070e031d0117152335011121
1101112111023706162a2417261b0f413e2030241909603c894346633e1c
0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f3339
234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1fee4
049afb6604f7faac0554>SBAAAA+CambriaMath AddT42Char 
SBAAAA+CambriaMath /CharStrings get begin
/g11 11 def
/g9 9 def
end
SBAAAA+CambriaMath /Encoding get
dup 33 /g11 put
dup 34 /g9 put
pop
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath /SBAAAA+CambriaMath findfont ct_VMDictPut/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 221{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf91.4041 14.5747 mo(!)shYRBUQJ+CambriaMath*1 [3.9576 0 0 -3.9576 0 0 ]msf94.3064 15.6301 mo(")sh.38294 .310368 .315282 .00225834 cmyk
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 1234 10 <0002005cfff004720598001d0030000001173e0133321615140e04232226
270727133635342e0127372533030615141633323e0335342623220e0107
021c0d57996a727d2a4c6a8398574278405d6dfd1513203110012675f210
313a32524945322b2d42895222033404665aa49b58d3a37a502920284810
046a5e311f1c0c074110fbda4a4749402d66a1e0604a4781aa9b>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g10 10 def
end
YRBUQJ+CambriaMath /Encoding get
dup 35 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 220{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf125.29 14.6001 mo(!)shYRBUQJ+CambriaMath*1 [3.9576 0 0 -3.9576 0 0 ]msf128.192 15.6555 mo(#)sh7.9255 5.07703 mo
8.71702 6.66006 li
8.18934 6.66006 li
8.18936 94.0017 li
8.71704 94.0017 li
7.92552 95.5848 li
7.134 94.0017 li
7.66168 94.0017 li
7.66166 6.66006 li
7.13398 6.66006 li
cp
.750271 .679713 .654902 .901945 cmyk
f
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 962 8 <00010023fff0039c03bc00240000013e01372723220e0107273e03332107
21030615141633323637170e012322263534370140103f20055642474425
3f36514a5646020c1efec771161a1c2250333a56874747521c019a49ee5e
0915333035434c271184fe0b62322824383d3660525e4b437f00>YRBUQJ+CambriaMath AddT42Char 
1 160 1 <00020081fff003ed0565000d001c00000522021134123e01333212111002
0110123332121134022623220e02022cd8d34175a461dbd6e5fe3c797f79
753c6b4c455d3918100154015ab8010caf54feaefeaafe9efe9502ccfeba
fecf011f012de6011d7c529add00>YRBUQJ+CambriaMath AddT42Char 
1 264 2 <000100b2000003ce0565001a000001141e03171521353e03351134262322
0607270133061502b70d213e5e4dfd1d6f5f32171c1b2076572c01d43706
01053a3b25150b0249490511223e46032b2825423a4d011760aa>YRBUQJ+CambriaMath AddT42Char 
1 350 3 <00010081000003c905650028000025323e0237330321353e013736373e02
35342e0123220723353e0133321615140e0307060702be313c2415105511
fcc92b9286743338371830634bbb417979d354babe152d4c5c71be59a00c
1c2d2ffedc3069dc95804248695d2f4b7342d0c03933a39b355957646778
c996>YRBUQJ+CambriaMath AddT42Char 
1 472 4 <00010090fff003ca05650030000013353e0133321e0115140e0107151e03
15140e012322262735331e013332363534262b01353e0235342623220607
9f74ca5e71aa5a447b623d71583565d09556c753782373638285b0aa5a87
b95a76715e761c043abe373646835b5581602e090b3554754b74b4682720
d4685e8e8b929a5808588a566f786669>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g8 8 def
/g1 1 def
/g2 2 def
/g3 3 def
/g4 4 def
end
YRBUQJ+CambriaMath /Encoding get
dup 36 /g8 put
dup 37 /g1 put
dup 38 /g2 put
dup 39 /g3 put
dup 40 /g4 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 /g8 /g1 /g2 /g3 /g4 215{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf1.96828 43.5796 mo($)sh109.859 11.8247 mo(%)sh127.304 30.4135 mo(&)sh145.032 50.3607 mo(')sh123.746 73.1313 mo(\()sh214.776 4.81319 mo
215.568 6.39622 li
215.04 6.39622 li
215.04 22.6708 li
215.568 22.6708 li
214.776 24.2538 li
213.985 22.6708 li
214.512 22.6708 li
214.512 6.39622 li
213.985 6.39622 li
cp
f
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 814 7 <00020064fff0043e059c00240030000001232e0123220615141e01171e02
15140e0123222e01353412372e0135343e0133321617010602151433323e
01353426041c5c237f59434f1a484b5b522575da8f7fa64bede84f49468a
5e57ad6bfe2a9bb9cd5180494204726e6d45371d3a61586d8c8f597cec88
54905ed4013f6159823a3f663c3d4dfe5442fec7c3e96cc36d76b900>YRBUQJ+CambriaMath AddT42Char 
1 1632 13 <000100b70000040705080029000001141e02171e03171521353e03373e03
35113426232206072e01273e0137330e021502db04090f0a0c283e573dfc
e73b523a230d0e140c071e1c1f7a610d160c7cf37d3d02020101081f2d1f
16080c0d09050157570205090b080915202e2202cd2720403f172e184487
433757522800>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g7 7 def
/g13 13 def
end
YRBUQJ+CambriaMath /Encoding get
dup 41 /g7 put
dup 42 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 /g8 /g1 /g2 /g3 /g4 /g7 /g13 213{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf218.72 14.8221 mo(\))shYRBUQJ+CambriaMath*1 [3.9576 0 0 -3.9576 0 0 ]msf221.358 15.8774 mo(*)sh214.776 24.3373 mo
215.568 25.9204 li
215.04 25.9204 li
215.04 42.8984 li
215.568 42.8984 li
214.776 44.4814 li
213.985 42.8984 li
214.512 42.8984 li
214.512 25.9204 li
213.985 25.9204 li
cp
f
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 1758 14 <00010088000003ea050f0033000025323e0237330e010721353e03373e03
35342e022322060723353e0133321e0215140e02070e050702d62f38251a
115d050905fcb1184050663e5e7644191d3653365d7e238380d75668935c
290b1b2c2119505f6862521aa30718312b4790473436696c733e5e856858
3233563c226560c335302f507041274341422520546068666028>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g14 14 def
end
YRBUQJ+CambriaMath /Encoding get
dup 43 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 /g8 /g1 /g2 /g3 /g4 /g7 /g13 /g14 212{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf218.72 34.6144 mo(\))shYRBUQJ+CambriaMath*1 [3.9576 0 0 -3.9576 0 0 ]msf221.358 35.6698 mo(+)sh214.776 44.3892 mo
215.568 45.9722 li
215.04 45.9722 li
215.04 65.5768 li
215.568 65.5768 li
214.776 67.1598 li
213.985 65.5768 li
214.512 65.5768 li
214.512 45.9722 li
213.985 45.9722 li
cp
f
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 1904 15 <0001009dffef03ea050f0036000013353e0133321e0215140e0207151e03
15140e022322262735331e033332363534262b01353e0335342623220607
ac76d160508b6639244b6d47437457323c78b0765dc05681102c3b4d3181
85afac5869996632726c5b7b2103e5c5323322456744406250411e0c0c35
516a4050896438251ed832472d147b7d85896005314e683b606f6463>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g15 15 def
end
YRBUQJ+CambriaMath /Encoding get
dup 44 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 /g8 /g1 /g2 /g3 /g4 /g7 /g13 /g14 /g15 211{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf218.72 56.0249 mo(\))shYRBUQJ+CambriaMath*1 [3.9576 0 0 -3.9576 0 0 ]msf221.358 57.0803 mo(,)sh214.776 82.1183 mo
215.568 83.7013 li
215.04 83.7013 li
215.04 93.8884 li
215.568 93.8884 li
214.776 95.4714 li
213.985 93.8884 li
214.512 93.8884 li
214.512 83.7013 li
213.985 83.7013 li
cp
f
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 2240 18 <0001009500b5025704240004000001150127130257feb375c004244efcdf
23034c00>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g18 18 def
end
YRBUQJ+CambriaMath /Encoding get
dup 45 /g18 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 /g8 /g1 /g2 /g3 /g4 /g7 /g13 /g14 /g15 /g18 210{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf218.456 89.1122 mo($)shYRBUQJ+CambriaMath*1 [3.9576 0 0 -3.9576 0 0 ]msf221.094 87.2653 mo(-)sh1.05536 lw
[3.16608 1.05536 ] 0 dsh
109.24 82.1183 mo
121.451 95.3458 li
.38294 .310368 .315282 .00225834 cmyk
@
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 608 5 <0002004d00000421055c001a00220000253e023d01213501331133323e01
3733072315141e02171521012135343637230102043e2a0dfdd402498f15
3a32210e4c0cf00915292efe6afeee018706040afe79311027484aa44b03
73fca3112b31cea4433e24180c3101fff95ee93bfd93>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g5 5 def
end
YRBUQJ+CambriaMath /Encoding get
dup 46 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 /g8 /g1 /g2 /g3 /g4 /g7 /g13 /g14 /g15 /g18 /g5 209{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf108.278 89.3052 mo(.)sh.26384 lw
[.26384 .26384 ] 0 dsh
10.9597 82.514 mo
211.719 82.5141 li
@
214.776 67.0794 mo
213.985 68.6625 li
214.512 68.6625 li
214.512 80.5377 li
213.985 80.5377 li
214.776 82.1207 li
215.568 80.5377 li
215.04 80.5377 li
215.04 68.6625 li
215.568 68.6625 li
cp
f
%ADOBeginSubsetFont: SBAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQJ+CambriaMath gcheck setglobal} if
1 2052 16 <000200510000044305010022002e0000253e053d01213536003733113332
3e0237330e01072315141e02171521012135343e023723060207020b1e2a
1c0d0701fdcd950126959f1229331f150c55030703f60519312cfe50fef9
0180020304020b60bf613c080d1117233527834fcf0199cffce308192d24
376c38833a4024120c3c01e4c92264675d208bfeee8a>YRBUQJ+CambriaMath AddT42Char 
1 720 6 <0001008afff002410596001c0000013e0135342e01273f01330306151416
33323637170e0123222635343701590c0a1629350cfc3bf6161a1c1e443e
39617b4c414e1c047c353f1b1e1f0e033409fbad63312824314538664b5f
4a437f00>YRBUQJ+CambriaMath AddT42Char 
1 1520 12 <00020090ffeb0412050f000f0023000005220211343e0233321e02151002
01141e0233323e0235342e0223220e020246ded84379a66377a96b32ecfe
391d3d5c403c5a3b1e213c5b3b465e37171501420147abfaa55159a5ee96
feb3feab02a195d98c423e83c9899ade8f44498dcb00>YRBUQJ+CambriaMath AddT42Char 
1 2194 17 <000300950137058f035b00030007000800001335211501352115139504d0
fb3004d02a02d68585fe618585011200>YRBUQJ+CambriaMath AddT42Char 
YRBUQJ+CambriaMath /CharStrings get begin
/g16 16 def
/g6 6 def
/g12 12 def
/g17 17 def
end
YRBUQJ+CambriaMath /Encoding get
dup 47 /g16 put
dup 48 /g6 put
dup 49 /g12 put
dup 50 /g17 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQJ+CambriaMath*1 [33{/.notdef}rp /g11 /g9 /g10 /g8 /g1 /g2 /g3 /g4 /g7 /g13 /g14 /g15 /g18 /g5 /g16 /g6 /g12 /g17 205{/.notdef}rp]YRBUQJ+CambriaMath nfYRBUQJ+CambriaMath*1 [5.2768 0 0 -5.2768 0 0 ]msf218.72 74.9777 mo(\))shYRBUQJ+CambriaMath*1 [3.9576 0 0 -3.9576 0 0 ]msf221.358 76.0331 mo(/)shYRBUQJ+CambriaMath*1 [4.74912 0 0 -4.74912 0 0 ]msf117.481 8.84424 mo(0)shYRBUQJ+CambriaMath*1 [3.42992 0 0 -3.42992 0 0 ]msf119.064 9.8996 mo(1)shYRBUQJ+CambriaMath*1 [4.74912 0 0 -4.74912 0 0 ]msf121.175 8.84424 mo(2%)[3.42978 0 ]xsh135.258 28.0654 mo(0)shYRBUQJ+CambriaMath*1 [3.42992 0 0 -3.42992 0 0 ]msf136.841 29.1208 mo(*)shYRBUQJ+CambriaMath*1 [4.74912 0 0 -4.74912 0 0 ]msf138.952 28.0654 mo(2&)[3.42978 0 ]xsh152.606 47.0454 mo(0)shYRBUQJ+CambriaMath*1 [3.42992 0 0 -3.42992 0 0 ]msf154.189 48.1008 mo(+)shYRBUQJ+CambriaMath*1 [4.74912 0 0 -4.74912 0 0 ]msf156.3 47.0454 mo(2')[3.42978 0 ]xsh130.813 70.1377 mo(0)shYRBUQJ+CambriaMath*1 [3.42992 0 0 -3.42992 0 0 ]msf132.396 71.193 mo(,)shYRBUQJ+CambriaMath*1 [4.74912 0 0 -4.74912 0 0 ]msf134.507 70.1377 mo(2\()[3.42978 0 ]xsh114.862 86.4134 mo(0)shYRBUQJ+CambriaMath*1 [3.42992 0 0 -3.42992 0 0 ]msf116.445 87.4688 mo(/)shYRBUQJ+CambriaMath*1 [4.74912 0 0 -4.74912 0 0 ]msf118.556 86.4134 mo(2\()[3.42978 0 ]xsh110.163 5.34087 mo
110.163 4.68514 110.695 4.15359 111.351 4.15359 cv
112.007 4.15359 112.538 4.68514 112.538 5.34087 cv
112.538 5.99658 112.007 6.52814 111.351 6.52814 cv
110.695 6.52814 110.163 5.99658 110.163 5.34087 cv
cp
f
[] 0 dsh
110.163 5.34086 mo
110.163 4.68514 110.695 4.15357 111.351 4.15357 cv
112.006 4.15357 112.538 4.68514 112.538 5.34086 cv
112.538 5.99657 112.006 6.52814 111.351 6.52814 cv
110.695 6.52814 110.163 5.99657 110.163 5.34086 cv
cp
@
127.577 24.3373 mo
127.577 23.6816 128.108 23.1501 128.764 23.1501 cv
129.42 23.1501 129.951 23.6816 129.951 24.3373 cv
129.951 24.9931 129.42 25.5246 128.764 25.5246 cv
128.108 25.5246 127.577 24.9931 127.577 24.3373 cv
cp
f
127.577 24.3373 mo
127.577 23.6816 128.108 23.1501 128.764 23.1501 cv
129.42 23.1501 129.951 23.6816 129.951 24.3373 cv
129.951 24.993 129.42 25.5246 128.764 25.5246 cv
128.108 25.5246 127.577 24.993 127.577 24.3373 cv
cp
@
145.254 43.3338 mo
145.254 42.6781 145.786 42.1465 146.441 42.1465 cv
147.097 42.1465 147.629 42.6781 147.629 43.3338 cv
147.629 43.9895 147.097 44.5211 146.441 44.5211 cv
145.786 44.5211 145.254 43.9895 145.254 43.3338 cv
cp
f
145.254 43.3338 mo
145.254 42.6781 145.786 42.1465 146.441 42.1465 cv
147.097 42.1465 147.629 42.6781 147.629 43.3338 cv
147.629 43.9895 147.097 44.5211 146.441 44.5211 cv
145.786 44.5211 145.254 43.9895 145.254 43.3338 cv
cp
@
124.147 66.4198 mo
124.147 65.837 124.679 65.3645 125.334 65.3645 cv
125.99 65.3645 126.522 65.837 126.522 66.4198 cv
126.522 67.0027 125.99 67.4752 125.334 67.4752 cv
124.679 67.4752 124.147 67.0027 124.147 66.4198 cv
cp
f
124.147 66.4198 mo
124.147 65.8369 124.679 65.3644 125.334 65.3644 cv
125.99 65.3644 126.522 65.8369 126.522 66.4198 cv
126.522 67.0027 125.99 67.4752 125.334 67.4752 cv
124.679 67.4752 124.147 67.0027 124.147 66.4198 cv
cp
@
108.844 82.9098 mo
108.844 82.2541 109.376 81.7225 110.032 81.7225 cv
110.687 81.7225 111.219 82.2541 111.219 82.9098 cv
111.219 83.5655 110.687 84.0971 110.032 84.0971 cv
109.376 84.0971 108.844 83.5655 108.844 82.9098 cv
cp
f
108.844 82.9098 mo
108.844 82.2541 109.376 81.7225 110.032 81.7225 cv
110.687 81.7225 111.219 82.2541 111.219 82.9098 cv
111.219 83.5655 110.687 84.0971 110.032 84.0971 cv
109.376 84.0971 108.844 83.5655 108.844 82.9098 cv
cp
@
grestore
%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B71EB594BAA87F31A170DCF548DAEE3311FC43FC78A6C074493B3549D0E1827F1703C6338D1907CB557F57F502EA6D6799A8DE937EF9683D579DF1ABAB4E74C3A1B979FDB2EF2D12A2FA9CDA68067A5474500A960368C6287159041D49A1> |-/parenright <1C60D8A8C9B71EB594BAA87F31A170DCF0F44A88F271C1204DA8CF0A554BEEB2F39FC92A6198D8CB5B5035678EDF15C268D7DFBF834C3E0481F4D74050740572F4CCA890EC4E0E90C1B49113DEAB732B279883A40AC82E62D22FC7681B0EFAEE5F4823C1A08D4996DA0A> |-/a <1C60D8A8C9B7883C4DBCBC20C60033A54608E6FBB3D7C7C85ABEB5DA8B29DCCF2F1B64BF10E8E3CE8B60DF1662604534AC1985F7E97A2469BB051F45927F3DAD189CC62DA3E328E861F054B32126D17977B45424B48BB15A379A75ACB8DBA1664189B436542242CF85EED4561386ED0861ADF24AA752E7E6CBC600908DFC0865001333BD546BA8A19A8754D62428A60A14E8B4F00BD3AE898D7BC838A0CA> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 97 /a putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S /T 4{/.notdef}rp /Y 7{/.notdef}rp /a 158{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf107.654 107.384 mo(\(a\))[3.29318 4.23448 0 ]xshgsave
.537933 161.739 mo
225.584 161.739 li
225.584 118.342 li
.537933 118.342 li
.537933 161.739 li
clp
225.584 161.739 mo
.537933 161.739 li
.537933 118.342 li
225.584 118.342 li
225.584 161.739 li
0 0 0 0 cmyk
f
.94856 lw
8 ml
1.01226 153.791 mo
35.987 118.817 li
.750271 .679713 .654902 .901945 cmyk
@
35.8718 118.817 mo
63.3565 146.301 li
@
8.60074 153.955 mo
39.945 122.611 li
@
25.9119 153.942 mo
48.4686 131.385 li
@
41.8003 153.824 mo
56.4132 139.211 li
@
[2.84568 .94856 ] 0 dsh
56.0287 153.982 mo
63.4489 146.562 li
.38294 .310368 .315282 .00225834 cmyk
@
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: GCAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /GCAAAA+CambriaMath
Type42DictBegin
[<000100000008000800080008676c796600000000000001580000026a6865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e80000001c6c6f636100000000000001040000
00106d6178700000000000000114000000206e616d650000000000000134
0000002467646972000000000000000000000000000100000006e66638ef
545c5f0f3cf5001b080000000000b9e6983d00000000d18d01e4f434ec4a
16f118ef00000009000200000000000000010000079afe390000175af434
fda416f1000100000000000000000000000000000007054400be046e0081
046e00b20720009503ce001705fa009505fe009500000050008400af00d0
010a0121013500010000000700c0002d0097000600020010002f00860000
09a41128000300010000000100120001000000000006001200004a515a52
4e492b43616d627269614d61746800>
[619 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 416 4 <00010017000003aa03cd00250000013e0133321707232e0223220e020703
23133e0135342623220607273e0133321615140701bc62b55d4931306706
161e1724556a3f155fad910e081a1c1f453c395c7c4b3f491302cb857c0b
e02a2e123e847a5efe4f027a3c42162824334338605153433235>GCAAAA+CambriaMath AddT42Char 
1 532 5 <000300950137058f035b00030007000800001335211501352115139504d0
fb3004d02a02d68585fe618585011200>GCAAAA+CambriaMath AddT42Char 
1 160 1 <00020081fff003ed0565000d001c00000522021134123e01333212111002
0110123332121134022623220e02022cd8d34175a461dbd6e5fe3c797f79
753c6b4c455d3918100154015ab8010caf54feaefeaafe9efe9502ccfeba
fecf011f012de6011d7c529add00>GCAAAA+CambriaMath AddT42Char 
1 0 0 <000400be0000048605540028002c0030003400000135343e02373e033534
2623220e020723353e0133321e0215140e02070e031d0117152335011121
1101112111023706162a2417261b0f413e2030241909603c894346633e1c
0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f3339
234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1fee4
049afb6604f7faac0554>GCAAAA+CambriaMath AddT42Char 
GCAAAA+CambriaMath /CharStrings get begin
/g4 4 def
/g5 5 def
/g1 1 def
end
GCAAAA+CambriaMath /Encoding get
dup 33 /g4 put
dup 34 /g5 put
dup 35 /g1 put
pop
end
%ADOEndSubsetFont
/YRBUQK+CambriaMath /GCAAAA+CambriaMath findfont ct_VMDictPut/YRBUQK+CambriaMath*1 [33{/.notdef}rp /g4 /g5 /g1 220{/.notdef}rp]YRBUQK+CambriaMath nfYRBUQK+CambriaMath*1 [5.69136 0 0 -5.69136 0 0 ]msf31.2137 159.544 mo(!)sh35.7194 159.544 mo(")sh41.4107 159.544 mo(#)sh[] 0 dsh
34.2118 153.899 mo
52.4569 135.654 li
@
48.2031 153.838 mo
59.5106 142.531 li
@
17.1378 153.798 mo
44.0559 126.879 li
@
[2.84568 .94856 ] 0 dsh
63.1429 146.088 mo
70.8785 153.823 li
.38294 .310368 .315282 .00225834 cmyk
@
[] 0 dsh
87.0941 144.186 mo
112.463 118.817 li
.750271 .679713 .654902 .901945 cmyk
@
112.468 118.817 mo
140.098 146.447 li
@
118.159 153.824 mo
132.772 139.211 li
@
[2.84568 .94856 ] 0 dsh
132.625 153.982 mo
140.045 146.562 li
.38294 .310368 .315282 .00225834 cmyk
@
[] 0 dsh
110.808 153.899 mo
129.053 135.654 li
.750271 .679713 .654902 .901945 cmyk
@
124.799 153.838 mo
136.107 142.531 li
@
98.9511 153.869 mo
123.332 129.488 li
@
.750271 .679713 .654902 .901945 cmyk
%ADOBeginSubsetFont: GCAAAA+CambriaMath AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQK+CambriaMath gcheck setglobal} if
1 578 6 <00010095ffdc056904b600060000133501150901159504d4fbc2043e0203
8c022796fe29fe299600>YRBUQK+CambriaMath AddT42Char 
1 350 3 <00020095ffcc068b04ce0006000d00001335011509011503350115090115
95032efd5802a866032efd5802a802078c023b96fe15fe1596023b8c023b
96fe15fe1596>YRBUQK+CambriaMath AddT42Char 
1 264 2 <000100b2000003ce0565001a000001141e03171521353e03351134262322
0607270133061502b70d213e5e4dfd1d6f5f32171c1b2076572c01d43706
01053a3b25150b0249490511223e46032b2825423a4d011760aa>YRBUQK+CambriaMath AddT42Char 
YRBUQK+CambriaMath /CharStrings get begin
/g6 6 def
/g3 3 def
/g2 2 def
end
YRBUQK+CambriaMath /Encoding get
dup 36 /g6 put
dup 37 /g3 put
dup 38 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQK+CambriaMath*1 [33{/.notdef}rp /g4 /g5 /g1 /g6 /g3 /g2 217{/.notdef}rp]YRBUQK+CambriaMath nfYRBUQK+CambriaMath*1 [5.69136 0 0 -5.69136 0 0 ]msf104.084 159.544 mo(#)sh108.827 159.544 mo($)sh114.756 159.544 mo(!)sh119.024 159.544 mo(%)sh125.664 159.544 mo(&)sh[2.84568 .94856 ] 0 dsh
87.0941 144.665 mo
96.4174 153.988 li
.38294 .310368 .315282 .00225834 cmyk
@
[2.84568 .94856 ] 0 dsh
77.6085 153.796 mo
87.2141 144.191 li
@
[2.84568 .94856 ] 0 dsh
140.213 146.562 mo
147.558 153.906 li
@
[] 0 dsh
154.916 153.791 mo
189.891 118.817 li
.750271 .679713 .654902 .901945 cmyk
@
190.013 118.817 mo
224.988 153.791 li
@
170.804 147.542 mo
194.788 123.559 li
@
179.816 153.942 mo
202.372 131.385 li
@
YRBUQK+CambriaMath*1 [5.69136 0 0 -5.69136 0 0 ]msf185.27 159.544 mo(!)sh189.775 159.544 mo(")sh195.467 159.544 mo(&)sh197.127 144.932 mo
206.406 135.654 li
@
213.253 150.026 mo
217.428 145.851 li
@
[2.84568 .94856 ] 0 dsh
170.804 147.273 mo
177.49 153.959 li
.38294 .310368 .315282 .00225834 cmyk
@
[2.84568 .94856 ] 0 dsh
213.253 149.882 mo
217.375 154.004 li
@
[2.84568 .94856 ] 0 dsh
197.127 144.665 mo
206.406 153.944 li
@
[2.84568 .94856 ] 0 dsh
164.402 153.967 mo
170.858 147.511 li
@
[2.84568 .94856 ] 0 dsh
188.116 153.787 mo
197.238 144.665 li
@
[2.84568 .94856 ] 0 dsh
209.221 153.932 mo
213.271 149.882 li
@
grestore
%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B7CDD8B4397BC5D546373275BA909D41337177A39F41B58C96866A4C171F786C9B49E0B845D6F92D561ED969B60685344F4B3DE87DBA038984A25C9A3BB855F4BE09D2B653E4B0E57C4942F5E843087B81EB813B74925AF65E3A479E3B2E9C034B803FE5EE7939682697FC076E59CAED8A56821B085006724DA544D253B65E7F266FF76BD33F328219> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 98 /b putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /b 157{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf107.419 171.701 mo(\(b\))[3.29318 4.70477 0 ]xshgsave
275.606 162.877 mo
450.648 162.877 li
450.648 1.29974 li
275.606 1.29974 li
275.606 162.877 li
clp
450.648 162.877 mo
275.606 162.877 li
275.606 1.29974 li
450.648 1.29974 li
450.648 162.877 li
0 0 0 0 cmyk
f
1.28236 lw
8 ml
278.812 27.2735 mo
303.183 2.90259 li
.750271 .679713 .654902 .901945 cmyk
@
303.177 2.90259 mo
327.569 27.2946 li
@
299.65 27.4219 mo
313.911 13.1615 li
@
311.191 27.5413 mo
319.48 19.2527 li
@
289.391 27.3522 mo
308.712 8.03206 li
@
%ADOBeginSubsetFont: VCAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /VCAAAA+ArialMT
Type42DictBegin
[<000100000008000800080008676c796600000000000001a4000006c06865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e8000000506c6f636100000000000001380000
002a6d6178700000000000000164000000206e616d650000000000000184
0000002067646972000000000000000000000000000100000006cccde15c
077f5f0f3cf5081b080000000000a2e3272a00000000cd50d516faaffd67
1000085100000009000100000000000000010000073efe4e00431000faaf
fa7a10000001000000000000000000000000000000140600010002390000
04730055047300df0473003c047300560473001a0639006305c700a10556
005c0473004a047300460473004b047300420473008701c7008804000088
047300870473008702aa00850000001500150048005e009000d100ee0123
015b01a501f80227025d029d02bf02d202ed031103420360000000010000
001402b5003c00ca000700020010002f0001000000000000000500020000
000100120001000000000006000e0000414b454a41432b417269616c4d54
00>
[1729 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 694 9 <0001005cffe704eb05d30030000013371e02333236363534262726242726
263534363633321616170726262322061514171604171616151406062322
24265cb70d5fc87d6faa53505c3bfe6c5169677ef294a3f98605ba0fada9
b0a1393801d958807a86fb9dc7fef39901d7106e8d574273444567231761
2b37a3656fc16469cc810e8b8e815b4f33336b283bb57675cf7374e9>VCAAAA+ArialMT AddT42Char 
1 1338 14 <00010087000003e805ba0014000033113311363332161615112311342623
220606151187b47ec076ae4bb4756b508d3c05bafdf2925da49cfd5f02a1
877b538e7dfdbb00>VCAAAA+ArialMT AddT42Char 
1 842 10 <0002004affe8041c043e0028003700002506062322263534363637363736
37363534272623220607273e02333216161716151514161723260306070e
02151416333236373635033c64b96aafbc477348356bda67013345887f79
1db0186ed08988aa5010091722bc1c1762c46f5c326d6968a2261d835546
ab854e814e140e0d1a24250a6e2d3d597118718b4b40614a2e78f0fb853d
3801dd281c10284d2f48605b4f3d7700>VCAAAA+ArialMT AddT42Char 
1 1570 18 <00020087fe690421043e0012001e00001311331536363332161615140206
232226271103141633323635342623220687a43a926888d06a75df7b5a8f
2e11a67678aba77473b1fe6905bd8a51518cff98a3fefb8b4c3afdfb03a4
cdc4cbd5cbcad700>VCAAAA+ArialMT AddT42Char 
1 1102 12 <0002004bffe8041e043e0015001d00000117060623220011100033320011
14072116163332360121262726232206035eba2ceeb9e9feef0114dcd501
0e01fce80ab285638cfdda02510c3856897ca9015617a3b4011f0103010c
0128fedefef91020afba680195864368a600>VCAAAA+ArialMT AddT42Char 

1 0 1 <> VCAAAA+ArialMT AddT42Char 
1 144 3 <000100df000002fb05c0000a0000212311060607353636373302fbb441d3
5497e22f74047b3e7c1fae47ca5f>VCAAAA+ArialMT AddT42Char 
1 0 0 <00020100000005000500000300070000211121112521112101000400fc20
03c0fc400500fb002004c000>VCAAAA+ArialMT AddT42Char 
VCAAAA+ArialMT /CharStrings get begin
/g9 9 def
/g14 14 def
/g10 10 def
/g18 18 def
/g12 12 def
/g1 1 def
/g3 3 def
end
VCAAAA+ArialMT /Encoding get
dup 33 /g9 put
dup 34 /g14 put
dup 35 /g10 put
dup 36 /g18 put
dup 37 /g12 put
dup 38 /g1 put
dup 39 /g3 put
pop
end
%ADOEndSubsetFont
/YRBUQL+ArialMT /VCAAAA+ArialMT findfont ct_VMDictPut/YRBUQL+ArialMT*1 [33{/.notdef}rp /g9 /g14 /g10 /g18 /g12 /g1 /g3 216{/.notdef}rp]YRBUQL+ArialMT nfYRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf291.478 35.1212 mo(!"#$%&')[4.16769 3.52649 3.52649 3.52649 3.52649 1.92355 0 ]xsh399.354 27.594 mo
423.725 3.22318 li
@
423.719 3.22319 mo
448.111 27.6152 li
@
431.733 27.5413 mo
440.022 19.2527 li
@
409.933 27.3522 mo
429.253 8.03206 li
@
419.871 17.6497 mo
429.57 27.3478 li
@
%ADOBeginSubsetFont: VCAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQL+ArialMT gcheck setglobal} if
1 288 5 <00010056ffe6041605c0002b000013371616333236353426232207371633
3236353426232206072736363332161615140607161615140023222656b4
1f956b7fafa27d334c14120b73b8866a698c14b421eaae78ca6b66648290
fee8d6c1ff0183189987b0827ca1149e02787d6382848420b5c767b2645f
9c2e1ebd8ec0fef5e600>YRBUQL+ArialMT AddT42Char 
YRBUQL+ArialMT /CharStrings get begin
/g5 5 def
end
YRBUQL+ArialMT /Encoding get
dup 40 /g5 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQL+ArialMT*1 [33{/.notdef}rp /g9 /g14 /g10 /g18 /g12 /g1 /g3 /g5 215{/.notdef}rp]YRBUQL+ArialMT nfYRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf412.006 35.1212 mo(!"#$%&\()[4.16769 3.52649 3.52649 3.52649 3.52649 1.92355 0 ]xsh339.403 27.2735 mo
363.774 2.90259 li
@
363.768 2.90259 mo
388.16 27.2946 li
@
360.242 27.4219 mo
374.502 13.1615 li
@
371.783 27.5413 mo
380.072 19.2527 li
@
347.739 19.2527 mo
356.027 27.5413 li
@
%ADOBeginSubsetFont: VCAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQL+ArialMT gcheck setglobal} if
1 188 4 <0001003c0000040705c0001e000025152126373636373636353426232206
0727363633321615140606070606070407fc37021725a39aefa8997b829c
01b913f8d1d3f648a7c2a25c1eadad413c63c07ec4e5666b939c8a13cfd9
eaad58aabca488613100>YRBUQL+ArialMT AddT42Char 
1 582 8 <000200a1000005ad05ba0018002200003311213216161514060716171617
1323032e02272623231111213236363534262321a1028ac4cc7acad34d28
554cfff4c2556e572d214be101a185964e97a3fe3005ba4fc8799cd61d25
244e75fe710131848c380b07fd750333377947688600>YRBUQL+ArialMT AddT42Char 
1 1498 17 <00010087000003e6043e0016000033113315363332161617161511231134
2626232206151187a275dd60a150100ab42a6b4873a7042697af45704d32
7dfd7302866e6d4192ccfdbc>YRBUQL+ArialMT AddT42Char 
1 1444 16 <00010088000003f805ba000b000033113311013301012301071188b401aa
e9fe6a01bfdefea17f05bafcbc01b0fe76fd64021f7afe5b>YRBUQL+ArialMT AddT42Char 
1 1406 15 <000200880000013c05ba000300070000133533150311331188b4b4b404eb
cfcffb150426fbda>YRBUQL+ArialMT AddT42Char 
1 1210 13 <00020042fe5103ea043e001e002a00001717161716333236373627062322
023534123633321735331114060623222613141633323635342623220666
af0b3243747d88180e0176b0dbf06ed18dbc7aa665dba0beea99a67d7ca8
ad7a78a8581a512532645a37b08b013cdd9801018c9880fc6af8cf78ab03
2ad1c0bfccc3c6c3>YRBUQL+ArialMT AddT42Char 
YRBUQL+ArialMT /CharStrings get begin
/g4 4 def
/g8 8 def
/g17 17 def
/g16 16 def
/g15 15 def
/g13 13 def
end
YRBUQL+ArialMT /Encoding get
dup 41 /g4 put
dup 42 /g8 put
dup 43 /g17 put
dup 44 /g16 put
dup 45 /g15 put
dup 46 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQL+ArialMT*1 [33{/.notdef}rp /g9 /g14 /g10 /g18 /g12 /g1 /g3 /g5 /g4 /g8 /g17 /g16 /g15 /g13 209{/.notdef}rp]YRBUQL+ArialMT nfYRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf351.988 35.1212 mo(!"#$%&\))[4.16769 3.52649 3.52649 3.52649 3.52649 1.92355 0 ]xsh288.923 79.4178 mo(*#+,-+.&')[4.48825 3.52649 3.52649 3.2059 1.28235 3.52649 3.52649 2.24414 0 ]xsh278.812 71.8441 mo
303.191 47.4646 li
@
303.177 47.4646 mo
327.577 71.8654 li
@
292.597 71.544 mo
310.265 53.8764 li
@
303.177 71.5087 mo
315.359 59.3265 li
@
284.583 66.0588 mo
290.117 71.5938 li
@
%ADOBeginSubsetFont: VCAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQL+ArialMT gcheck setglobal} if
1 42 2 <00020055ffe7041105c00010001d00001310123633321616121510020623
22272613101633323611102623220706556bd3a076b274426ad3a1d47991
b9a97c7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b701
9dfe97eff00168016aee6986>YRBUQL+ArialMT AddT42Char 
YRBUQL+ArialMT /CharStrings get begin
/g2 2 def
end
YRBUQL+ArialMT /Encoding get
dup 47 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQL+ArialMT*1 [33{/.notdef}rp /g9 /g14 /g10 /g18 /g12 /g1 /g3 /g5 /g4 /g8 /g17 /g16 /g15 /g13 /g2 208{/.notdef}rp]YRBUQL+ArialMT nfYRBUQL+ArialMT*1 [4.16767 0 0 -4.16767 0 0 ]msf302.125 52.821 mo(/)sh314.325 64.905 mo(\))sh283.456 71.3009 mo(\()sh308.87 60.0065 mo(')sh339.403 71.5236 mo
363.783 47.144 li
@
363.768 47.144 mo
388.169 71.5447 li
@
360.242 71.6684 mo
374.507 57.4029 li
@
377.554 71.6679 mo
382.842 66.3794 li
@
349.021 61.8912 mo
358.767 71.6366 li
@
YRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf349.433 79.4178 mo(*#+,-+.&\))[4.48825 3.52649 3.52649 3.2059 1.28235 3.52649 3.52649 2.24414 0 ]xshYRBUQL+ArialMT*1 [4.16767 0 0 -4.16767 0 0 ]msf373.112 62.8292 mo(')sh362.697 52.821 mo(/)sh347.82 67.64 mo(\))sh381.796 71.4549 mo(\()shYRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf409.473 79.4178 mo(*#+,-+.&\()[4.48825 3.52649 3.52649 3.2059 1.28235 3.52649 3.52649 2.24414 0 ]xsh399.354 71.8441 mo
423.733 47.4646 li
@
423.719 47.4646 mo
448.119 71.8654 li
@
430.451 71.579 mo
439.498 62.5323 li
@
437.824 71.606 mo
443.051 66.3794 li
@
413.46 57.7235 mo
427.264 71.5283 li
@
YRBUQL+ArialMT*1 [4.16767 0 0 -4.16767 0 0 ]msf422.686 52.5374 mo(/)sh412.094 63.0375 mo(')sh438.165 67.9689 mo(\))sh441.96 71.6644 mo(\()sh277.53 159.58 mo
302.124 134.986 li
@
302.215 134.986 mo
326.831 159.601 li
@
314.718 159.747 mo
320.885 153.58 li
@
287.788 159.612 mo
307.286 140.115 li
@
299.009 148.771 mo
309.948 159.71 li
@
%ADOBeginSubsetFont: UCAAAA+CambriaMath Initial
ct_T42Dict begin
-1.473 -2.461 2.867 3.113
 256 array 0 1 255 {1 index exch /.notdef put} for  /UCAAAA+CambriaMath
Type42DictBegin
[<000100000008000800080008676c79660000000000000148000002806865
6164000000000000008c000000366868656100000000000000c400000024
686d747800000000000000e8000000106c6f636100000000000000f80000
000a6d6178700000000000000104000000206e616d650000000000000124
0000002467646972000000000000000000000000000100000006e66638ef
545c5f0f3cf5001b080000000000b9e6983d00000000d18d01e4f434ec4a
16f118ef00000009000200000000000000010000079afe390000175af434
fda416f1000100000000000000000000000000000004054400be0442001e
047a000703de00190000005000b9010e0140000000010000000400c0002d
0097000600020010002f0086000009a41128000300010000000100120001
00000000000600120000414f4653444f2b43616d627269614d61746800>
[641 ] AllocGlyphStorage
]def 
76 12 
PrepFor2015
Type42DictEnd
1 160 1 <0001001efff0042403cd004c0000012e0423220e0107273e0133321e0417
333e0333321707232623220e030f011e0533323637170e0123222e012726
27230e0323222737331633323e0201dd0f202216191315222821413f744f
1f2f241c1a17090a6063443f342f1e2846061d09141d3846254412201913
16170f1b33304146714e2b3c2c111f070a6a67433f342f1e2846061d0e1f
3a6601c44f927e270f132f322b5f5e0e1d2e4f753f877d3d190cb52a0614
3a542e55608c5d361b0b2a4a2b68551f4448804495823e190cb52a0f397a
>UCAAAA+CambriaMath AddT42Char 
1 370 2 <00010007fe4c045c03cc00360000052627022726272623220607273e0133
32171e031716121736123635342627372117060706070607060706232226
2737331433323601e91d32351115170e152038294145784a291d14281f17
0e182d1061873b28300a01071b4c8280a59e694944363d15370f2b4f2c3a
9a02aff701083f4c150d34402b67550b082542524d81fee37a8c010cc63e
2f22033132d0ede8e6db62431d160706c2409100>UCAAAA+CambriaMath AddT42Char 
1 540 3 <00010019000003c503bc001b0000010321270136372723220e0207231321
170106071733323e0237033d3dfd2c130223743606ea3430303722593b02
c713fe238b6606e23c403033260119fee73102768538070e234540010732
fddc9f6f070d24494e00>UCAAAA+CambriaMath AddT42Char 
1 0 0 <000400be0000048605540028002c0030003400000135343e02373e033534
2623220e020723353e0133321e0215140e02070e031d0117152335011121
1101112111023706162a2417261b0f413e2030241909603c894346633e1c
0f243c2c20261507129001fcfd060361fc3801e71616252a3527192f3339
234b521424321e821e2e1d334629263e3d462d212c27281c066ea1a1fee4
049afb6604f7faac0554>UCAAAA+CambriaMath AddT42Char 
UCAAAA+CambriaMath /CharStrings get begin
/g1 1 def
/g2 2 def
/g3 3 def
end
UCAAAA+CambriaMath /Encoding get
dup 33 /g1 put
dup 34 /g2 put
dup 35 /g3 put
pop
end
%ADOEndSubsetFont
/YRBUQM+CambriaMath /UCAAAA+CambriaMath findfont ct_VMDictPut/YRBUQM+CambriaMath*1 [33{/.notdef}rp /g1 /g2 /g3 220{/.notdef}rp]YRBUQM+CambriaMath nfYRBUQM+CambriaMath*1 [5.77062 0 0 -5.77062 0 0 ]msf305.912 146.851 mo(!)sh297.382 155.058 mo(")sh319.385 159.964 mo(#)sh338.442 159.901 mo
363.036 135.306 li
@
363.127 135.306 mo
387.743 159.922 li
@
365.371 159.76 mo
376.361 148.771 li
@
349.021 159.612 mo
368.518 140.115 li
@
355.112 153.259 mo
361.668 159.815 li
@
YRBUQM+CambriaMath*1 [5.77062 0 0 -5.77062 0 0 ]msf366.945 146.893 mo(!)sh353.96 159.964 mo(")sh375.301 154.963 mo(#)sh399.033 159.58 mo
423.628 134.986 li
@
423.719 134.986 mo
448.334 159.601 li
@
436.222 159.747 mo
442.389 153.58 li
@
409.613 159.612 mo
429.11 140.115 li
@
420.513 148.771 mo
431.452 159.71 li
@
YRBUQM+CambriaMath*1 [5.77062 0 0 -5.77062 0 0 ]msf427.481 146.835 mo(!)sh418.951 155.043 mo(#)sh440.954 159.948 mo(")sh332.955 140.436 mo
342.573 145.245 li
332.955 150.053 li
332.955 146.848 li
322.092 146.848 li
322.092 143.642 li
332.955 143.642 li
cp
f
395.79 140.436 mo
405.408 145.245 li
395.79 150.053 li
395.79 146.848 li
384.927 146.848 li
384.927 143.642 li
395.79 143.642 li
cp
f
.32059 lw
275.766 41.2131 mo
450.364 41.2131 li
@
275.766 85.4545 mo
450.364 85.4546 li
@
%ADOBeginSubsetFont: VCAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQL+ArialMT gcheck setglobal} if
1 476 7 <00020063ffe705dd05d4000e001b00001310002132041215140204232224
02371000333200113402262322006301880136cb0146abb4feb6bfcffeba
a8c8011dd7db011b79e991cefed702ca016d019dc2fea5dcdffea0b5c801
5abefef7fecf0134011bb3010b93fee5>YRBUQL+ArialMT AddT42Char 
1 1668 19 <00010085000002c6043e0011000033113315363633321707262322060706
151185a23e693f5b5e3e42423b5e141e0426a171483aa727473f6072fdd4
>YRBUQL+ArialMT AddT42Char 
1 1008 11 <00020046ffe803df05ba0011001d00002135062322262635341236333216
17113311011416333236353426232206033865c47fd5756ad48360962fb3
fd20ac7576a5a87b78a1869e8cfba39f01038a5141020efa460212cccac1
c6daccc4>YRBUQL+ArialMT AddT42Char 
YRBUQL+ArialMT /CharStrings get begin
/g7 7 def
/g19 19 def
/g11 11 def
end
YRBUQL+ArialMT /Encoding get
dup 48 /g7 put
dup 49 /g19 put
dup 50 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQL+ArialMT*1 [33{/.notdef}rp /g9 /g14 /g10 /g18 /g12 /g1 /g3 /g5 /g4 /g8 /g17 /g16 /g15 /g13 /g2 /g7 /g19 /g11 205{/.notdef}rp]YRBUQL+ArialMT nfYRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf283.146 119.569 mo(012%1-+.&')[5.12943 2.24408 3.52649 3.52649 2.24408 1.28235 3.52649 3.52649 1.60297 0 ]xsh1.28236 lw
278.812 111.836 mo
298.301 92.3472 li
@
298.368 92.3472 mo
317.874 111.853 li
@
295.483 111.766 mo
306.887 100.362 li
@
304.78 111.799 mo
311.408 105.171 li
@
285.544 105.171 mo
292.173 111.799 li
@
322.092 111.836 mo
341.581 92.3472 li
@
341.648 92.3472 mo
361.154 111.853 li
@
348.059 112.12 mo
354.688 105.491 li
@
328.824 105.491 mo
335.452 112.12 li
@
YRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf326.287 119.58 mo(012%1-+.&\))[5.12943 2.24408 3.52649 3.52649 2.24408 1.28235 3.52649 3.52649 1.60297 0 ]xsh332.992 100.683 mo
344.575 112.266 li
@
365.051 111.836 mo
384.54 92.3472 li
@
384.607 92.3472 mo
404.113 111.853 li
@
381.721 111.766 mo
393.125 100.362 li
@
371.783 105.171 mo
378.411 111.799 li
@
YRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf369.389 119.532 mo(012%1-+.&\()[5.12943 2.24408 3.52649 3.52649 2.24408 1.28235 3.52649 3.52649 1.60297 0 ]xsh388.774 105.171 mo
395.654 112.051 li
@
%ADOBeginSubsetFont: VCAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal YRBUQL+ArialMT gcheck setglobal} if
1 418 6 <0002001a0000041005ba000a000d00002111213501331133152311031101
0296fd84029d93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>YRBUQL+ArialMT AddT42Char 
YRBUQL+ArialMT /CharStrings get begin
/g6 6 def
end
YRBUQL+ArialMT /Encoding get
dup 51 /g6 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/YRBUQL+ArialMT*1 [33{/.notdef}rp /g9 /g14 /g10 /g18 /g12 /g1 /g3 /g5 /g4 /g8 /g17 /g16 /g15 /g13 /g2 /g7 /g19 /g11 /g6 204{/.notdef}rp]YRBUQL+ArialMT nfYRBUQL+ArialMT*1 [6.4118 0 0 -6.4118 0 0 ]msf411.293 119.518 mo(012%1-+.&3)[5.12943 2.24408 3.52649 3.52649 2.24408 1.28235 3.52649 3.52649 1.60297 0 ]xsh408.651 111.836 mo
428.14 92.3472 li
@
428.207 92.3472 mo
447.713 111.853 li
@
419.551 100.683 mo
430.913 112.045 li
@
419.23 111.841 mo
424.939 106.133 li
@
436.222 111.841 mo
441.93 106.133 li
@
.32059 lw
275.766 128.414 mo
450.364 128.414 li
@
.64118 lw
334.915 1.62024 mo
392.621 1.62024 li
392.621 38.4881 li
334.915 38.4881 li
cp
.38294 .310368 .315282 .00225834 cmyk
@
grestore
%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B74383EF980222A6B5E458AA3D6B433D9D5D3C23E2026B269887927B3DF12955B37A4877214D068FD3C2E5841CCCB4F446BFDB874487058C31D1724E4656920FAD5D552FDF1DCF11E462BE0C50EDA119ACB5BBAE5A80C48C80CE43B1E11AB874B2CB3CF1346235562729371E56E3> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 99 /c putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 23{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c 156{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf357.952 172.839 mo(\(c\))[3.29318 3.76349 0 ]xsh%ADOBeginSubsetFont: JAAAAA+CMB10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /JAAAAA+CMB10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMB10.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 70 /F putdef/FontBBox {-62 -250 1011 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 0 444 453 655 676 686 697] def/OtherBlues [-201 -194] def/BlueScale 0.04379 def/StdHW [47] def/StdVW [108] def/StemSnapH [40 47] def/StemSnapV [108 142] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/F <1C60D8A8C9B66621C3D36726E8ABEB5EDBA786D8663C15A7B0528F4BFEF62FAE3D9775AEFA9D8C6C57527DE00C209507A119889357CEA21EE614F228EFDCAD7CD2E294F2D171A23B13AA8C0D91E5ADE4909376ECB67D8520963FFA15802E632E31CBBFE4D033B84802C38E643EF2A58AD188CA7EED8F7DBE611CE305256E244EAD8895B8FF86> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQN+CMB10 /JAAAAA+CMB10 findfont ct_VMDictPut/YRBUQN+CMB10*1 [70{/.notdef}rp /F 185{/.notdef}rp]YRBUQN+CMB10 nfYRBUQN+CMB10*1 [7.9701 0 0 -7.9701 0 0 ]msf-.544037 191.768 mo(F)sh%ADOBeginSubsetFont: KAAAAA+CMCSC10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /KAAAAA+CMCSC10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMCSC10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 69 /E putdup 71 /G putdup 73 /I putdup 82 /R putdup 85 /U putdef/FontBBox {14 -250 1077 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 514 528 666 677 683 705] def/BlueScale 0.04379 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/StemSnapV [72 89] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings6 dict dup begin/E <1C60D8A8C9B6184AC77504634ED277E54BC62EA0AE080AB2C4C1246D78662038448C351BD6DC55B0B252FB32FBD0FF3EF8CEBFAAA6BCEB614A26E1F26FD486885FCD6E95B31D0613B46B88B9E0433F97166F0F4CFF96C2D565F2B7F0580A2D26978918F3FDB025F6C63BEFA2CD12C42ADB4AE86218158E1750DE91A8F9AA02F416C4> |-/G <1C60D8A8C9B686F750F3796B1A183BD136482689B886760779B4D9CB8ACD1797667CC1B92B9189180D161424B9FF26F3288DFF8B5B9EDDF001DF226012FA575ED8A4D0BF419F23849789A973A711BC53726F18F9CD92D13020B3E97ADDB0A6CCC7ED3DD87EBD22D9B4D62FF6C59D8CF34A5EC2618004DD23FF824E38D816F5D718D615A117BFA48A480AB57A4B5ED90F0B6901A263E16D016A15D80F5AC10A12803B591699F61A5E0E7F16C6070D4BCB985B81A8FBD75DFA73C19AE31A5F9078EA0FC4> |-/I <1C60D8A8C9B7065364184C355AAB9A4C4BA59BF980474E590ADA31D4C17A8B6782A18A0F80AAB7DA58A657E32705CF706BB9DAC4EFC379B6A95183FE14B7902F25FC2EA6CB9F693EFDE76D7B920639DF9378A55DCB3F190E05821C182845E3B121E8B6EFB3D5C3D5AE9FA5A43F714A733977D43E7F982139A875D63E65BCB6FFD9ADF9DB4821B7C66AF589C776B081760A> |-/R <1C60D8A8C9B6D5A0D101B9F80CA3B6BBE38DC7FAB3F1622FAD85F5909818A715D3908560F5E7CCA5861B29AB0B664BDCCEF8C7EEC1F06FBAA06B9605BDE42A897156B999BB2AA7821CDF8AC90BA3710E5DC2AC47C5D3CE61864183568B0552770896857E45DFC9ADF260FDBE504C0ED2E3E7E308E64CADDDDDF29022532BBDC3A66632FBCD2C6904F5DBCAB01CC855B169E0086A276854936D9AEBB0A2EAD89B4CF933C606FE14686F1519296AA278E5EC397FC187CA6BCBAF880B186BC0E83A3CB985AFD0045945FF96696ECD59971C651A219AF259F7536A6A97913A7EDCBF6568C6AB7DE11DC9AB7D351AF94D9375456B1731C6CEE10F6A3D97603FF128C933D65730B93EF77249F6C4AF0116DA> |-/U <1C60D8A8C9B6A0FCAEF91917C6365E1EE48618494DCDABE21988810038B32505245E90740421C1C850CC32B5AD8512888C092BC58A9A1BEFE7B41FD2FDDDD105E1DD891C0CF6E8E869FC4193BA051C3A743D20788A820C7B1A09397618056DB4CFBB1E14A402DC2C0B192EC9E8EF96744C2D666790FD4A379A9C4FAB726EE38F66DC47354048EF44B637788B0A8894B69BCF40DE17B431136E30F6841BDB09CE36DCE5EDE40942EFBE76BC31A0C1F7DAADDB80DFD608> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQO+CMCSC10 /KAAAAA+CMCSC10 findfont ct_VMDictPut/YRBUQO+CMCSC10*1 [69{/.notdef}rp /E /.notdef /G /.notdef /I 8{/.notdef}rp /R 2{/.notdef}rp /U 170{/.notdef}rp]YRBUQO+CMCSC10 nfYRBUQO+CMCSC10*1 [7.9701 0 0 -7.9701 0 0 ]msf4.45996 191.768 mo(IGURE)[3.23262 6.78571 6.48689 6.3761 0 ]xsh%ADOBeginSubsetFont: JAAAAA+CMB10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQN+CMB10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8574464AC22750EB81234EE9B80BF7783FF03EF3FC51337A3B1BC74AE196A780F1BCD9E6E> |-/one <1C60D8A8C9B7A73DC569D0E36B8BB95E778908F80261B06F82CC2C727FF0DB27A12FC9F5181280C632995D0B5AF8C232A22C93A2A9295DB805BA2513DE20ACAB9038B11D60708097633ECDB8A268CEB29876C474B7EA75C7C4C713BE468652C996245E95A739C42D1A> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQN+CMB10 /Encoding getdup 46 /period putdup 49 /one putpop%ADOEndSubsetFont
/YRBUQN+CMB10*1 [46{/.notdef}rp /period 2{/.notdef}rp /one 20{/.notdef}rp /F 185{/.notdef}rp]YRBUQN+CMB10 nfYRBUQN+CMB10*1 [7.9701 0 0 -7.9701 0 0 ]msf36.107 191.768 mo(1.)[3.98505 0 ]xsh%ADOBeginSubsetFont: MBAAAA+CMBX8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MBAAAA+CMBX8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMBX8.) def/Weight (Bold) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 68 /D putdup 97 /a putdup 98 /b putdup 100 /d putdup 101 /e putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 111 /o putdup 114 /r putdup 116 /t putdup 117 /u putdef/FontBBox {-59 -250 1235 750} defendsystemdict begindup /Private14 dict dup begin/|- {def} def/| {put} def/BlueValues [-14 0 444 455 658 676 686 700] def/OtherBlues [-202 -194] def/BlueScale 0.04379 def/StdHW [52] def/StdVW [122] def/StemSnapH [42 52] def/StemSnapV [122 149] def/ForceBold true def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings15 dict dup begin/hyphen <1C60D8A8C9B703FF26838FAE09385C8BCB2D333C954A5F4E5690339EBCF5> |-/D <1C60D8A8C9B5AF62F63164358CE822EEC4D8B0858C454F0B490113C1113E5989BBD57B0AE35726581ADDB4750A4C59020AB54C4FCDECA11145BE42215291F48509ACE372AF14246F488F990F60B7D59E690F7E581A9883C37A6EE22A> |-/a <1C60D8A8C9B7C8C12E3DF013D24CDF912081A191021CCF12816A2D103464129685136AF2DF3B6D5307E0CEDDBA965C8615E4FB260D7F9CB70732BF816A7925AF0A2DA3C514B01AF27FF83EC28899FFCDF478BF65FB436C772D85D4AA6BA827D413B0E9D3646F5BC2C4CB3F2F22EBF09FFE7C08368C888DC177ADCBF24CAD1AF22FF5720224DBCFA35EBD2A2A8148F9740EA2E8> |-/b <1C60D8A8C9B65DE707A99E85AC741D8E8C559E5C52B169E9D854691126D368C7B512D4586857D103705D4BED85F95E35385BBF11C4DE5BC8338D41864DA326AE552E82F189E079F512D5F1AA01BBF54A37EC2BE7CD2B6E18A0102660C6C571194A7053E5E520E82A80A8953DFC52D2DD06ADB5> |-/d <1C60D8A8C9B65DE707A99E85AC741D8E8C559E1FD1F8C798F97647323C74C78793D5CC76EFDEADAA72F02AAE63D6F2DC01E301701346FD97BAB6FF7117BDB49078A28CFB8865544FF59BFF1617460EB160EFB8427E2D214721778F9AAB894D28063D82D67E58387CA946216B26464DC947194A4C787438979E706D> |-/e <1C60D8A8C9B7EA3AC8E895341DE75FF94A9DCA32A4C9EAE6C87638F82AD158736030220BE4006001CBBE774DBF151945E144E9B565452A1E16CDD4769399C0462D5D3F18127E1390A31AA82E0B6D54D7426E5EC54E378FF8FE9F12C7CF32717BC94A413A983E44EE80159C70A2AEB9DBABCA124622A1780C17729032> |-/h <1C60D8A8C9B65DE708557FE81BFC0DF6675596C421EA9FDE871154C4A6BE2EF1CBB1B124FA93C1D0BE8BBC83FACB400694F05911C8BDBFD7BB8FCD527C80C3FF105F6746691C0521F06E1A78477A68A2552FCBAA3C491333BCAE997F8F7E5117668460F8DC98F69A700281E066CE89A229EF9FB9A56095AFEE458D71A18BA699D8FC69DCB95F0E8A29E6AC054AA30F3EB9F9E22CD62368E00794F9BE35E8C379E0E5AF63B6EE7AB99398C0561DBA256DAB> |-/i <1C60D8A8C9B816D2B111F13F533D208859E29FD7DCE3C86A54945739B77A0A12289B05E09505E68A1259350D5E92679F5155EE112CC7A5DDC910E91F44519F2405F2263BA61B673A8E7B1E2E5D5A101184B9B05760D2B61D846B7F2730F406B42E321EBDC59D89E87E3C2C1A78CE7F2CB9D153E5378F> |-/l <1C60D8A8C9B816D2B111F13E743CFF0CC36905AEDE148A0844A60E863F707CEAF1FFB777932D8C011889C1F9618213E39C6DC9F16EDA7381B8B82F04D2B4CF26F0975EB1122177504758F23084C938B75DF56DF28287BCAB> |-/m <1C60D8A8C9B502E2AC1F4C4F538D2E3815D0A39CC0F97E4C0BEB768CB562A4B3127624898CE02252EBDEC78BF2EEFCB50830A14976871EBE43343DCF8BAE9C682FFBD9D8EC7463E7F06AFD668A92D4475BB7CBC4CC802BF2FB3F7900A57202C945478909AB6D3AB71D199DFA8734625372730096394DA893472200A399937D14ED7C451912AD57448C54BC4B75B36ACBB2EC3C1D47AB3B06F61598F232322F858C1223BEE70E4D876EF3B0C989545C1A202FE366F67EC7F99631867BA5DDE1CE2C1F8AB6F4A98DEE9003AB08F0C8442A4937E4309F2C0398AFD5210C783A07FAFBB11C047EC7A439FF5E206FCCD5B5F0DD8FA7DA326AED1852E33EE2A731F00E46> |-/o <1C60D8A8C9B7D7E8A0392DA521BC842BCE1A406E939F0BA891994683857F29BCE7C07A93C571E84B66E5FF4C8509FE9F8335EC255DF8E4744D4A16B5701C79EA7E6CEC3E257F32DA5F02AB93A88B0962B678BB205356958785F229> |-/r <1C60D8A8C9B7A1572D3B3A64544AF7D5F2D5C566FA1AAB215E4F9DA1EB24E0FB42F6631BFF5A9D22C0BAB4CECE27A34700628D994F178580C415654A9D141DB4A259EBE44F14B88CAE8FD13A27A1DADEDCDED3A8D63FD38681AFE6CA0441814BC0D417CEBC8D25D2F3D401A87E7EDD721CD77D05C53398BA28D5333379B750A456B9AD4BEA23A293> |-/t <1C60D8A8C9B75F2F12425912D4B28ECAF1DC0C2902E7303F8847C2E68256538B48632E60AB877A11D963A612F0251665B3AE08E21A3D9534600164E4A5E7643D9A42436C2576F1A132070FB1462926653267C0854BF88143> |-/u <1C60D8A8C9B65DE707A99E859AFA4FA1DAC0EB88D024B97335F543DAC7DF34EB9022CC8C2C9E4FA536FD1D09811FEA77B317DAA7A41DDA79EB77991EA951B02F6B827E36F36D2A55A7E9D7008AB6DBAA403EFC541139AC569E3888DA4AED8642F023> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQP+CMBX8 /MBAAAA+CMBX8 findfont ct_VMDictPut/YRBUQP+CMBX8*1 [45{/.notdef}rp /hyphen 22{/.notdef}rp /D 28{/.notdef}rp /a /b /.notdef /d /e 2{/.notdef}rp /h /i 2{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r /.notdef /t /u 138{/.notdef}rp]YRBUQP+CMBX8 nfYRBUQP+CMBX8*1 [7.9701 0 0 -7.9701 0 0 ]msf55.107 191.768 mo(Dual-birthmodel)[7.47197 5.42447 4.74623 2.71225 3.25415 5.42447 2.71223 4.03528 3.79691 8.92336 8.13586 5.15268 5.42447 4.472 0 ]xsh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B80898F3D3B620DE269D78A71890A6A5D42D0F4711153258DD> |-/period <1C60D8A8C9B845C808722EC4BC14AFF8AE2E7B77E6E7C9BED6C8454E4CF0B0ACAAF01739DBE1B2A56ED6> |-/four <1C60D8A8C9B7883C47E9695598D0AF3A7007C55B549EB9B3F3F46104652844342745D2B91FB2D0F00634244F88463533B1B57C29F84779340190813A1C1D067290CD1A5A15C3546B4439E2525D45177EB37490815EF6B6C58818E7C9CDA495E2BF3E7B45D1B291D529E999804ECD42D22A6077E492DD51C0EA4F3AC647B0CA8614C7> |-/semicolon <1C60D8A8C9B845C87883D105C3F24E2FD5A64BE11D289883708A77DD60848209968D979F644FE74F60650645F55E401A79A1AA499E951318D973E1DC46089B9ABBF242A414D56B34317BFC8A78319170D9AF8186FA8368D34F8C4EF078B2A863EA446037E959029F> |-/d <1C60D8A8C9B7CDD8B4397BC5D546373275BA90C4515798C9B3E3AE6AF3554AD2E418A7032490B6B98BE88035378F8D560CD03D4F698A84C210943595D27237173958355F95C86EE3859E71BFE20F9E0CC27C2DCDC86416AAC1ADEF3B85620DD70EBE8D07A49BDEA5000ACFCA59569F53CAE891AEB1079327F3C14A6BA93841F6312DB6077AE59F6C3D1D44E629B7> |-/e <1C60D8A8C9B74383EF980222186AC412A37061F7DA1A075A58C4EB92AF05251C4F544837EE77DF2FD3FD46B59FD3554B7172B19B99F4BBA7EB9A3F6A9B54C1050351BB54E475583D5D0877A11CCAC1C029E4402750715303229C0A8A7556406100EEAD8CA3E3685225736E4C7D6700DD8B4CFDDA19A31D> |-/g <1C60D8A8C9B7883C373F05ABE9DC810D0BC598FCE8477BFB3E028A776983DDADA517DD6E567B973DBF8B5799DC5BD64E6237B3589C95C27EF745FEFB57D008F7C5090EEF0F3F3FBA635A9C0C42F6226DF6B3249B6DADD1F5B059CCA451EE66A6CE92415EE2896D39D74A28D516AAB4934312777BE9858CD83E9072359F945C16AFAC62BA6BCDFDB283002A341FFBE1A0406A26CB90452A29AAFA540BBB6E1A194722AA7FD386841A84F73718C11EA66F8F217B5043157E2D8296B17C3D6536F64D3C06365B12AB13BE5273A730B8CBB79ECC09A66AC2EDADC2EED71F88E575E091E2A220FAE924775CF57D6C9538CFDBF64F3846> |-/h <1C60D8A8C9B7CDD8BE0229A9F7DBF0CCAE754B865B43F223DF733D11888419AC6AF60FFBD0D1CA633FE1FE2C6E1F64DDF217BE68448AE4474BFFE2D08589EBD1FCBCAE1335A3FEDD67F9E622D0FD888A8B09AE8FC7005E7EF7700206D1E054393C2C65BBBF83352EF87A969BBA10BA81D938F63206F49A1F21D525B7FB0F2CB58A4724384AE97212E8B7D8D76836611DED5BE4702DD6039379B0437C3C137D5AC9C0BC8475A5E2634B783F90F5C2F5B426852C901B080E58E24CEE> |-/i <1C60D8A8C9B845C80829510E46B066D617592C2752F4719A972C90DEABB522FDEAA3EF457E51B858973B4D0B0FBB25EFBEF1DBC7CB2D0C715C3BAB84315A0C25E75381301FF942ED170560D3DC9F01113C33FA4E643697198914D9405D4567A946F198597C5B4B842DDE84CF67B10114310ED3022D924089FBA3B4> |-/l <1C60D8A8C9B845C80829510F2B6BB6DDB6DBD81EACB6BC16C2545FA3EAD2BC6F384F7DBBF19F0060CFA1157B24C1E5ABD97E4D5EF2C31AE2D7E682D087F247A450CCBCD70D5B46AF891DDA7EAE02F47171CED31962EAE834F0D1C6F815> |-/m <1C60D8A8C9B59B43992944ED490C19A15D8735441315F95002383D7FB55CBE87771592826C484758BB609F7DA8BB17A0AD5F34356927AD6AEFDB58A28643E71533CEC1200C271AF80201C51CB23AC4E21EC48E2905B47AF54251BE0EFD9D868C76E0679EE191CAA0999955AAF990983016435DE0E01D02AE248F5D5EDBD10DD3A3DEA4A2800D6A621A3BA50BF1580431497240FD20A31D470DC52CCDE58A4C6324A0F849B194B7185D6A197C82E6492E54FB3F79F4634E1835DA3CE502B62DDEE63B11A0797EF3C321B60CE1648C96026DA5BFFF88D8ED804E6814DE911E94BA75231DCC793D2DCF52A70D33A7C8617207C4D09DDCE6DFD800E0BF281FF22E0A5D8D71AED2E5D1BC45CEA583B1> |-/n <1C60D8A8C9B7CDD8BE0229A9F7DBF0C2A966CCBCFEB550A2AF7F67D4E5F22C43CC99744433C65943913F08908A73A43E3699889519171A2ACB6AB5A398468C17752140CC9610F45893A0D08573FBCB4ED93DBC4C35D46EFF4E1EF29C50FC850B2878743220735A5072AEDECF0B09D1F747A6DB4C08F5487D5E36F63AD5E121B5BD9D0867360CC0C002915A82939C5634567A88B45A0A07465D31C12E7A045B18EF8C0A0C7534C2C5497DDF33440E5FB7BB302E727236> |-/o <1C60D8A8C9B7883C4DB1DE675E90B0F4A835049649F018A5DADA634F86DAA57613197E8B0F6DFD79D88111B056183A6CE9D391DA36227DE230C1DF352E21FDE409CC70F4EB326556A563408237CB833F03E9966A04A8D110B55C62A7F326000C9DD21BF98FF3E2C03CBBC5CD920F53BF93E47BF0870557EEFA> |-/p <1C60D8A8C9B7CDD8CEC3C3B22188F9EF41126D2D281C4C44EC2AF1EF95B90DBC18E5253908081A36F13D5070BDA9E68BC0AF8DC2943C2259ECB48C2E73152791A1921AE51B16FDD8412C2AE03FC791018BA479F481B152109E921299C23EA248AC46A552FE79E0C01C0A43440A1C23690B84B6E65F06457A853888879000EDD0895C00385A9914B6943436988A9D040D195F81AF07D80426B5C66F3EAF2184E92805D4F984733F31F176AD89> |-/r <1C60D8A8C9B71DE7AEBBE327700164145A7987C663F5708624971209183C1AA5AE7985618809D8530182A6954B7D298F8533949148FD10D074ECCBB0E4BD9237A4CB4A90465D136A5C2F39F0FDE2A674B4B320C16AA9A48F8E602F9DC5BA66848AB29267CC1A9D2762085785E6610E9CC9E8C5B6B4186371F402E776D132214C560E0505324D5C14EECA9A5B> |-/s <1C60D8A8C9B718ECA8B2B4494EBC135E9E4A103528B9D0F29E3F5C6DD8113435432E5CEDD6A5D462314B4DBA1AA18956DB12B8904A6ABB953CF320952D9AA3DDB593C49DE1A3F9893AD9ED261E356F88258E00F78B9C23A635CA77B4C5F025261DE2F4614C61D058962F2264807C6FEB557C9F99BD9D0617C02B54EED21661E53BA6D1C6F72DD9C7FBA243D1B5E3D68C15C10E45BD1407AC69524E17EE9636B012B64F16CEA682484F1AF5D3F344113D9A9E569744F8A6BB0CBE1D3D74BDA6B7B95E9E> |-/t <1C60D8A8C9B71EB5EE6C6DCE30F4A15DE0491CF726FD0973E0358E88609FF52B82D96726F88858573641C46778AB6CB1A69C1546570740CE361A0F5F2EBA90B678DCA87F0E4369608991A4A17842AD893F8D2E664B681D02> |-/u <1C60D8A8C9B7CDD8B4397BC5C54C67A59D54BF3E30C4F705D24054AF402519E3BE071AD7D52923E6CC431686D26A514C0341C8057C4D1AF43DBC925E2B88457377B8C53FDB1A63A50921FCB8EC4ECDCCCC14530F53D8C66EEDB79E4CC12CD217E5B4> |-/w <1C60D8A8C9B6F21D01646DC0414B82B4BEFC9DE695ABBB53C2A79E96C8525DBC55D37415CFB76275C3DF257D310FA16F508F72CB1B0DBCF21B27F8B7EB04C141611FBE8962D24C82958B164E32306E1A0AC5D96F184273A90FB5A1B68A3157D1D6DA84AD57CAB6EB3C5F2ED8EFA7C0A92589B982B65F636E4CF5A8F4324AF3D2819E488C9CE5F8696211FFF02CFCCAF69FA51F2675DAD64A48C21C81CE2F8CD1A36704997CBD2C2C90F7C7B28FBDFE131ACBBC13CC9A2521E4113E32661255DCA09F0A24BC8BA4E0E32685EC8A81572A8D87500B6C12118E2B7A825A011C835348FE53B57589F410D621A67E1522EC2721318DF0F15D03CD67DF47C423336917B34FCA6D8E3FAF6C24F1> |-/y <1C60D8A8C9B7EB086EB4A789EEF7D65C5CF25537E4A831871A743460E474E839B62979D960D0DF8D729402C0E9BC892041C72E405B3EDE1777E8AFB67B013BB74725BE41A822DD85607ADA97C255A983F1B95284EA854C329E502B1D6679A76C3656E234B70A3A17897BD8BC323FBF134D890F4AD38CC7F0D228A4F52FAA4B868CF780EF272005AAE015E30578F05476316C7691B97903C54058CA0C4045FB7EE856D968B30655F7AFA9D2A3FB08216AF66E9AAE5BE0512C0305E6C03ADE6BF70E2DA877344FC094CF43384BFF82F7> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 45 /hyphen putdup 46 /period putdup 52 /four putdup 59 /semicolon putdup 100 /d putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 108 /l putdup 109 /m putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdup 121 /y putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 5{/.notdef}rp /four 6{/.notdef}rp /semicolon 5{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O 3{/.notdef}rp /S /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf129.504 191.768 mo(.\(a\)Acaterpillartreewithonecherry\(node4\).Thetreeisgeneratedbythedual-birthmodel;)[5.38863 3.29318 4.23448 6.32184 9.37927 3.76346 4.23447 3.29318 3.76349 3.30035 4.70477 2.35202 2.35202 2.35199 4.2345 6.33698 3.29318 3.30035 3.76349 6.80008 6.11621 2.35202 3.29318 7.7334 4.2345 4.70474 6.80008 3.52435 4.70477 3.76349 3.30035 3.30035 7.50629 3.29321 4.70477 4.47357 4.70477 6.79208 4.23447 3.29321 5.38861 6.11621 4.70477 6.80008 3.29318 3.30035 3.76349 6.79211 2.35999 6.36887 4.23447 3.76349 4.70477 3.76343 3.30038 4.23447 3.29321 3.76346 7.74136 4.46564 7.50635 3.29321 4.70471 6.80005 4.70483 4.70471 4.2345 2.35205 2.823 4.70477 2.35199 3.30042 3.29315 7.7334 7.05682 4.47351 4.70483 3.76343 2.35205 0 ]xsh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B6079F1E7AD77AA67D44F3F30D1874470AD24626CBB9185E9AE80DD8EC236027AA109A084EBF151213FEC296B54202925C1939F5ED97D7DAB790EA3A165B26F3B22E4F65079454B26EAFDDED1B76AD69FE73013BA7D3414A27C20BB8FA83A0499CC71FD6CC008564854F5F23616F8B939C01321AB350CA31765DD978DEC56139F34C59641CE872520B58735DCB005BA3C1A9> |-/f <1C60D8A8C9B826CBB7BBEADA7EFAF4C7CFE0713C33BBCE2C7F4CEB07D4119C52C6107FFE630FA96457A3C154C3C9AD89170452ABED2B70BBC8BA234393C5B0080F370EDF8D47B04EEFFEFD66DDDB5B3C7A82468D3451E8E8EA56D47C39C8995A2CBE65FA6419B666CF4D995BB404532900AF302F9AFD65D101A8D8B47820DE23FD1297D1A014200C02D890C049C86D68CC8FB9E2F77E82> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 80 /P putdup 102 /f putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 5{/.notdef}rp /four 6{/.notdef}rp /semicolon 5{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-11.966 200.735 mo(rightbranches\(dashedlightgray\)aresampledfromthePoissonprocesswithrate)[3.30036 2.35202 4.23447 4.46566 6.28995 4.70477 3.30035 4.23448 4.70476 3.52437 4.70476 3.76347 6.33701 3.2932 4.70476 4.23448 3.34024 4.70477 3.76346 7.70154 2.35202 2.35201 4.23448 4.46567 6.28995 4.23447 3.30037 3.99538 4.4697 6.28993 4.23448 3.30035 6.75226 3.34026 4.23448 7.05676 4.70477 2.35202 3.76346 7.70154 2.58795 3.30035 4.23447 10.0456 3.29321 4.70474 6.76022 5.52005 4.23447 2.35205 3.34021 3.34027 4.2345 7.70151 4.70474 3.30035 4.46564 3.76346 3.76349 3.34024 6.33701 6.11621 2.35202 3.29318 7.70151 3.30038 4.23447 3.29318 0 ]xsh%ADOBeginSubsetFont: ZAAAAA+CMMI8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ZAAAAA+CMMI8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI8.) def/Weight (Medium) def/ItalicAngle -14.04 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 21 /lambda putdef/FontBBox {-24 -250 1110 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.04379 def/StdHW [32] def/StdVW [78] def/StemSnapH [28 32] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/lambda <1C60D8A8C9B7D04D90D6E236568011900BAD2F20399369CB7C98C4A9191CFD78A6CB7CD53128F591433E34EED11BA6F599A3D7F66AB9CF17F494B90F1F1380D9FDF7CA9EC1333F11D2F214244761CF011F33EB2B4B73786AEAB1A1D1FD4F95820C76A92056B6CA65C36E10A9BF25DB6561BD9BC806C5> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQQ+CMMI8 /ZAAAAA+CMMI8 findfont ct_VMDictPut/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 234{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf297.488 200.735 mo(\025)sh%ADOBeginSubsetFont: NBAAAA+CMMI6 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /NBAAAA+CMMI6 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI6.) def/Weight (Medium) def/ItalicAngle -14.04 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 98 /b putdef/FontBBox {11 -250 1241 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 431 441 452 463 683 704] def/OtherBlues [-204 -194] def/BlueScale 0.04379 def/StdHW [35] def/StdVW [85] def/StemSnapH [35 39] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/b <1C60D8A8C9B7981581E40C72AF8FADEF4FFD72C5A46C2FA6875379B9D7A14620F8F0F4CA8699D232B5BD11E65B1EF30FDC19099B5EFBE5EC533D30445167748D940849E5119046D2C8E8312D61BB487F9C374F537DB897934217036A0FFBAA82879FE07126FC99557C86CFFF13EA4DFDAE73BB14D37B59B731D819E5600D0B66DBA3BF6BAB67974EEEAD2C5EC56B4D86BC7414B4FB1F1EC3ABAE51A89EE3144A79756420F2E44AABA597BF7602> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQR+CMMI6 /NBAAAA+CMMI6 findfont ct_VMDictPut/YRBUQR+CMMI6*1 [98{/.notdef}rp /b 157{/.notdef}rp]YRBUQR+CMMI6 nfYRBUQR+CMMI6*1 [5.9776 0 0 -5.9776 0 0 ]msf302.428 202.141 mo(b)sh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B845C87883D105C3F24E2FD53DB6D616962DA6D0C4A6D7304DBF45F56C78C81D2EE50FF2DDE45F1C04302817F5C526DAC136A897C61D169A73FA87E65EB2F5EF73E1F878> |-/k <1C60D8A8C9B7EB081EFE6AFB11A2C967A0CC0F6D11FCEA577E07A23BCC2C7AFAA23FF9210DC2852003EDFBE5D63CAFFD3E526C36B82F1DFEAFED80EFF61815F8A309758B9FEB6CFBD5128B17302F8BCE32D80310D7F9FD263FA9D7214CECAC22D5B463C8810DACA768418399D2B715891E65E67E4BD11043BF5C372DCE4B807A0B51E9672616A774F715CA9A26A8586430EA1DDE6F128983EDDF84E9286F41655A61347250F84410CB6820D371EA70010EF4CC6978E13F5991C317F2AFD03563DAEA8AC64C4CAB63FE60AFB0A8DC10A81FCECE907E55DED56117F3ECE5B79ADF0C3EAA064F03485CE3897BE0DE65D68C80B29842126CDE3BD8> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 44 /comma putdup 107 /k putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 5{/.notdef}rp /four 6{/.notdef}rp /semicolon 5{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf306.2 200.735 mo(,andleftbranches\(soliddarkgray\)aresampled)[5.34879 4.23447 4.70477 7.69354 2.35202 3.76346 2.58795 6.28995 4.70477 3.30035 4.23447 4.70477 3.52435 4.70477 3.76346 6.33704 3.29318 3.34024 4.2345 2.35199 2.35205 7.69354 4.70477 4.23444 3.30035 7.46649 4.23444 3.30042 3.99536 4.46967 6.28998 4.23444 3.30035 6.75226 3.34027 4.2345 7.05676 4.70477 2.35199 3.76349 0 ]xshYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-11.966 209.701 mo(withrate)[6.11621 2.35202 3.29319 7.70152 3.30036 4.23449 3.29318 0 ]xshYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf25.089 209.701 mo(\025)sh%ADOBeginSubsetFont: NBAAAA+CMMI6 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQR+CMMI6 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/a <1C60D8A8C9B657194872A6C5DA8CA586896B0A9AE5E8EB0354D195434DE6B3E83F829F02AB1D2808FE24616C34308CF3C5BD930EC76998BED7ADDF40C1685930BEAC2EF2683F449CF14223BA4BA92BDC6695D7886920BFCD39A625164FFEBE7C6E88681F8293CEA113243887ECBE9E5DE7E4C21305F61FB74A70EB88EBA5C57634A6F5C7D8AAB2FD07996FD3A7558FDE5C0AD5BCA12D1DB38E19A226AE211F0DA6F48F3CABEB58EC8889> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQR+CMMI6 /Encoding getdup 97 /a putpop%ADOEndSubsetFont
/YRBUQR+CMMI6*1 [97{/.notdef}rp /a /b 157{/.notdef}rp]YRBUQR+CMMI6 nfYRBUQR+CMMI6*1 [5.9776 0 0 -5.9776 0 0 ]msf30.029 210.697 mo(a)sh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/v <1C60D8A8C9B7EB0814E2CE9AAC218DAEF2E8826CC8F0E51AF5C67E02936B196C9DBEA75FDEF071DC733934BD7949AC2CD3B31A852B3CF30C5EAF6B22A1E9966AFDA65C0DA94E21343EFAA3D6DE44CC8195847337D197CA8EA856C9543148AC85FB6DAAE5E3E072D933E09DF47DACE750B2A32BDD6E4E14310005D367A4AC8C03D9D665E194CCB88DAF1D68F90FEBC6A747AD97F7358A336594D88EDB1B31A46FDC975C730D36A227DE186D2D40CFA49F21> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 118 /v putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 5{/.notdef}rp /four 6{/.notdef}rp /semicolon 5{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 4{/.notdef}rp /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf34.561 209.701 mo(.Internalnodesarerankedbydistancetotheroot\(ranksshownbelownodes\),andthetreeisdividedintotimeintervals)[5.34877 3.05733 4.46565 3.2932 3.76346 3.30037 4.70476 4.23448 5.34877 4.70477 4.47359 4.70476 3.76347 6.33701 4.23447 3.30037 6.76024 3.30035 4.23448 4.70476 4.23856 3.76346 7.70154 4.46567 7.4744 4.70474 2.35202 3.34027 3.29318 4.2345 4.70477 3.76343 6.76025 3.29315 7.23126 3.29318 4.70474 6.76025 3.30035 4.47357 4.2345 6.28992 3.29321 3.30035 4.2345 4.70474 4.4697 6.33698 3.34027 4.70477 4.00336 6.11621 7.70151 4.93588 3.76349 2.35202 4.00333 9.11298 4.70477 4.47357 4.69678 3.77148 3.34021 3.29321 5.34875 4.2345 4.70477 7.70148 3.29321 4.70477 6.76019 3.29321 3.30035 3.76349 6.76819 2.35199 6.33704 4.70471 2.35205 4.46967 2.35205 4.70471 3.76349 7.70154 2.35199 4.47363 3.29321 7.2312 3.29321 2.35199 7.05676 6.76025 2.35199 4.47363 3.29321 3.76349 3.30035 3.99945 4.2345 2.35199 0 ]xsh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/W <1C60D8A8C9B545FB9BF39DC010AACFDDCFC6D21D9E0A791F2E6F99E54613C45D20AFC3AF93CB8DFAA64C28E807756BBC7E72DF51BD8BA6A3D5194E5D93D6CA4935CF9F529743900C228C04FAFBCCAC19E0484826592A305166CEC29D51C7DB072E99966AC8AA775E71D39627FF6BB05284B55FE148AA3DE2525DD94E1CF3CA5A476E9FB9CBC6E960B57B6A19D39864980F787E9378D50DD7E84D6F166F3F3CC69A48BBC88280FF38ABA421F97CB92CCCFF95214E25C4AF5BB32CC54552C625356A89026A09CD34FB103BDA0056B83C994A25E3B6074CED2EA7091CC903449251DFAFB25C19A2EA6F205449FD1CC9022C7CDCB79BDC232BCDC67A2D96A23B9FD34AEF157731A2862BF55A2348559288048B1D1FB670CFECDD283554342D31> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 87 /W putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 5{/.notdef}rp /four 6{/.notdef}rp /semicolon 5{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-11.966 218.667 mo(betweenconsecutivenodes.\(b\)With)[4.9359 3.76347 3.06206 5.87711 3.76347 3.76347 7.9725 3.76346 4.23448 4.70476 3.34026 3.76347 3.76347 4.70476 3.29318 2.35999 4.23059 7.03122 4.70474 4.46562 4.70476 3.76347 3.34026 5.62773 3.29318 4.70476 6.56094 8.6954 2.35199 3.29321 0 ]xsh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/r <1C60D8A8C9B75CBB2AADD1FB054120522F9945A278F1641D057749298E592E90B6E80BF48A8F64C2042F081B070E797C7E4F49F9F2C4C6BF7F5BE2F20BEBDE192B562681D3E4238448F943B844317F8F4D0FB1C3FDDC65FFD4CF5656DAB81C96B664469944C3ABCB0C6702461F40F287BD7570E947A9990DBD1AEB36489F5B681A4F5C68A6B7DCE055AB79BD26D2FCB129D2334BF0ABA9E8A6991B9F917DDDDA994A66DFBCE5D95779248B15AB1EFEC4> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 114 /r putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 92{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf129.839 218.667 mo(r)sh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/equal <1C60D8A8C9B6AF04192A4BB30DDD738252E20241690489A62629F3B344313DD3D5F1F837570FB3ACBDAD182696C7EA47D7904E4AA1692C85CD41F507B0C4FDE1117DD6F957380D576A13E4CC28E9DC> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 61 /equal putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 5{/.notdef}rp /four 6{/.notdef}rp /semicolon /.notdef /equal 3{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf134.836 218.667 mo(=)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf142.364 218.667 mo(\025)shYRBUQR+CMMI6*1 [5.9776 0 0 -5.9776 0 0 ]msf147.303 219.664 mo(a)sh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B7883C37D0390FA268C00AA6E97DC38CEE127D52926793076D8BD8C99F8C962F92C6BE23785C233A1AF987223E7CAAECD01BCB4653B763A7F816DCDFEEB26CDA48> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 61 /slash putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 39{/.notdef}rp /slash 52{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf151.836 218.667 mo(=\025)[4.23447 0 ]xshYRBUQR+CMMI6*1 [5.9776 0 0 -5.9776 0 0 ]msf161.01 220.073 mo(b)sh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7883CBAA78CA806F705F10D1AC319938D611C6D9BBD69F6190342FB8FEE9368658E53BCE0AE7824A3280DBA7A5BEF9C087CCC08CFF6EE3D1CDFAC58984B448A56F36AF08290137970E991F67C347622795CF41E8928BFB8E257576760A149EDA95EF674E027B6AB519EF80CF7C75785FE2FE5A8F75A3518927237EA043AA5EE9A8092D5C4A8721DCA0DF83E6E87BB> |-/one <1C60D8A8C9B7883C47E9695A643EC7CDC9D492AB150D29B838BCDE529851B4F36139BB3C5556B7F7E4934494C8CA669B61323ACA68A6240E429D123FC3286EBB7794C68A02175F48138D7512A6C24D04FF2F8E1915AEBF24AD4C9B5E652D787177BE307207126057745DD2D6A7D78294> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 48 /zero putdup 49 /one putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one 2{/.notdef}rp /four 6{/.notdef}rp /semicolon /.notdef /equal 3{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf165.723 218.667 mo(=0,onlycaterpillartreescanbegenerated;asrincreasestoward1,thetreebecomes)[7.52698 4.23447 5.61975 4.2345 4.70474 2.35202 7.73743 3.76349 4.23447 3.29318 3.76349 3.30035 4.70474 2.35202 2.35202 2.35202 4.2345 6.56808 3.29318 3.30035 3.76349 3.76346 6.608 3.76346 4.2345 7.9725 4.93588 7.03122 4.23447 3.76346 4.70477 3.76349 3.30035 4.23447 3.29318 3.76349 4.70474 5.61978 4.23447 6.608 6.56808 2.35202 4.70477 3.76346 3.30038 3.76343 4.2345 3.34027 3.76346 6.608 3.29315 4.00336 5.87714 4.23444 3.30042 7.97247 4.2345 5.61975 3.29321 4.70477 7.03119 3.29315 3.30042 3.76343 7.03125 4.94385 3.76343 3.76349 4.2345 7.05676 3.76349 0 ]xsh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/fi <1C60D8A8C9B7CDD8BE0229A9E486F097E3957B2E19B1D53561EFD270A7EC9110EE9740627E955BEB2956ECC2E26BBBAD8DF5B2B7A7D87802368F9CEC9F2B8CCF08C1B3C7CAA9272016D013CC234D6AF297BA123451B800C7D7A9A65D68134F75D9959639C35EF48C84979FA48816CDFD8523E8D8ABD3603901A662A36B7121874B8F66FA13B6A1830CCC235023156DF7607CF76655840BF4EC6C7BC7BF7E5FC96A58A06A6C7947A9EB73CF975E00631DC9AF24C1F36B89C892F089ECD54B8C97815104DD570D866998585BB11F475943570B8FCB799D4477F07BBB27F740746185EF850D6518ED8B> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 12 /fi putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [12{/.notdef}rp /fi 27{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one 2{/.notdef}rp /four 6{/.notdef}rp /semicolon /.notdef /equal 3{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-11.966 227.634 mo(morebalancedandthushasmorecherries\(dashedlightgray\).\(c\)Allthreepossibletreeshapeswith\014veleavesareshownontop;the)[7.05678 4.23448 3.30036 6.64864 4.70476 4.23448 2.35202 4.23448 4.70476 3.76347 3.76347 7.58197 4.23447 4.70477 7.58994 3.29318 4.47363 4.69678 6.22543 4.70476 4.23448 6.22542 7.05678 4.23448 3.30037 6.64864 3.52437 4.70476 3.76347 3.30035 3.30037 2.35201 3.76349 6.2254 3.29321 4.70474 4.23447 3.34027 4.70477 3.76346 7.58994 2.35199 2.35205 4.23447 4.46567 6.17834 4.2345 3.30035 3.99536 4.46967 3.29321 5.23718 3.29318 3.76346 6.17838 6.34268 2.35199 5.23718 3.29321 4.70474 3.29242 3.77142 6.64069 4.94385 4.23447 3.34027 3.34024 2.35202 4.70477 2.35199 6.64865 3.29318 3.30038 3.76346 6.64069 3.34024 4.70477 4.23447 4.94385 3.76349 6.2254 6.10825 2.35999 3.29321 7.58194 4.70477 4.23856 6.64069 2.35202 3.76346 4.00336 4.23056 3.76349 6.2254 4.2345 3.30042 6.64856 3.34033 4.70471 3.99536 6.11621 7.58997 4.2345 7.58997 3.29315 4.23444 4.70483 5.22919 3.29315 4.70483 0 ]xsh%ADOBeginSubsetFont: LAAAAA+CMR8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQI+CMR8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Psi <1C60D8A8C9B6AF0465C32961477495BF2D5260764E9B38B2C76FD6F187448845903758B559E3D29D0A48A7F09074F63EE724B812D3AFF503DF891A1CD4B5C83C06B5C2BE4882EEB3E74C77CD44EA7E69EE8B7F788DF736DCE61100287B6FA2FAF3415D3E371F87DF12BAD2CC6FE205FAC2064418DEC8109A1D643FA69CCC4F94E59CF3CA18B6C7EBA7E3AEE3CFE87E267103FC83B6E51564B6E99CBC3D404BBFA65ECA0E1568AFE92DA32AD0B0734D5D71B6D3FA24DA9F00545A5F608CFCE534350010F8024E6ED90D1EA5DEDECDE51F1E7527DCD8A4B9D16A0FED5D27348FCCD9385259E502AF4BF4BAC606411910689768D5AD165ECA4DDCE63673F924> |-/Omega <1C60D8A8C9B6F21D0B1B966739B75BE0C07419CF19AD0D415C1426957481FBC33B384E01A4096A9BA7DF7DCBB77A22BC1C5F75DDBA648EAADC287E7EAED9A27C5DC6B771486B1095F98DCDE7366891DBEA92FEE55F7410EE1DD071E0D97BE3732324A12C44357EC32A0DB8CA92B3ACD6F59B8F847D0D5C4D75FED514D869A03DB4881AA0CD290A07B9D0AD91FA676A88D24F4911E3034FDB6CD25895CB4B23AE864029661D04B66A114041CB2F> |-/two <1C60D8A8C9B7883C479819BD474E9964F6BF369AAF487ABFE629F8A56337D176F7C9556B1CAAE607CA6285C927013D8BDE6137B6739AFDAF8D7D8B1E86BAFBB9D834592D58F996DFF88B929F1FABA7347C2BBDB5519BE210DDE834DD1DCB9A84AA77E585DFD5A86708901622F6AC3CFFFF626D8C5FD08A157C4A8F19F7F5FA2E61175441FDD6> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQI+CMR8 /Encoding getdup 9 /Psi putdup 10 /Omega putdup 50 /two putpop%ADOEndSubsetFont
/YRBUQI+CMR8*1 [9{/.notdef}rp /Psi /Omega /.notdef /fi 27{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef /zero /one /two /.notdef /four 6{/.notdef}rp /semicolon /.notdef /equal 3{/.notdef}rp /A /B /C /.notdef /E /.notdef /G /.notdef /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S /T 2{/.notdef}rp /W /.notdef /Y 7{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 134{/.notdef}rp]YRBUQI+CMR8 nfYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-11.966 236.6 mo(secondrowshows\011,allpossiblerankingsoftreeshape2;thethirdrowshows\012,allorderingsoftreeshape2.Thelastrowdemonstrates)[3.34026 3.76347 3.76347 4.23448 4.70477 7.05595 3.30035 3.99538 8.47537 3.34026 4.70476 3.99538 6.11621 5.69144 6.5865 4.70319 4.23448 2.35202 4.7032 4.94385 4.2345 3.34024 3.34026 2.35201 4.70477 2.35202 6.11465 3.30035 4.2345 4.70476 4.46968 2.35201 4.70477 4.23448 5.69144 4.23447 4.93912 3.29321 3.30035 3.76346 6.11465 3.34027 4.70474 4.23447 4.94391 6.11462 4.2345 4.70319 3.29318 4.70474 6.11469 3.29315 4.70477 2.35202 3.30038 7.05591 3.30038 4.00336 8.46738 3.34024 4.70477 3.99539 6.11621 5.69141 6.11621 4.71118 4.22653 2.35999 4.70316 4.2345 3.30035 4.70477 3.76346 3.30035 2.35202 4.70477 4.23447 5.69144 4.23447 4.93912 3.29318 3.30035 3.76349 6.11462 3.34027 4.70474 4.2345 4.93588 6.11462 4.2345 4.71115 6.11627 4.70471 6.11462 2.35205 4.2345 3.34021 5.64435 3.30035 4.00342 8.46735 4.70477 3.76343 7.05676 4.2345 4.70477 3.34027 3.29321 3.30029 4.2345 3.29321 3.76343 0 ]xshYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-11.966 245.567 mo(that,startingfromarankedorderedtree,onechangeofrankingfollowedbyachangeoforderingresultsinatreeidenticaltotheoriginal)[3.29319 4.70476 4.23448 3.29319 4.71913 3.34026 3.29318 4.23448 3.29239 3.2932 2.35999 4.70476 6.59363 2.58795 3.30035 4.2345 9.41592 6.60159 3.30035 4.2345 4.70476 4.23058 3.76347 7.07188 4.23447 3.30037 4.70476 3.76347 3.30037 3.76346 7.0639 3.2932 3.30035 3.76347 3.76347 4.71913 4.23447 4.70477 6.12262 3.53235 4.70477 4.23447 4.70474 4.2345 6.12262 4.2345 4.95508 3.30035 4.23447 4.70474 4.4697 2.35202 4.70477 6.59363 2.58795 4.23447 2.35202 2.35199 4.00336 5.87714 3.76346 7.0719 4.46567 6.83682 6.59363 3.53235 4.70477 4.23447 4.70477 4.23447 6.12262 4.2345 4.95508 4.23447 3.30035 4.70477 3.76346 3.30038 2.35202 4.70474 6.59366 3.30035 3.76346 3.34027 4.70474 2.35202 3.29318 5.7074 2.35202 7.0639 6.60162 3.29318 3.30035 3.76352 6.12256 2.35205 4.70471 3.76355 4.47363 3.29315 2.35199 3.76349 4.2345 4.71118 3.29315 6.60162 3.29315 4.70483 6.12256 4.2345 3.30042 2.35199 4.23444 2.35205 4.70477 4.23444 0 ]xshYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf-11.966 254.533 mo(tree.)[3.29319 3.30036 3.76347 3.76347 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B790A83D9E7A6001AC854EF8B943E743E91B99DA29586301CDD5839823233D99B1C577C1F4DFF0EA0F32BC2086F2707A7DD20AF9B67CEAF2A8142C0184903C062BCDA3F619B0D53D20F97863BA7527C41ABC984D83E79275377BA320AFBB48F48B2D10088BC89EBB9C01D05CB682732B7056131A0BF4F223A45FB196C15FF8C20088CC8B4C909F5F0D72D1839A24540D889C90DD68E933DDAD60B1B6BFBEF9B96EA41D08123BC10ECBE3BFA295FF397E499C14DA43850D729620> |-/d <1C60D8A8C9B790A8362C570CE7DC14ED8339A5DD8D37983A5A2D0B4F515EB70692477F5F548E28F1DCAB41EDF4BA0728DAF245495BE02E394B0DD240B5D55EE51A3675003CB15BB911F900B1E5DDC9F583E654C623831C440B91AF47A14F90BB1788AEF8D63BB1C09A0DFFCC46AF6B9E95BF92169FAA4D5042B81ADB2768FDD695BCD7BA015B086BADFFD844444D05A45C7E170A2C8460474939E15E0EBABF1131915EE0697E92536E40A464505CA536EC3A6940E2FEEC193EC0EB65C18399A9D9> |-/l <1C60D8A8C9B8574464F1B434E924E8E17F47A16A389514CB900F56482ADFB78CE880D41A1EAC41DBDDDAD723AAD75825AFFB2E5AD2853D684AACA377F4CFF61F8762E467D7432F03C259012AF7AA821CB502C120A1BA693F9CB4DA4BB1D32A> |-/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDFC5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-/t <1C60D8A8C9B737EC5C828C415A21EF65A8DCE4AB75C4F804FD2F74AAED0332CF1075799E326C4CB510197DA3A668B8EFF3F2CAC89EFC9F1E24EFCBB6E4F7D58562BB90C45FF297D6656314FD65E690525FFF895AC8C24B58CDA801> |-/w <1C60D8A8C9B6079F1534F6C9E4A028DF1A3B0F45C5ED9660DAC93A0D8C3F14212FFFC33A5BF9F9DD1C33FCCFCA8E96FE6463AF5069DBFBDDA36D99F88520652F25FDAFA9A8FF2873E3FDAD8A56EC3357F44ECB370CA4BFB8352215DEAFC22A0DFA018C56F834AADBF74CAA36536863C75BD9D7A1CEF77767FBD18809BFE6294ECFE5D3634C7FCBBBF987220663EF315339F3D9AF5AA5B0F66F6EA972A5EE22BB54794478F89EC6375B180C36468ADC7E7CAF0A17CB4A0ECCE19DAEAC46ADA738E6EE5AB37B1A9CDCACA6A56A4B556E8FC78C8021B1E08F770EC97987838BDF3A71E528C5695396142E79124F182E83C76D32BCA38AD1CB77748E00880A049F1E82A6C5E7A5A7404A74F28E09F8202A196F8E9F69EAA58A4A3555B55F> |-/y <1C60D8A8C9B78C66EF659E90818F97757EE825CF655AFC48477B2EBD1F4499DC02D3D00D2C79F15A6A14FA0E2836DE647DF694EA1CBE5D7DC52383058018A4A5582F22DA6D7CA5C65B837F7ACE7A37D8295111416CC9542C83315A00DCC58E29D7A527B2702A3D42A1DF4479D981119205E9B3AA4589ADB8E455F287AEE97EF0B05E9F424581B6FBD77BBF4A2F94CB7C67A1D393F0F92A930746CD86812D0F3B42F48F3482F4A9EA27C315DF77B6F7CF19EE636DE6A48B0C90655339955118E2A4E2CE041041FB27A226D9B9C797FB178764482B1E4FE17D6316683F26947316> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 98 /b putdup 100 /d putdup 108 /l putdup 111 /o putdup 116 /t putdup 119 /w putdup 121 /y putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 10{/.notdef}rp /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 17{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V 5{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p 3{/.notdef}rp /t 2{/.notdef}rp /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 281.432 mo(willbedenotedby)[7.19498 2.76762 2.76762 6.07521 5.81421 7.73492 5.53525 4.42735 5.53525 4.98131 3.87447 4.42734 8.84283 5.2563 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /YAAAAA+CMMI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMMI10.) def/Weight (Medium) def/ItalicAngle -14.04 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 116 /t putdef/FontBBox {-32 -250 1048 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 453 466 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [31] def/StdVW [72] def/StemSnapH [25 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/t <1C60D8A8C9B80380260085120D6D1E249FB2DE32EFDFC5AEFCC3C1AB362AB1AC4D945C4142F374B77DC20250C08162AEB69DC4CEC0575EF34A20FF2838C56D01A3D40EE49012FD52F036B2ED1BB119E65DE07D10EB5C2DD7F41ED672F45AF363F4750BF26AF3518256DE17E77936DC9CD6CE44CA5F494C6FB830F5037D06DCD316E617> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQS+CMMI10 /YAAAAA+CMMI10 findfont ct_VMDictPut/YRBUQS+CMMI10*1 [116{/.notdef}rp /t 139{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf71.836 281.432 mo(t)sh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/omega <1C60D8A8C9B649C724AA694D269107C399DBD069CBABB5A8AE68F20B5E490E3DC1C785FA353D95B82ADED325D97ABDA80B22143CF4B17A3E3102765B2074BB5A9C1D2F245801562B09CA6D96708430269103EACD5E892D6EA99924328B3724F79BA7BC49925A426B5280A0BD5617C4206FED226909E6C8AE12BC7F8A4A62E5D6D98EC1C75CAEA2B66F4D98DBD949AF4D60F3510C266D18E21C053680D57AAE57B6D038AE992B71> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 33 /omega putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 11{/.notdef}rp /omega 27{/.notdef}rp /slash 52{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf75.434 277.817 mo(!)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B6415B3711EB1374ABAAA5807C9EEF546BB48E20B7C80F2440A33EBF154406CF8E0357C9FC59A91B81A30E2A6B39737D11C4098B5A80670049AA0D28AEFFF6CC9623E77045E059C85ED1DEF097E8AD8EB596D92ECDFA2450852F5239A26C6AE22D6FF2A11E41BB2F0B25F77CCF63F0DFBDCAFB46AB38C0475BF38716AF7C70011524830AEDECD5FE884C30BE71797C9E6C523F53FAFC27E6> |-/r <1C60D8A8C9B734780FC88FD3B21DF573DE0BD8E19ECF409327C58E3627DF4B64D82C290E296AD12D16F3BDD53C90C5D592551EDF5E8C7E8FE6B97498610F068FB40EF014C6896F922B40CC34CEEEFE16781389974FD1D8010C3A1B93DA9423D6C4280D86498AD092998E974DDACA1FA3CA4F3751905AC346A3F69D4682194D3342733C7CF3000C654F8E9DE159A2316F10B36E49A0996D15FEF4DE5D84332102ECD35D818CF4C1F221D14DB48C0FB5BD30A2> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 70 /F putdup 114 /r putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 10{/.notdef}rp /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 11{/.notdef}rp /F 5{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V 5{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf81.484 281.432 mo(.For)[6.07521 5.6767 4.98131 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/e <1C60D8A8C9B74A3E84572DD0FC48169FB86B2CFD7F6BE83E4F2E1E5CA16C2AC92E66EBE7710F60635A18699716341094CF929B549F2ED1A04C750C178E839D10856F86288F148E1167E0754DCAA9E2B0F560E85D0BC1CDEDF0A86C4726EBFBDBEED85D99B5FADD778BC7414A74C5493C2DB91DDF0EDD2E8B66AC843CF149> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 101 /e putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [101{/.notdef}rp /e 14{/.notdef}rp /t 139{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf105.425 281.432 mo(e)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B737EC27E43BF1977FE17AEB7DE778CD9D1D3D9164F271727AA0A52834106DB6D5C2AAFD94AB31812D41894E82D13A11FDF4155F02A6615144E05EE47C8795E8E89CE29B723AE08221B1DF3C5B4817E44D18CE1598A5DC2F98DABB2ADE3D131ACFA2D3D56E> |-/equal <1C60D8A8C9B6FC2D989577693E56B5D5D9CAF0920CAA1C7CAC692E5993F0507AA10E6DD4C22E48360AB64AABC8F79D72A37E3395EFF87B7331B16AA5497F9A03CF7F30718A4F8E51FE4C555962B834> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 40 /parenleft putdup 61 /equal putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft 5{/.notdef}rp /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F 5{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V 5{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf111.17 281.432 mo(=\()[8.85477 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B85744148CA332C8F6F1C9DE6B352F8C512D68BA1E31426FC0ECC7A922246EACB7A924151A79EDFB3E3451BD87933C27475FAC0D74CB8267D592363D57178D8C03E491CE91E57E08820A621E0AED28> |-/u <1C60D8A8C9B7FF2B5E691B594ED192F8DAF34DFDE1D2AAEDCD429841AF03FDEA037486B5217B1B05A5EA4ABDFB35DFC78D2367DC40D1F110D583E8EBBA49C004ACD629A48271FCE64CD04E93EA587D6991CFE1813773F316554FB187F1A27AAE160963B619280C2DE705C3EE513DCAC3176102E1BB76490EDF13E368D3E2693EB823E673110833B73C97BAC15E18A7F2AA5836D9B258FB3639BFC56A0204B2679716898C8E599CB663ECF34E857BCBAFDCF77253C3818BB386D1F1C2BC8D3C0C6EC202486664411D1ABA0B85E128> |-/v <1C60D8A8C9B757A3CCA419203BF94D2EA809857FC5AEAF28AEF59E6D5D4595243375EAF5326012C4167BD7F8B392426C632C6BD60C506B533235B57DACEE5845AF98B9556028F4CB4A4DE219381CDBF6B35E72D60AF0075649B899EACBAA65356AEBEB0FD0694026C4EFD6A1484FCF2301F1B9CB02C37F17D7273BD89FBFD7D50E022EDB45C8AF26A82D60B86E25FEB1CF67FA> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 59 /comma putdup 117 /u putdup 118 /v putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [59{/.notdef}rp /comma 41{/.notdef}rp /e 14{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf123.9 281.432 mo(u;v)[5.70354 3.32553 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenright <1C60D8A8C9B737EC27E43BF1977FE17AF226302CB703517021A0DB54938D38A906781CE143685A42358F6D26C1E58529BD5B1EB56AB64CAF39716A9479AF082DEB3A49B0B9FF06175FD4C622795E8AFACAE24D77E337BE03FB99C4AAA689F9E967FCE15709E3204C4D> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 41 /parenright putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F 5{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V 5{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /.notdef /d /e /.notdef /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf138.111 281.432 mo(\))sh%ADOBeginSubsetFont: GBAAAA+CMSY10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /GBAAAA+CMSY10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY10.) def/Weight (Medium) def/ItalicAngle -14.04 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 50 /element putdef/FontBBox {-29 -960 1116 775} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-24 0 683 705] def/OtherBlues [-135 -124] def/BlueScale 0.04379 def/StdHW [40] def/StdVW [40] def/StemSnapH [40 56] def/StemSnapV [40 56] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/element <1C60D8A8C9B64FAD2EF2B8851D1968E5D029958E40ACD5147C40741E22A1237398886102D9E824068CF8CCB984BE3805C3EE450A9950F9ADBD244A087E2AE7BA5402D250A2547E9B9000BF371B31F9A1575410E09C98112EBDE784B50FA20B3F67AF0A9C97E9C2EA9A7FD1BDD7C5C4> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQT+CMSY10 /GBAAAA+CMSY10 findfont ct_VMDictPut/YRBUQT+CMSY10*1 [50{/.notdef}rp /element 205{/.notdef}rp]YRBUQT+CMSY10 nfYRBUQT+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf143.092 281.432 mo(2)sh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/E <1C60D8A8C9B6177404106CAF965141780A3169E0E51FB498B39631979289FE59D7C56480822ECDA6B9254C24924A8B73A24155F39A737A9244DC782D8C6A6A3BD0A905E5D1F011649259A74E1CAD29A1D8E72F81F09B4C7EECA4FFCFAEB3B1E6346CD6A3D954E38DE31F2A1F351DE9C3279D3BD0707BFECC7B59C010693956FA43F9D76D2D5AE29B7B4A7BC612A50EB461CD1514B7B648A599EA86165FA5A4E003B2D394C7C044D03DD15C624FCCA439C3E5318F9E4A407BDFE3B43DC9F7E49965BBD7AE8C3EB73C6B79F04E8C58C59F20EF8F521424F93F0641BD42D5E61E58F889154054E7C906D96931054DD69096ED84D5E307FCA9D9C16C1D12FD79> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 69 /E putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [59{/.notdef}rp /comma 9{/.notdef}rp /E 31{/.notdef}rp /e 14{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf150.841 281.432 mo(E)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B85744148CA332B8493D4AA74EC0ED15A645BB097A03BCB0F035B963033C1DF7BD2D48E65E6103A6E43630254BF33A6D7E1B7340BEC9334288A8D805FE5AD1AC9173E2E18AD17AD4AEC5661EEF946D3EA40FA8C5> |-/f <1C60D8A8C9B83BB81FA130945C39F84E5B6E4A6C9F65F126BAA27979D5DD24D841AF174619487B50FE2700B1E5283B920CF0C36EBD127A2FB193DC3CC442CA2E2038702792712AC88F8A95F0FA297EC3B143EBC57B59693CDD3FD2B58E1A0E615D44B1BC286B802CB88D50954B5E67313CC26D2733BD799245E69ACF97F2A9BABCDB06A9D69EA77A4D41E95E2A8D3382998D0B0648C54FDA3BC85D30> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 44 /comma putdup 102 /f putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F 5{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V 5{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /.notdef /d /e /f /g /.notdef /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf158.77 281.432 mo(,wereferto)[6.0752 6.91605 7.73492 3.90228 4.42734 3.04462 4.42734 7.20987 3.87445 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/delta <1C60D8A8C9B77FE246D59246FEF8414301972DEFFC20DAD8E76B62D4170D7FB3E1ADB81ABE6B4E6996FC3B2B3621970EC9820F84BBDFF6B37F13BF3A9F7D2D922503E82C85B46B60F5320C4078CB5F0FE7F6EB66217DBFD790DB423571F9E4D0E284A358496188A3114CFDEB84E83FD74E25AFF554CEA42767C9B871C82B0A63B9DF1F9BC578AE7E16811698AC39787D15FC677E8D0015> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 14 /delta putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 44{/.notdef}rp /comma 9{/.notdef}rp /E 31{/.notdef}rp /e 14{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf214.677 281.432 mo(\016)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf219.482 281.432 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf223.356 281.432 mo(e)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf227.995 281.432 mo(\))sh%ADOBeginSubsetFont: RAAAAA+CMSS8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /RAAAAA+CMSS8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSS8.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 49 /one putdef/FontBBox {-65 -250 1062 761} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-21 0 444 459 656 677 694 715] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [66] def/StdVW [87] def/StemSnapH [59 66] def/StemSnapV [87 101] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/one <1C60D8A8C9B7883C478FD7F46F74AD01DD5B54699EA0E353C31BD1A212ADADED6E40A7A9FBC51D62BA784D7A55D02BB8B16483754CBF9A880FE2F6BDF42A0714> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQU+CMSS8 /RAAAAA+CMSS8 findfont ct_VMDictPut/YRBUQU+CMSS8*1 [49{/.notdef}rp /one 206{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 281.432 mo(1)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 292.391 mo(by)[5.25629 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf1.87096 292.391 mo(\016)sh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/i <1C60D8A8C9B8038027D77D999CBA057B605982D4EFF2E178BEDFBC5D829C8E5112CABA4ED50681C441E375A2AC7E68E8698A6DCCC2E74136BB036B7FC46F3436742A4E0AA06B383FFAA5DF5AB17BD8DE754B8EBCF65D9F6F7DFABE9455A90E28843FE18FF57F1E86776E8D65721343F576A2C89429DBF08B777F3CE9936FA2FD679340170DF7B4AA6BFA6CCDFAFFC83D728F58EB8D8CAE83CE92DDDC115CE142CC4BD33D1A52931356799B> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 105 /i putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 11{/.notdef}rp /omega 27{/.notdef}rp /slash 43{/.notdef}rp /i 8{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf6.29896 294.228 mo(i)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/h <1C60D8A8C9B790A83D946A52D133532E9DDB252C41638FA043533341FF45F4E0EEA3BF171DE971DA044D93815FABEAC6A961DE24CD8980B97FCA250A2CD3DBC1C9175E22BC18E41FEAAE3FDFFC1EC461872FCD8D617F792306109E6C32D9EEF5544F9D280B7D28E77406A0CD8B488898A862DE88999A354709E3D39075170B03FDE60F1E3F7008331FFBCAD1B838829FBE76742914B50EBA96CF0A9BFB3610334BBAB609B960E9922A4587A5710F25CDF35D8C915B99DCE5DB414BDFAE707D88DDA35DD290F04B> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 104 /h putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F 5{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V 5{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /.notdef /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t 2{/.notdef}rp /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf13.001 292.391 mo(where)[7.19498 5.53525 4.42735 3.90228 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/i <1C60D8A8C9B812A873C68D5B4F2B5E768224EF46878151BB86C5276D36B76A2F589A55C4A5EE3BA699CB4A88BF37C5D78C86C14140FEDFCAF26ED7786558FB4004F7D4D6D6C473392EF89CF6F306E31522AC6282E6F880718CA584CA5F3CF0073D906ABBCC6E22D61AC44BA56F049036466C761D68D70488E4284A0B99130D02240C3784DC91BC2576EE2D8BCBACBD2D3149F4EC97A54B1651F29418DDD69418816B9BD7EE2B71ADCDA3A3> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 105 /i putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 44{/.notdef}rp /comma 9{/.notdef}rp /E 31{/.notdef}rp /e 3{/.notdef}rp /i 10{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf41.809 292.391 mo(i)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf46.349 292.391 mo(=)sh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/psi <1C60D8A8C9B67E8BC0FFBE2EC0596C3D022BA240D6C747116FF0E4D8DE4152E940922AA480076264C5FFC7363357ECD4845CDE69E8E3E261BB7F3C6579E3BBBBBC3A02A7A676D0F0729188FA189508C09002712FF387091C771F3A4A356988D9F019B2AE088E39855768B9E0C5E29FB2EBD4CBAA553E0DAB3922BA5F50150F20FC50B10D7C12AE2FB42FA5B715632B12BCA5F4F8DD873D67E7A862336F2C9882B78A592B66AF7BB82FEEA8FCE7834A6EF7D9130ACD8419D75EF8FCFE6E0A416DF46E5FB71349D6DA908776778EFFCC3F8AF7AFD2D03B90E55D192AA4FDA47C662D007298138BBA3630790982E4DE705484> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 32 /psi putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 17{/.notdef}rp /psi 26{/.notdef}rp /comma 9{/.notdef}rp /E 31{/.notdef}rp /e 3{/.notdef}rp /i 10{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf55.2039 292.391 mo( )shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf62.0509 292.391 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf65.9259 292.391 mo(v)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf71.112 292.391 mo(\)\(e.g.)[7.192 3.87447 4.42735 2.76762 4.98131 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf100.447 292.391 mo(\016)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf104.875 294.096 mo(1)sh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B8574464AEAFBA1A0A0C2B3D037BE5A5239C78737658D239BCB61DC78D83A8F223F832> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 58 /period putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 17{/.notdef}rp /psi 25{/.notdef}rp /period /comma 9{/.notdef}rp /E 31{/.notdef}rp /e 3{/.notdef}rp /i 10{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf110.16 292.391 mo(:::\016)[3.32553 3.31557 3.32553 0 ]xshYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf124.551 294.096 mo(4)sh1 /0 /CSD get_res sepcs
1 sep
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf132.604 292.391 mo(inFig.)[2.76762 8.85278 6.5036 2.76764 4.98129 0 ]xsh.930816 .793027 0 0 cmyk
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf164.572 292.391 mo(1)sh1 /0 /CSD get_res sepcs
1 sep
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf169.553 292.391 mo(a\).)[4.98129 3.87448 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/two <1C60D8A8C9B7883C479D21448351655B078B2EE7FC4AB870B30ABB2ECE71900D713116AA68AA3A8AA75B1A204BBB1D4D6949603848F16137F6446D5C9AD6A8B68CD49177C15689A88768A63F7C85519618040546EC25D12D8433EB30366989796CA8862F98C4EE3C1BD42763DC576D> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 50 /two putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two 205{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 292.391 mo(2)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /SAAAAA+CMTI10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMTI10.) def/Weight (Medium) def/ItalicAngle -14.04 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 46 /period putdup 80 /P putdup 97 /a putdup 98 /b putdup 100 /d putdup 105 /i putdup 108 /l putdup 110 /n putdup 111 /o putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 121 /y putdup 124 /emdash putdef/FontBBox {-35 -250 1124 750} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-22 0 431 442 665 667 683 705] def/OtherBlues [-205 -194] def/BlueScale 0.04379 def/StdHW [31] def/StdVW [68] def/StemSnapH [22 31] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings16 dict dup begin/period <1C60D8A8C9B83844B71BD2AE080BFB8F854F0822D32663F4C108169A937A2928919806E8186FA4899DAF> |-/P <1C60D8A8C9B65B439BA4FB6FFB21CDE17E388830ECF475AA2A426464401A6D41A894B6E250AB79CB47479B561FF8E1BAE7355A889C41FE634854A6CB332C533A076F3F12A1BA6F946DBAC4F0FB9BC8BA59DE4E90A3FDD01590C18FEB09F5FC6AB8C12C893CB7971C5AD2956CA0AFA079DF4B67457A3F999422C8319705CD7ECCA56A5DED49C61074488259F4319A6DE301A10113382F9B9134E939D4DBCBCB57686A2194DDD756B9378462BFD5AAD24B55071FE0297EB4483B328C6316641B73> |-/a <1C60D8A8C9B7BC12CC2205AD3A22AB83F2BD3595B8CEED9F984C44E12483CB56A1CF945A1C8490192AF8E401942F0174B32370D533C283A49AB9B80655BCE26E16F9146EA94E57B3A2A355AA2AFF023EC6FC12243EC5C0BE4A887F5E0CBD9503F5DB92C5D9F7CDF6B92D29B66228A1F4C5088EC756E9C9AD00068087C76355271F6CF86D0D1AC211D7FFB9160ED5FD10C3D747E9FE07DE3F53960FA37FE0764CCF81CB0185CDBC673B50F49DEDC390E3E3E93EC082DE36415CA9F2A69D65CD5F766AE71CA25060C4104854B8C97FFA393989853A62D7> |-/b <1C60D8A8C9B74F361570F6157DF4C6BA1832633A20BDAD8E745C3F65A9161A996E8C37CF5D8FCF54987D72D6D0F4034D4E3B8097E998A9E3504D576F88CD9BACE2729D0A421614F6E6C017458B9BADE750B8EA47BF7D6420014A0BCA30F421D272FA7A0946FE9E1C74CBF9DD154EC8454F8F6FB538DFFBC1EDA0004B601ECB6E1DA855879739BECBA256C1881D0EDB0F9D3AD0A4CE8EC9BB0FA0E6816D6C5B537CEB42404BD146C418> |-/d <1C60D8A8C9B7BC12CC2205AD24A1CC8B5FD1BB19116A029DE15674482C4F1883486F1D93753C1DF1835F8FA82CCA0252ABE0C1066E12A22C0DFF0F1A4877C4F10003D2BB46BBA6C4AD935D7B4400B6AC9F724D37E3D2FDD3DEF2519D59629371CC3ECE789536B4C5001519DD783A398816529F7EBA2C07051D3C6A7BA6FE559FBE091759EC09C63120E18DA6404CE0EFB882D3ECCD0FAFEAB921A2F9457456DC5266D2D39C0E6F9EAC1B9048FC6E2D1167262F390AB375478590718D5FECD52770B28E5B10E4858D84F4B7DE96D5FFF1ADF771159BF072B2> |-/i <1C60D8A8C9B83844BC5739A2F5E229CCA253721E3B38AFF4581DAE3E28D45D71C78251E058870AC224D69A49B468899A63EE5BB41D75A39B43A7E098D279619911F793AF50A2F69ECF56CD45A7EE26161DCF8ED0306BBC1D1473A4DB595D9E07CA5C49BB373103568B9EE365C5707C2E506CC03A3D37D53B72761E8D6B243E39EEB87AD22EA0FA9863CA31377413B6C1AE222C55955055BACBFF3F7648C105E73DDC153B6FEF326497ECF27B99FCC0713C8AAB6C9CCCFC2DFEED6D9A> |-/l <1C60D8A8C9B86D0BBD5433E214DDD0A53EA3E9190DB570F3D042A4281E41216E39384102CD82EE7BE54AF1B92021B51198238CD476521C786F12701CBDC457AAC473125EAD63A8A2A035A6F1E2B590EA7D0B0058B5DD54C6A4EA21CE215CAE4C8BF1B1550FFD68981399F8F263BD6AF971B8BBF56FDEBE3820D2D4323294822D332FCE6B47FE645D> |-/n <1C60D8A8C9B7E965DE634C8C36C9FF3F587895373875B3A7CAF8D08B9A4AE5C403B478C7C19B93D1709BBB3954853D4EC36EE68AC9CD7AC80CC2992770FD6BDDAED41BA84AFA894EF644B1E3900E46760A7359AFE74E7E389F03EDE96370FD466BFA3C5694ED822B7F412BDC4EFA0AFFE79601DD89670C229540F12A601336580BEE2B4C9D4274878590B4EFC788282A2AEF1A74C404FAE83E8E77FDB1C9E32110DAAF41B1DE8C9EF50B94FCB8A891698A7A650CEFB90D90B83B27E869093EB40C3E7E20159F596321A653F4676289EC> |-/o <1C60D8A8C9B7BC12CC2205AD24A1CC85ABDF6C4F0484D46E9F8D26FA5319F6A3FECA2702F2F444DF0FCB9A5563080683AF9C34F9B0732DE0FBC33259081B6E896976FB2F025861FB2E12BF0F193B67C4211AAB050959D27D71CEE3AE8382246B820B9065097F18> |-/r <1C60D8A8C9B71648373274E9A3D0C288B8D6B0EF7DFA2CA51E61C9BFAB57EA43A143B8252CF24D9B71B74A24405B3A46FC5CD55B0FF41705A504B9275E430357F5210EE225BFBA128D41CA182082399B40332E94DA354D02FC882579BFF619FE26BF0DF7F9DE77F45EE12CFD7F74EF06FDBAA7F8CFB5BAAC04827763B4556AAB6359E2E508EB1CB21448BA8E206685309A50E9AAE1> |-/s <1C60D8A8C9B703FF51C80F8614142C25C5B0B13140C79DA0E794B810074E117974F1ADE0C6FC4A14C0098476317BAA9C9644BAEB6ADC69DDC42593D643339EF961CD44D36A5C749456ABC9E9B0529255DC2D84CD27F10EBC294B156942958B4B384D1BEB53F2F1D391FCBABD481E25F236A4343E38B83B187A22F5CAF64A874D007F74738A69C694F83B1B0DD32C7238AA073DBE7616C40CF6DBE1912E6C09852B66AA25557D4B07C035D1455B65001C254F21840862771EEF93CE7ECC3A8DD0> |-/t <1C60D8A8C9B81E5FD300717567274A1A29F39DB53FBE241AC750224746B42D737842953D7D252F6F1D06CD4462A4C1FAE00E115E33A76BAE54709704BB81E3CB97DC57DC89C663657A656B013B00CAED2B6F710CA066AF8EB5CDB847058704BD41DD458FAED4AF177A1B2392603D1D03A0423D8EBF0A2BD809A27F72CFBEF2864D0D6BD1DD4AE7AF9404> |-/u <1C60D8A8C9B78324EEE5BC15B0917F8EA4F48A16EB275AA0D944C3EA7FAA239E3F9F6F8B365FC8459FF763F945FAB03DEE645EA62B4724F48823B1B594168675F78D92E29AD2DC465C787A48A31E7A3BEEE555B8088AF575581F1C4243E4D3B8391376BD69356BFBD645CF9D44761F6D634E567460E8AE69DEFAEB48AE13081B91CF6512C8FB1667FEE930CBB1014B93D5E75885591C9E0312FF2EE964B84B1F2E9751AC137175301365001ADE4B214066BB0DA555F979FE85ABA5D8A63018D6801B2C8F961247> |-/y <1C60D8A8C9B756EDA6A73F3AB2408C8F4D2CD8D1583E235DAD01368CDA6AABF11A6286649424B7CE94F8B2D32932670B28CB37803C29E1B4E2F749378A161EE73DE8AD8765BAD92C8E3C7F7B992CB82B33291F4BB38B574E258F830FCFDD73DBF93E29F27845DA7F267A5BD00AD2E23CF19424E390C603302A4BD2A32F1FDD80E46474FAAC2EBB5E168D338E782632F6883382513E431DE199BC650EF9442B3D5A37336C757BF1307FD28699925588F61FC738696C029F1FF378509DF3CD3645F924C79F3DAB7796E99AB024CE1745B34186E67973E134C8D211418C01371D4FD9D83AC655D350AC3F9CD203BD504D8847EF9CF8A6227392> |-/emdash <1C60D8A8C9B5005F730E37F6C783ABFAB9E72DBDC64A364A42D7AD7D9FCCC859D7EC909FFF12D1CDA4F6444BC12D17> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQV+CMTI10 /SAAAAA+CMTI10 findfont ct_VMDictPut/YRBUQV+CMTI10*1 [46{/.notdef}rp /period 33{/.notdef}rp /P 16{/.notdef}rp /a /b /.notdef /d 4{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 316.479 mo(Probabilitydistributions.|)[6.75762 3.69321 5.09181 4.07478 5.09182 4.58286 3.05554 2.54645 3.05554 3.30957 8.92245 5.09183 3.05554 4.07376 3.30956 4.20131 3.05554 4.58286 5.34691 3.30956 3.05556 5.09181 5.60092 4.07376 3.05554 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/W <1C60D8A8C9B505563364AC8BE8AB65E15C6C08AD458A3C49B32AF7A6889CE67A7C3A7AE930FDF331D78AF6B2774B2E2F9165802F51899041EFBD3924C43ED76A472FF8E62DD42BB26872119346C8E5FAE87DF4A5B6404CEC1023A1889FE114BA5E56D8DAB21B203F5E6D874C0E17030C65A10469C5F86A53A7D1CFDBCD0E6B94604F94EF6BECF776BD9FD84BFC7AF2D1AA08788921B6CE8FD734B2E9372ACA3C7D976E4DF8C6EED1CE088EB43DC42B2D6388D9B8E9E4C6FA2D7E84106976063DE8EEDEDD5065F70DF6158531A23BF77B8F77A74E19614095CB2049840CA4D0D45F1041ABD9861325F1156E78D91D6A706606395E26954346A8584D3C7D06B32B91751B6AC28A5309BAC9B774A4A1514E73B9AA13764701722D129040EC> |-/v <1C60D8A8C9B78C669403575833C8C1B14674B390D764957989B7FCA39046F88EAC215F3348F64657FA41BBBD2D5465C3FAEC5C4992D77A70D6D0FF5B9FE84D58B8A01F974B26A648270BCBC3DA08E1FB6DCB4BD59931217BAC36EE05C15D6C9332DAEE553F44B623DA84A3E35E45703CEA683F59CB5D7DC58019327FAA4690D7E0848C4054F367D2C3BF6371C99CA6751F50C10017AA2754321B985E8B60B10B9F082539BC1A53136644081D5FD9AE168FC766A25A8946C2> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 87 /W putdup 118 /v putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [34{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F 5{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /.notdef /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /.notdef /t /.notdef /v /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf115.264 316.479 mo(Wenowderiveprobability)[9.41267 8.31277 5.53525 4.70233 11.0904 5.5253 4.43729 3.89233 2.76761 4.98929 8.31277 5.53525 3.90228 4.98129 5.53525 4.98129 5.53528 2.76761 2.76764 2.76761 3.59552 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/three <1C60D8A8C9B7883CBACD30F9385AD6BBEF69616630964E70D12F5893D6DB4A79055CC5704D8CFF9199256C9D3DB270032D920A92ABC93B684A09DC9AF25C824AC74D31847B9735093856E0CD2AE14CD0880BBCF322A51EE44AC1F55102EC8ADCF72E1082A0866C157B4164946488F815FE47A1819EF7> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 51 /three putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two /three 204{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 316.479 mo(3)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/fi <1C60D8A8C9B790A83D946A52CDEF806B68BCA69D0F565BD47A313ACE64EA4C51C4F7E2720AD6426622FF887A9B1CEFB163BC1E0E045B9CF4238406E12352EBBD9242E2C49AFC9D86CDEE482C0035CA1CA44CCBB1436642750A1E71B1CD288AC28B3D26A164143FCB2C92157FC4CD1F366676BE46E871DBBB1239C9614DC38DD102B67124FC3D2C144C05DA896465C2DA06004C93D99A6D33F72F04F023B41A55BAD349B063D76BBE78E5B60101B7FD0DF48C196A450BF7E868A35BEFE7F5AEE46F6B98A5AEE642C67C9F421CFE1639B9D13BF5EC82D77CC20A4B04492D8733D54EC758417FF41850C5076FB5C2875D5227FEF9897E31DFBBC49554A2544AFB8F5D9BAF3452E7> |-/c <1C60D8A8C9B77FE2B98B448AAC15CD6088822B1EF090F0AF6EBCC9DDBBDBF65EF50E59DA466BEF0FA242351362893C7564E99AEB6F42CD9ABC234329EBDD53E590403FF06858A28FE170B71597883CA2148468202C6DAD0EC83B55607026EDF229F6C24FEC7F46E5F53E3632239AC20591F5D1A939BB80017E6C55D3D86751973D2E06541F43DD3086EAE96863ECE0301F79F72109AFDFA112C3A8> |-/s <1C60D8A8C9B731071688E37ED9B7C64FA956A3F4F3785F4130685F1AE6ECB30084C557AE5797D39605F849A2D9ADE2A65CA0927636C7629B25FDC4D569E897F36515E172780EBFB2CFAF71CF0EA8B4DD392E776CF20E7204D59F8DC03F56CB4421E12FE8430EBD29CFDF5F6509E086EB0664E99116F88F2D5E9A8F8E96C847773BE6B8B90D0A0CCE846E18C0A1DF77A626724C95EC9E6FDFE55022CAFC8918AE45838B303979E3A9BFE7F7BDAB73505805005500EF4C5AC6405B1E840CF1B619C716D89CA7E80EEDEA1B928C67F7A10B24DE3EC254855DAC8B83797B28> |-/u <1C60D8A8C9B790A8362C570CFB2800E8CBF5A206A67F17BAAE343254C03E958F83CB5A12ADFA8B4412150589560DDE9B70784A29B02FB60C9645231D13A978308E5EE53984B78C9AC2AA2F0EE5269299E66EC0A2F6D2FC9C7C56146B4A2D450F3E529F72E7D7FD96107695E2148A6B3CC77B93CD510A44599C53106E6043B1ADA6520148DE> |-/x <1C60D8A8C9B78C669F28CFA812DED67DCEB62F17AD12F7D7900E6AD3161B3BB6A9E88D307B5F8CC0D753B8AC565B099CC0ACAA4A7CA31F2811E297F44D0DEB72F7C315759FD2E63382EDE3061A24E5309BEE98D8290B6BC9B628BEBD7F7D73F1B5EA640583D87E4AD24CB7F7908FD9A3DC9303785637F3B203908DF84330922688D7A03D094D4EF700DA6BD8427088868109E238A57C22F5759A9FC99E5C3C3F2D6B15D44C534041C741DF56BEDC796180345856EA6BBC1BD98F587E929532F631C96BE91F404EF68AE1203A5AD95C9FFBED9A1E5A7A1275795AE78846990825436FB611A109B66853254DCAC13E4C6298C531E7AEB98A1184600057B10A9DAB09484AF36A38858BAF4BD8E53752011A5652B9FACEB6B61F17736A8E4776835DFBDE552410043F2D535B01DBC3DAA1EA0A782CE3B35114AE12> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 12 /fi putdup 99 /c putdup 115 /s putdup 117 /u putdup 120 /x putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F 5{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 327.438 mo(distributionsontreeshapesconditioningon\014xed)[5.53525 2.76763 3.92918 3.87447 3.90228 2.76762 5.53525 5.53525 3.87447 2.76762 4.98129 5.53526 6.33017 4.98131 7.93623 3.87447 3.89232 4.4373 6.81839 3.92917 5.53526 4.98131 5.81419 4.42735 6.33017 4.42735 4.98131 5.53525 5.53525 2.76761 3.87448 2.76761 4.98132 5.53525 2.76761 5.53528 7.38226 4.98129 7.93625 5.53525 5.25827 4.42734 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/n <1C60D8A8C9B7C3C99592073C380D5EB33972B0E7A1F7696CFD3BFCDBA36E74B12788DB1F09B52B587438F5C7126CC3F9331B76B411552DAD88FF5B2731FB8A30D4039054DE7881FD1040B3AAA0067A7F268759C5B8FE71C6C640E6CFCCBE79D4AF27DC6E5B0A2255251E501D4B4B538B55ED267C22906901AB7EEDA3069DF42F6AF99C860F98E5A2449D9A147D2C1F90CFD8CE9D17F947C6867C8C175E341343B07E6C856BED2AB83F9AF1F2FB39E3C5A2A0DC4339E7026D740FBCF796697562554331A7ACC4FBF70E9430AC085F22816D98AA26> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 110 /n putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 17{/.notdef}rp /psi 25{/.notdef}rp /period /comma 9{/.notdef}rp /E 31{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 5{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf200.487 327.438 mo(n)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/H <1C60D8A8C9B6E3FA234780E58B87D2EA5F590A170732E8342AECC935166121E62A1070A4510D098032CE86B0487DD79307BBCAC2344B3292DE9A2D8082B8628F7C6E230EE648567F4904925AA4070E97FCB3EA4C73FA2E3142B18F75EA0EF5F062D038BAE03BBCF96552C8DD6B5D4B8747E5B552469E1B25986782E0B55D908AFB4A898DB9902CAE08C84B79FD04167BDD5A9E66D88F539A05377BA988B49C7EBFDFA962B967B5AE9DAE2C682A6E00F2705C6A21219B2987EF858D011EEDAA259CB8B502CDC00C7A32E14DD38C7C48E01FF854BF1DF45E706BF71F42F777A381F06D6C9B4C9EFC6AED73572FAEEB4318476678433B1ED0A51B6532A16AF3C291E604AD4889551281D976188DBCCE5E87B2250FDAB6DEAB32EBD03994B24989D9> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 72 /H putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O 6{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf206.467 327.438 mo(.Here)[5.16861 7.47195 4.42734 3.90228 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7883C47E52F83F2DD71F2DE70DF48AB7D09A7B2C247732403D577AC83B8C752E8FEA81FA3E89623E6342034E2A29BE4CE35B9E663B9145B89F8F7547931B84BB349A6F99E> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two /three /four 203{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 327.438 mo(4)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 338.397 mo(wegivethemainresultsandprovidetheproofsinthe)[6.91602 8.50205 4.9813 2.76762 4.97932 8.50204 3.87447 5.53525 8.50206 8.3018 4.98131 2.76762 9.60995 3.90227 4.42737 3.92918 5.53525 2.76762 3.87447 8.00389 4.98129 5.53526 9.60997 5.53525 3.90228 4.70233 5.25827 2.76764 5.53525 8.50204 3.87448 5.53525 8.50204 5.53525 3.90228 5.25031 4.98129 3.04462 8.00388 2.76764 9.60995 3.87445 5.53525 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/five <1C60D8A8C9B7883CBACD30F911D8EADBA8A4CA69B0974D719BE478FAD94FAB1CED5FF4BDE6D0C321D01E1F6787459C611C8E163D1A471CCC45A024560EF8D9E7884068AD76612CFF18DD5FD045510003EA333507CB470A02A091449E488A5744150C6698038487> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 53 /five putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two /three /four /five 202{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 338.397 mo(5)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/P <1C60D8A8C9B65DE708408E897D8681FFF528127AC4B20DABDE3694037FF5C7CFF0F66599746818E44A88AE051EAA2ECC64A7F63066296DF5B94E5374A79101894F634254EBF61BB4676A0F5F95AD513AF7507835F91BBF2F6DB05C1913602214DC0C07048AC9F398A5400FC635BC3D7BE839FD2C9EAE0EFA08945ECA8DA23D80132909A7B4597A38120CAB750515AE457C3E49AB6D8454> |-/S <1C60D8A8C9B790A8C3E1550ACC8DA9C9FBD3A5CF2194CD2B8642D81A716BD00E790683F96881FACDE1F9315D62E9690B60701D527468B87CDFB0F4764C5597556AE6A1AC77EAC949F9287197658BC350D110E467DE690E505B49A0B78B79E2357C1B06B49C46DBCFC093C8FD052BE36FB8FD34081A4086AA2F339D541A84930A281511E0A17B9869F6AA55371F1C0D54B13DC306CE1AA830A9CC533AF6BD85406DAA830F9B2385417AD4B282844721D0D07F3AC31F2E4FAB062DE1D98E9BB1ADDC8425AA1837400BB1FE64042CEA44886B96F0827BA19AA957D2008F38EA9B013399E5BDAC4F2A> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 80 /P putdup 83 /S putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon 2{/.notdef}rp /equal 8{/.notdef}rp /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 349.356 mo(ProofssectionoftheSupplement.)[6.78058 3.90228 5.26025 4.9813 3.04461 7.24673 3.92918 4.42735 4.42734 3.87447 2.76762 4.98131 8.8528 4.98129 6.37212 3.87447 5.53525 7.74489 5.53525 5.53526 5.53525 5.53525 2.76762 4.42735 8.30182 4.42734 5.25629 3.87448 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7883CBACD30F679EB43AB3BC2E0FAB555C45F2D69832D8F1322EB199F3902FD6A5A24BAD9F3C713D1EE3D899D4F9ED0DB75A1F416C78BBF8431E7377B9672F77D49F048A9688700E60CDD141910086B803A56A3D95DCAB2C8AC8A724B759E9FA9EA09621ADED4C17D6E6733345768209A842A0D6D2EE2206A24059D83E99522E57142BBC17A0BC49C23> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two /three /four /five /six 201{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 349.356 mo(6)sh%ADOBeginSubsetFont: KAAAAA+CMCSC10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQO+CMCSC10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B6C7695213A528591E1816B37F6372BCCC6C6072788C902C24C5ABD15BF24485F76BD80632E1F306460A98BFDB26C781A30DCA9F9A5898B1752F448EFEDFBA903EB27CE64F6A6E6FBE4E738DF5CEC87D89A7E03EB56A62C7AFB9E7AFD1314C8D622E4749702C98F34220E0755D9CD519492FF7630FCB25E32D4E31F39A247D96B6F783B71D2626C1E356363F5412> |-/e <1C60D8A8C9B7EE7C65E4472AD3BA8323089DC13C4A568F0F31389DC36FD93678511E99F77594D1D9D9A113861B7FBBE42427ECC9CA257A0C412FB471371EB5F6E46E8BA159B36F3CDE84F3C9BF8896B60FB138A2CF9D9508D5F18352D8CE579152338B20A8EC358330BD17B7DBA96175A4B686CDEEE6266A8FCB7A4D86> |-/h <1C60D8A8C9B7D61BB788A2B064C4E840D32C042610E996DB8A46CF3A839A8C7DEBC9272B270FDFD2143B6FA6346C5C9F0611823AF67228A80DD9F53E9AFFC5858D2FCC8DA8207013692F0DD8832DE5FFCAC975095D2A0D78246E3089631E23003C792FAA776A4E8AB4AE031EAA25C5FA835697413FB6B052C1FB065A47B4EFBD675A686CB65F0FC3D53BDC6C5130C395F418919ADA35A3C35832CF388359D9C13F37FB071F24F5A9B6E5203D5B020E1242C26D29BF450F68870BEDA0D143AEF40E0275390A90F0D7023CB1B81E4E9AB3C3647AAE88EF646C119D57FD36D1627138CCB9CF1387A9F5320C4EFB8D6210F9ED93EAB795BE502B7C35DE53AFE617446E3B72F95464D5D4755A5A70F4117EB00E7758EC> |-/m <1C60D8A8C9B61FE1CC00FB321C0FD04053FDE61284AD88B6BCD4201750A512B4C9BF139199A268F23FE47E8DF638AF49906F355AFB27C386DDDC3968E4DF4089B8F438584A931261FCD05B527DDDF38084720649EC50BFDD1F2D364D222DD0A65FA36432AF4C1EE9BCAC48D7A8476085521678D56E4924E1E6D6246981C3DE18112BC58B2DD37E5398FCA191271A8B8E24CF47A4FD0A03CF8DDC5A6FCFDE27539E16CDB88C329ECE943DA068291D06AC06E05C55C22EB2DAA93B3636766DC6F13E22D6E9A41D3159E2D0D06762BD05F926AA06B797BDE6958B9FC2> |-/o <1C60D8A8C9B66EAD82F25D31ED39EE0A7DDFA7B55C7BA2E794400C10A0130662C5F8E82F7E3D7F9AA253A6C1E60C8AB371A8529C25D3E1507F3E3116763F3CAFB0B6D440910E7D99072DFBE86753BDCC18E56C6B535FCC9EBEC4384E27282FEA483A72> |-/r <1C60D8A8C9B7C12A21EDBD9CA9A17B54B4BA56616562D0B501C33EB2947F55A96BAAFFE0E8631586CA903B25FC6AC324880E714D6DF230E151165F28F0A3C93D0135C566B855CA186FA80E7F281D39219E85A6D0185EEF9CFF4BA93114E18047FD1608C58E6681BFAE06E356967C83889740779C3FABDAE03145B1D8A1F5335544B1CF5E83260E67476B3D3442C085401E94E7F70C69AE5B91B308DA396554C26D36046E471EC806AD5E619CDF67E7EA54EE335FB4BF3A76885B85FCB77AF92EB17B93BD333B367C8EDC74D27D53D6AF0263CECB60BDA49AB03F184DBA99CB27E93D12581DD957AF513BAC0D6AA8324ECCDCAE68F87157> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQO+CMCSC10 /Encoding getdup 84 /T putdup 101 /e putdup 104 /h putdup 109 /m putdup 111 /o putdup 114 /r putpop%ADOEndSubsetFont
/YRBUQO+CMCSC10*1 [69{/.notdef}rp /E /.notdef /G /.notdef /I 8{/.notdef}rp /R /.notdef /T /U 15{/.notdef}rp /e 2{/.notdef}rp /h 4{/.notdef}rp /m /.notdef /o 2{/.notdef}rp /r 141{/.notdef}rp]YRBUQO+CMCSC10 nfYRBUQO+CMCSC10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 364.656 mo(Theorem)[7.83162 6.11003 5.55714 6.33228 5.99951 5.55714 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf38.282 364.656 mo(1)sh%ADOBeginSubsetFont: KAAAAA+CMCSC10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQO+CMCSC10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B82D668F66C64774ABEBE2BAEBA9A67223DF3BB7843879270A554F1F90435581B1930D> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQO+CMCSC10 /Encoding getdup 46 /period putpop%ADOEndSubsetFont
/YRBUQO+CMCSC10*1 [46{/.notdef}rp /period 22{/.notdef}rp /E /.notdef /G /.notdef /I 8{/.notdef}rp /R /.notdef /T /U 15{/.notdef}rp /e 2{/.notdef}rp /h 4{/.notdef}rp /m /.notdef /o 2{/.notdef}rp /r 141{/.notdef}rp]YRBUQO+CMCSC10 nfYRBUQO+CMCSC10*1 [9.9626 0 0 -9.9626 0 0 ]msf43.263 364.656 mo(.)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B66621C3C37E4F7C930A32D95A206184241AD078128742FD7BC76291D7D6E5950101C52A75A46985C41634B7FAD76A733766D05FF87E75CD9F6C74D7AF47EE8692E6047F510A76AE5067CE0823AD9BDDF5B6686BACBD629BC2750EDAE3D2F01A9B949CA9C240E8B75B836ED8FF6F39520D6C71E53E51BEBCEBD1D5C6B9749E5C23AE9C70323D5E9FB37632182016324A1A622FEF0422C9C447D53D2E8EE8BC946167FF7EF991E5FE8BC02770105FA30A169F1EC8> |-/e <1C60D8A8C9B74F361570F61A35EA78464894B1DA8CAD69B19C3F676A41A6475967ED30A297FEB3CD3D7317CB56BD67ED8BE136EDA10CB5745498DECD970DECEF1ACA52F9039E01C9F5B386033674FAFA84FBC05E576740F2A615DA4003C8F6D0D15EE471656895AD1D665316B1B828EEA1C31E22F55730B1C2314980EB> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 76 /L putdup 101 /e putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [46{/.notdef}rp /period 29{/.notdef}rp /L 3{/.notdef}rp /P 16{/.notdef}rp /a /b /.notdef /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o 2{/.notdef}rp /r /s /t /u 3{/.notdef}rp /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf52.374 364.656 mo(Let)[5.74042 4.58287 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/X <1C60D8A8C9B6B1AB47D89685A77C17777FB04BF82925C538106FAB5E7D8280BA4A81F083C6C6DAB6A15D09F823DF81F301FBB5F67684A507CD4A20BF608F346AD1BCED349D402E2FE4CA529504048A1540283BC408E024093DCA6C54291EF7B03421ECF4CD5EE11FD4EDE884399D3756C7E6E197FFC1440EE0191DF7EFD02C085C6DAB0703B35B31F51F607D266CF7F2616A8F2616D76C1ED47B7A1068D326E811D4DA29CD845B85BE745A0E5BA730EDAFF975CB204530D491F67CCA4390F37F5AFB5F7C193984B7534B0573DCB93DCE937D21B33C628B3109D2E0CC70AFE45C5706A7F9769AF5933A6B40B2BA8BCB55D8D3E7822CDFCF3A25FF5BAD0AF3F75D481C983B549CED59F9E17819C8FC57FAC01152399825B2CA376CF0C2B0CE6D3D82EA4567AF5ED91F7EE225DFB5A02D4E04A716FF0F37B8B656E94BEBA13883749D70E0ABC3C69E2399599A4324F6E17FE1CBEC68382ACE8F4F636752FD13CF420B7F7BF0B27EDAFADAD738BC240575653292DCE4C6DF39635F5DFCD97EDCED865D847FD2DF0A5A1D0EF4BFDB> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 88 /X putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 17{/.notdef}rp /psi 25{/.notdef}rp /period /comma 9{/.notdef}rp /E 18{/.notdef}rp /X 12{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 5{/.notdef}rp /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf71.024 364.656 mo(X)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleft <1C60D8A8C9B703FF2A78A68A31172F76AD4B93C8092FF3E92CDC27BA1D91AD92EF41AAA94A513886C44075E08F012E42C9A2BF340FAE4F85A7B2F00B44787C053EB84EB9ED943836DFF1365A195598E13CBE8230CD5F2272304B62FF9197F9C50E799CFAFAF3> |-/parenright <1C60D8A8C9B703FF2A78A68A31172F76AD872DBE5A7E7D5B07B1B7AFBB70E22E29B34F8B72EF656BE18085FF44704272C32B674E80FC6BE34EEAAD13F7DCD1E5281D0DD2FF576196A4E37054E7F91F14A48E9C71D9C590A5D1667A4F25F964EC253026B8BB0F> |-/m <1C60D8A8C9B6A42636CE49DEB2D32225FCA9494A9ACFDB8B8034FB53659F38D1C3252637DC347F7A180989517839433C475A975BF985AC831BBFF4ECCBAA4558F2DFBDE3F4E6DBD880D12BBA5647F46286224585E9262BC1F4C7A9C887DF4BC8FE39141C0B0F966829F341864D3DA0620EE855BF49AFC86180D524A4A9A86ABA39CA1C71F02EEE187AEB239E6DCE742C2091E1748F9DB9464A768CC8D4CE677CF5B9680095934BF64779EB6FF4E3E7032B42C29A3A90FB96FF1C128EA9BAA5D1FCFA4B821C6E9FDC1247EBAD775BA4CD9A687AF882231D8413607628EEA07E40BA4AD807C5A39C4191B4ACFCFD5C5EEDCFB5366786482F2E1363EEBCFAAB7F70599D01B0110111FEA0627E391524DA63DD3655F37BC2A6B5CE15F87D42BD> |-/v <1C60D8A8C9B74F361570F6157DF4C6B451179203219C7F5C6890653EDBBFF9FFA156A30BFA1DF63D6AE30A84B259E457F7D244A0823E5FDF7C96F07DB244F4AF1C7DB4A817888F7DE4CB131F952D0BEFDB451ABF2D8B19556C4E3FE299B59C957EF17E00404AFB223F4A987443670415D6CD497ACD37960B617B8214F6920D762503E9E0DBEF3C0F444101964CB87AB73B> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 40 /parenleft putdup 41 /parenright putdup 109 /m putdup 118 /v putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 29{/.notdef}rp /L 3{/.notdef}rp /P 16{/.notdef}rp /a /b /.notdef /d /e 3{/.notdef}rp /i 2{/.notdef}rp /l /m /n /o 2{/.notdef}rp /r /s /t /u /v 2{/.notdef}rp /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf85.076 364.656 mo(bearandomvariable\(r.v.\)over)[4.07477 9.60402 10.103 3.69321 5.09183 5.60092 5.09181 5.09181 13.1685 4.58286 5.09183 4.20129 3.05554 5.0918 4.58289 2.54642 9.59406 4.07376 4.20129 3.05554 4.58289 3.05554 9.09491 5.0918 4.58289 4.58286 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/seven <1C60D8A8C9B7883C4DBBEE7651522C203A9CD577A7F44C212AADA26DE79483DB4BA84370C5052AC85CC536E8205353FB4CDCA27D3BCC5CC873EAD63D96B5E2D313D6> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 55 /seven putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two /three /four /five /six /seven 200{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 364.656 mo(7)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/c <1C60D8A8C9B74F361570F61AF26B11104E7939A2FC8050B546DF12C11F68F9A24B73E15544F94136A9F15970ED39EEFD084CEB1917007486B51EDD22EB5CA5A0FFCAC108B7BAECC313805D4C82C3427E1DF82EF05BF9DAD6A12A3B69EA96E386A88FFA3760B208B6CA3B30E5D3F463DB7A3E9036950AF2C217> |-/g <1C60D8A8C9B74F366EF54586A3F5C8322BB889E642426E80A3F7F81AD135BBF602A609DAB87F3A2C1AD2EA5B21541AA9F4C5242C2AE759605C8BC83EA580F220A042546A9724DB907E0450ADBBBF8E620CF5A50697DD7DF6050C791B51193D4F1AE4917D9AC57C3E62F51EA63039DDC5C82C72FC828251E8C2FAFD9AD9FD74D8593E0179C51536B3D9EBC2FD89E581063718D81C63F662F7148CE8537A58F8D69711892464DEE8BB85AB08FB63EA25F6A9686F2C8416470C71CDDB5D257B2223E6ACBA9D8D11925997F8023CAE4F9A69DFEFA06E7CF93E932EC59F> |-/h <1C60D8A8C9B7BC12CC2205AD24A1CC8B5FD1BB19F1877C9EA8039FA7945D91C3D37041CC274AB5F982C4EFFE46C2F7CAABB042730C2C7A5EA610065D5D82B3FE7DB538BF057E790E5AF077392983F88FEF910E78CB3FEF763BEA31E902E94C8B40CEDAFEEBA713FCACDA58AF62B9B2FC1BD0402E06F9609D5C6231CCD0D6BC9877090A73D17EB5E001457E6269837E624AD5E68171D08C619C5718E06E15178B3444FF04D2CE5C88E1BC54F06766BD62272C504B9237169E93078F6A22D2A48E1F5A19511B71FFE86D43C85E08C3056633E95081708404> |-/k <1C60D8A8C9B74F361570F61A374EE26E7A30FBC9481064CAD56D646F4069F07A020AEE615EDC29605FFDE522B040448752846FFA787EC771235849F6DCE8457E92787BC5BF342E15D12E867306DBC255E4BCD95B9EDBB6D2B8499589ABF5C1FD9214DCE05AB06A44DF5B308CC02AFF9F70DA0E9C329504D8920A5C099569FF14FD43CA31A8193E4A44A9184B14A1A280E71BA4595FA7B42180DCF9473BB8C5886D0ED55119DF0132977706835401A8E420161D6C478003B5F35925F46F4B7AB61B60F30A96D7AE22DA3E8C581A55DA52A431963396D16C57DB6E7BA70700694833BCFF852159592617BD75F74CC20C8065D78F8355A79DF5AA6E9A3C054BF745C8C4> |-/p <1C60D8A8C9B7BC12B7C2F7FE68B02AD0ED65B01991B0EB3EF21650944A568BBFE9E4330679E813849F62869BFDBDDFBC6CC5ACEFCE11FDD757C74D0ABF6120CEC1123ACC3D922BF1AF39E9466244D91C443B580631E90EDE6556051D6E3085E13CC42222D3CB9B6293C7C576004AF2B496B6234F98F07C2C9A15B9F91982D98978E42A4A84D16CB1ECE4A59DC935D51141183EE34B05FDA26A26740E93F16739599F9A3EC440DB9E9FB69F742AEE91215D7D378FE2E85D6748D7011DBACC6337F7F2EF41A9562780A86FE60A0205A81C1F8BC707269E8A1FDAEB220A784B099023F080F8E44788D97E8D> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 99 /c putdup 103 /g putdup 104 /h putdup 107 /k putdup 112 /p putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [40{/.notdef}rp /parenleft /parenright 4{/.notdef}rp /period 29{/.notdef}rp /L 3{/.notdef}rp /P 16{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v 2{/.notdef}rp /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 375.615 mo(orderedrankedtreeshapesanddistributedaccordingto)[5.09182 3.69321 5.09181 4.58286 3.69321 4.07478 9.58495 3.69321 5.09181 5.60094 4.58286 4.07477 9.59491 3.30957 3.69321 4.07477 9.07599 4.07376 5.09181 5.09181 4.58374 4.58286 8.57684 5.09183 5.60092 9.59491 5.0918 3.05557 4.06378 3.31952 4.19135 3.05554 4.58286 5.34692 3.30954 4.07477 9.59491 5.09183 4.07477 4.07477 5.0918 3.69321 5.09183 3.05554 5.60092 9.07599 3.30957 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7883CBACD30F93845E8E4FFD3BA95184399EE9CBBA7FB81F89D5E8AD1DEAE0D53A26968E620DC3450183C92B4C2823915F4D2E75C69972BC62E22481598DC99585CF341106232D18D969461EF9C01C6EAF0AB2B36ECF86B240242EA97C5523F9360209BDF5409B4B025DD36B6929BA7244B2FE22D613F327A9463CFD8A38CEC> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two /three /four /five /six /seven /eight 199{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 375.615 mo(8)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B807CA4C948CB38D5C02AC0B4DF2F5542ABAADA92EBE6FA88D0B7967EF3EDEAABE0FF38A4D281A3F0B701DD8DC15ED509C914B7D638D5F618B805D> |-/w <1C60D8A8C9B64D095AF631FC30FA4D2177BD322003FC2307A9C0D2B93E799096791AD0D742F8ABCA4EA498E0AD3EFFB13C75D959EB074DFB95BBDB676E2BD2EC6930C64E6E2925A3C4BA15C61A3CD868DCCFD176BA30B8F0F3E90B96BB8A27A3E77A62D47C36C017EF429F542CD8ED3B6DDD29DE63D84D163E4794CDD8553531B89D048DA64960CAA5DC959CFEE853998CA15BF22935083FF8F46A930EF87169BCFF72117AFE7C990B4E420CE3587EC55D7AD02CB466D65512E98DD5A3D182C60B511301AC697D023E42A1085040EB7F1631B71E23FCC4D9A68A81036727B3D57F8E543ACFAF2A> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 45 /hyphen putdup 119 /w putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [40{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 29{/.notdef}rp /L 3{/.notdef}rp /P 16{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 386.574 mo(thedual-birthmodelwithparameter)[3.30957 5.09181 8.14948 5.09182 5.34689 5.09183 2.54643 3.56465 4.58286 3.05556 4.20129 3.30957 8.64845 8.14737 4.58372 5.09181 4.58286 6.11307 6.61913 3.05554 3.30957 8.65843 4.58371 5.09183 3.69321 5.09183 8.14734 4.58289 3.30957 4.58286 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/r <1C60D8A8C9B7784785BA933B683516E90CE9BA44EE0AD4F9389DB0FE469800FC3E28873D9258115E0458EFC365CCEF56682184C482125DC01A539285E10445F4534E20E8D0EB40B3D4233CE15FD988201C2047B01E957E08B822EE3732A9F139E7F02289BCF38C117B85ADC425D90A51C1BB0D78A3069181F2B1A441B41684209DF543606AE295EB1AD8E9C1C8DDC847E6CE42266AC25FB6F47EE50E72B02B7F66908EBA> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 114 /r putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 17{/.notdef}rp /psi 25{/.notdef}rp /period /comma 9{/.notdef}rp /E 18{/.notdef}rp /X 12{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf147.031 386.574 mo(r)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf152.909 386.574 mo(=)sh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/lambda <1C60D8A8C9B7F44A4516FD5182673257BB2AA93B3AFC1C0AB39AFEB7D4DC9C128E26263CC14C360DCBB92B58BA5CAD00278A7EB45D3C926592F2863FBBEE111C5ACD19DCA23E0A40DA96F8F4ABEC0CDDEE49A9B2B25B3CF20133C8C2DDC3E657FAC1B793DD2399D11A20378D968A313EA56468657298A8760C> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 21 /lambda putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi 25{/.notdef}rp /period /comma 9{/.notdef}rp /E 18{/.notdef}rp /X 12{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf161.765 386.574 mo(\025)sh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/a <1C60D8A8C9B7E7C1D918A3B15153CA6B5BE26AE31C56C5E8EA147D01C98368E0C774FEAB8136CD368DF727E03257E5108BF84C2D8D8BD9710B792E65504AE02BFFB732B2935D897B359F51D188DDD7C8496A2490461FC4585D3CE7BD48C41FC35A3D5C9D095E8DFCC2B54439D2B6C3F1E218533BDCF0B13CFA530C61605C86AA1F97863E14F7B27D0446707834C59B38D21B8A32336B60DFB978E5A44F1D23522E972F9658B60ED49D68A3FE186EF364D06B75928D07F32B> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 97 /a putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 11{/.notdef}rp /omega 27{/.notdef}rp /slash 35{/.notdef}rp /a 7{/.notdef}rp /i 8{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf167.577 388.068 mo(a)sh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/slash <1C60D8A8C9B7A73DB56225352A24C6E389DE2B55CA07FB5710C6DCAE04F94BC5CAA5785E17ED28271B55834262FD3846E502CB37AB886C6947131546D475C5E688F02E31C309> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 61 /slash putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi 25{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 18{/.notdef}rp /X 12{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf172.573 386.574 mo(=\025)[4.98129 0 ]xsh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/b <1C60D8A8C9B775D2CA794183E8A400C7BDDE8590B1CEC0C6F2D15B6CFA2AFE65174D02A949C7059CA560FD994877E653AE65D3B93699AF6503DA15CE0901289413AC4AEA05C87296A8BA5DB19A993847A44CDA8E05634E15E910BB594D039074FDAC407794FC6DE5314076785B8B4799B4B7A82C77AB95CC89F5490689FA12BB8562D10E68BB15C26A403BD9F4A7B224FBB77806E7C60DA693782A36FAECE0019737FDAE3EEB41C78BAFF90B1E> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 98 /b putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 11{/.notdef}rp /omega 27{/.notdef}rp /slash 35{/.notdef}rp /a /b 6{/.notdef}rp /i 8{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf183.366 388.677 mo(b)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/comma <1C60D8A8C9B83844C7804A67513EBCA641B373D6F97CCB6D48793F0C7F4A574A6B948D1A90B56C6508F64816A05473ADF338AE3783D5188233304CA5D54630FDEC3337D0517C420C5A8DC874C8724FB4761FBFD2> |-/T <1C60D8A8C9B63EE6895172FDE94FAE9E6008DAD196014CFE42FC535F62A0EDEF44C9126A3B44A96905DD1C7AE848EB18D03C409CB42C9FC93B8D77E90B902031E1EC020C2A19B41E6B38530F11FF03B28739645FD8E0F627937A572499637C4871186F9CFF0695A07033E9EE61BF1B697F946BF1108B4E9C291AD6CB1BCF52E7FC90B8E76BC62DD55592DD2E9895925E37A2FDF2DE3CC895F2062E502F62D08081B6029D6A8435D0712F2E35CDCEDD35AF565B347EBCC89E15FB6EB41B91F1482793594F29260CB97C04AEC283EB08BBD122871229E068529A3F76BBBC62FB537C6F7084B24A77EEFA5E33B02E10543B1E7CC9308510> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 44 /comma putdup 84 /T putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 29{/.notdef}rp /L 3{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf187.486 386.574 mo(.Then,)[6.62216 7.1293 5.0918 4.58289 5.60092 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/nine <1C60D8A8C9B7883CBACD30F9B872676EB842292BDEF11E3B363F736459EBA871FEAABC60F31708CDE2830680E85D3C6A47F799DDF25FBAA7A19E4AF979352C0CE441A0CCBDE9468FC3ACB293E8BB4C55CE94E04E6C1E8B5D71C80B3DDCFF11876F5DB328DFB0F467DAACC4254002EDEFCAC444F81BAB9E75B0EBE587039EA4C20A5B82B67A5386AFA94A60BBE019AC581F44351BBFAAA70C> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 57 /nine putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [49{/.notdef}rp /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-24.575 386.574 mo(9)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf25.623 411.032 mo(Pr\()[6.78058 3.90228 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf40.18 411.032 mo(X)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf50.322 411.032 mo(=)sh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7F374F51331DE989AA9F200DE63C965C7DB9A883105F71833EA122E73E2F14130A13D3A5B1CF10D069EC51DDAA33E39B30160C5EE7F0534BBE4FF1C97D075374CF6585E4F1B720A9731A475996B17B3955EF13A0C5E7C4FEE1FA8945D6AF2998E170EC6DCA7E3155204CA87D89BA0D1F343E47DFEFE1232C81271D69E981FC44592F02DB39DF8EEE7FBF6A2F7F7BD23510BD1001585549FD4FECC7B9134C3F0791676FF681F69B8585EF81183FD1F39BACCC6FF1897B35161BFC69976ECCD4A163D2711D32D3E63B7BDDA7FD198320E4247B2C27A2455E210D0EBE8733A9A3F9280EB5E78CE6609D9AA0AADC3AA96> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 84 /T putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi 25{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 14{/.notdef}rp /T 3{/.notdef}rp /X 12{/.notdef}rp /e 3{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf59.178 411.032 mo(T)sh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/psi <1C60D8A8C9B62B9496E019071B12E600D66E680E3F2DF79D6C822D1C8B8D8FB22F28B1159DB606DB8C8B8EA16CD7F62CE2A3831F82BCD904FA25D396656724F607EAFF8BC2FC07D6747B7F465D83C75DC2A2A03BA4E2A6FF01D2ED5BC85AC9ED97191BC89450CB4C2361DE3DDCCB0D5A4B97599A051EDEAD0953AD89A2AB1A6CD8640C8B84DAA74DEB5A3820248E0D348C609BF53DDAFD7A747D05F7B74180311965EEFF1DE125B216324E1FBBFB7DA87E0AC98C4E5821FE700F340F5562087E6B2108CAF8C2C08ADD43B443924328F4963ABC6F7BBBC4013144> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 32 /psi putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 10{/.notdef}rp /psi /omega 27{/.notdef}rp /slash 35{/.notdef}rp /a /b 6{/.notdef}rp /i 8{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf66.384 406.918 mo( )shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf65 413.495 mo(!)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/semicolon <1C60D8A8C9B85744148CA332C8F6F1C94E59D648AFC4A02AACD3F0793E25CDABCBB77F4BB44FE3F4D5E4706EE1A5212FFB26A746685B846624FAC81EA613CECAD9E8FFF8094DC8103D4F6B92DA1A84899EBAA4B5172735D8D430ECFDA89F059B18FD4A523BC256E35F5DBB198206FEEF2F6A2DE48D9CEBB338B9AD074B> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 59 /semicolon putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon /semicolon /.notdef /equal 8{/.notdef}rp /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf72.703 411.032 mo(;)shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf76.024 411.032 mo(n)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf82.003 411.032 mo(\)=)[4.98032 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf132.367 404.292 mo(r)sh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/n <1C60D8A8C9B679735CF591AC0735064CCD1C8690DCB8FA18163F603A770B46B213E2B9C19C696470FB8263894CE86AF7D936BFEA1E6EC01B739C633454E04FDD9F1FC0CDBA63AC48652D31F5CB4165BFF7F9949F6C36AB89EB4AFE6AB798AA2DC5DA7D8FB4A86B6A90222D5784A96FF63AAF565EF005B3E12EA78FBDD09E7F20C18656C7555E96DDD2431CA1EDF9682FE641EAC3DCB1B379ADFDDE32A0816C34DFAA495A67B1B848C924F3EAA51012F9BF45710543F7EFB8E18C6EB0B22BE1DD032083B71C0B7A96E9CDD3D6DC6D55A0AF9B16A0592EAD319AA2A76CD94D> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 110 /n putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 10{/.notdef}rp /psi /omega 27{/.notdef}rp /slash 35{/.notdef}rp /a /b 6{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf137.138 400.677 mo(n)sh%ADOBeginSubsetFont: NBAAAA+CMMI6 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQR+CMMI6 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/r <1C60D8A8C9B7F88C5D724962504B41469F612CBC207569F58970ADFEC88D4BB9D6301DCC0257D057CA947F3AB44DF297A994B1DA26124B802861C1E3BB8892B8B1F64FE3292DDF2F90397048FAC357C8CA008FBB74D311AC182F6413E56567A171CE289044DF07BA961E7301C9FCE15F26336D17E53E0CA5484BA19F32A6D36989B1ECCF5A586B7C3D3CFE0C6CEFF283CA21E5E8789F7A94CD32F897526DBCB679476C30C8259A216AE8C12315> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQR+CMMI6 /Encoding getdup 114 /r putpop%ADOEndSubsetFont
/YRBUQR+CMMI6*1 [97{/.notdef}rp /a /b 15{/.notdef}rp /r 141{/.notdef}rp]YRBUQR+CMMI6 nfYRBUQR+CMMI6*1 [5.9776 0 0 -5.9776 0 0 ]msf142.277 401.673 mo(r)sh%ADOBeginSubsetFont: MAAAAA+CMSY8 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /MAAAAA+CMSY8 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMSY8.) def/Weight (Medium) def/ItalicAngle -14.04 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /minus putdef/FontBBox {-30 -955 1185 779} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-24 0 683 704] def/OtherBlues [-138 -126] def/BlueScale 0.039625 def/StdHW [46] def/StdVW [46] def/StemSnapH [46 64] def/StemSnapV [46 64] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/minus <1C60D8A8C9B6AF0419502F0B46EFB77EC38C01C2E25D7B0EA39836426B430D970F7BA4890A3369B5894E1D421F84> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQW+CMSY8 /MAAAAA+CMSY8 findfont ct_VMDictPut/YRBUQW+CMSY8*1 [32{/.notdef}rp /minus 223{/.notdef}rp]YRBUQW+CMSY8 nfYRBUQW+CMSY8*1 [7.9701 0 0 -7.9701 0 0 ]msf146.435 400.677 mo( )shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf153.021 400.677 mo(1)sh.398 lw
97.036 408.541 mo
193.085 408.541 li
@
%ADOBeginSubsetFont: HBAAAA+CMEX10 Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /HBAAAA+CMEX10 def/FontInfo 7 dict dup begin/Notice (Copyright \\050c\\051 1997, 2009 American Mathematical Society \\050<http://www.ams.org>\\051, with Reserved Font Name CMEX10.) def/Weight (Medium) def/ItalicAngle 0 def/WasEmbedded true defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 81 /producttext putdef/FontBBox {-24 -2960 1454 772} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [-20 0] def/OtherBlues [-1159 -1139] def/BlueScale 0.04796 def/StdHW [47] def/StdVW [47] def/StemSnapH [40 47] def/StemSnapV [40 47] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings2 dict dup begin/producttext <1C60D8A8C9B5D6EF4B8B2CDF9B85BB79D04D0B4AE5B435AD006695C24413076280DB9FB445134A47EBCFEA3281F6302162AEBFAA8C8C8136834C16E16A0D3F2685F51EA2E16F374F16E251F7864EC742978E40A267F2E8AEA34E56DC7F> |-/.notdef <1C60D8A8C9B7A73D40> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/YRBUQX+CMEX10 /HBAAAA+CMEX10 findfont ct_VMDictPut/YRBUQX+CMEX10*1 [81{/.notdef}rp /producttext 174{/.notdef}rp]YRBUQX+CMEX10 nfYRBUQX+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf97.036 411.917 mo(Q)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf106.445 415.072 mo(n)shYRBUQW+CMSY8*1 [7.9701 0 0 -7.9701 0 0 ]msf111.583 415.072 mo( )shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf118.17 415.072 mo(2)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf106.445 422.765 mo(i)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf109.328 422.765 mo(=1)[6.5865 0 ]xsh%ADOBeginSubsetFont: HBAAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQX+CMEX10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenleftbig <1C60D8A8C9B771A8FC178EACCC89B42393999469B215D1D6732CA39F37741DCC22E6FD6AAF779E2FF5D5FC7F991D581BF2CDD85BFD81B6D9C9004CBD0A104E513DAA7DE774E9250727AA38D48D196B9BD33DD37CAC7A007E4D9AE783D200BB65F6EB5DF7634ADF48D840C62A7590F737EF0BDE92D4> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQX+CMEX10 /Encoding getdup 32 /parenleftbig putpop%ADOEndSubsetFont
/YRBUQX+CMEX10*1 [32{/.notdef}rp /parenleftbig 48{/.notdef}rp /producttext 174{/.notdef}rp]YRBUQX+CMEX10 nfYRBUQX+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf123.455 411.32 mo( )shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf128.022 419.389 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf131.896 419.389 mo(r)sh%ADOBeginSubsetFont: GBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQT+CMSY10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/minus <1C60D8A8C9B6FC2D98F64FA8A84856380510A8B89CD4DE936C2002F9CA66334C70459EFC1D8016D52F4ACC8D584A> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQT+CMSY10 /Encoding getdup 32 /minus putpop%ADOEndSubsetFont
/YRBUQT+CMSY10*1 [32{/.notdef}rp /minus 17{/.notdef}rp /element 205{/.notdef}rp]YRBUQT+CMSY10 nfYRBUQT+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf137.498 419.389 mo( )shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf146.077 419.389 mo(1\))[4.98129 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/l <1C60D8A8C9B840B0A5D589BDA4C311648D785E3242291920D778475AEECC9F1A47C3B85F0B92FDDC60D6AE2807C1C14CB8BD6DF09FFA084595421BE1DB1550A932603EB271999DB47E6E040FD73D8DD2D1B0BEEFB752DF28288706B38D5832AE2B421B49506BC0AAFB562D2B4AFD32F3D41DD54529A7D3> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 108 /l putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi 25{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 14{/.notdef}rp /T 3{/.notdef}rp /X 12{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf154.932 419.389 mo(l)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf157.905 421.227 mo(i)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/plus <1C60D8A8C9B6FC2D57823F96FCEAA42600BD46AFBB76FB6FF2C168953BCB7FF7D0E7F5CE3217809FB248485B096C8249504CD271987061A868385A7E2BE1F08F0D0B8329FA5B5F11EC03D020ECC8A0457ADD9A63765A60296998F5> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 43 /plus putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon /semicolon /.notdef /equal 8{/.notdef}rp /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /.notdef /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf162.116 419.389 mo(+)shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf170.695 419.389 mo(i)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf174.958 419.389 mo(+1)[8.57584 0 ]xsh%ADOBeginSubsetFont: HBAAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQX+CMEX10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/parenrightbig <1C60D8A8C9B771A8FC178EACCC89B423939994C54176FE557061FD48AD5D03856B1696274E9312795C392B3704CF2AFC4D002D4073DE60430DC65CFA5167C1D98FEA7F972473D6D949F5B216B347740B048DB3CDC4D42AD25B645555E489AE6C0BF273A0A4AF116BCC284D4E3FC74304E4C13424A55F> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQX+CMEX10 /Encoding getdup 1 /parenrightbig putpop%ADOEndSubsetFont
/YRBUQX+CMEX10*1 [/.notdef /parenrightbig 30{/.notdef}rp /parenleftbig 48{/.notdef}rp /producttext 174{/.notdef}rp]YRBUQX+CMEX10 nfYRBUQX+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf188.518 411.32 mo(\001)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf219.139 411.032 mo(\(1\))[3.87445 4.98132 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6079FE0EE62D79560027BBBCB170A7709037203D620100C78000AFC53792FD4192A63CFDE4C7CCFBBF640912DE1EA497F0D0E9CACF7B554590931F67EC30C725B283FF8701F318F6A51E9DAFF6E43D2B77ABC7C9D046D0346C0BC1B195971779D6643699369A8474D056C5265E53617DA697597540B11F4760D558D2A79BC5EEE54EC8A8FB0679FBAC9400141E54057CB9E273F1EF671A5379A4BB4B27EBB1E02C7> |-/E <1C60D8A8C9B65DE708408E894B780C980FB3CD0F5A2C0BEF23E5114F36C909584A712E7AFDDA2F26FF878CC11EDE914164339F97B59F3659C5E3C5144DA79350C562BF05A1FC95A59765A840A579FDEA86DCEB7F99647561868501F99D35BFF4F16CE8CFA6310AD24B7256C45B06ACB6DF245FF3654675E2E019899536DE4452B0D6D01DB1C11617465A> |-/q <1C60D8A8C9B78C66EF5247F5707C9C7401D463F3DD83C2E21DFAE96BA5869F86EF6F51AF0B5F762AE3BB0D8E1C7478B2802678D1830DC7ED9855E0146DF253C5040BF957DE781BFD2649856A22B81BAB60DE0851507882D2678BCCF4FB73FA11E61E10F9FDE35F239CEBF1BA14BA289F2351A51B0529E375EDA96C3901BF06DF76F1DF130B9C42F8C080B5241230FBA0F56D04C3DEED8F2B384970176DCFF7B73356B0D69453B4B4B22EA1DCE13756B7E36E6D00D130EC17FD408B948E6F6DADB60E1BC224E21D91FA057FD171AA> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 67 /C putdup 69 /E putdup 113 /q putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i 2{/.notdef}rp /l /m /n /o /p /q /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-2.00403 435.132 mo(ComputingEquation)[7.19498 4.9813 8.30181 5.53525 5.53525 3.87447 2.76762 5.53525 9.6438 6.77061 5.25829 5.53525 4.98129 3.87447 2.76762 4.98129 0 ]xsh.930816 .793027 0 0 cmyk
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf95.7323 435.132 mo(1)sh1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/k <1C60D8A8C9B78C669F28CFA812DED6139D7D856991235AB6C4AFC31BCD273487675BD2F1E5E12A90601E8813F546F4A251C2413363ED229861B6D9BB803DB05AFBD87A0BDB30ECAF79A6D7790B485108229A8E37CE114792148894516FD35B349631ABB537005E1976FEB58ECAFBA15317EB352D3CF9CB33300F195FC223A3F6046CEB2634BEBCF6E3727F7EE5A302BE446437A812155B254724D2537EB005F67E4A1C637E1D0B04296D89278AFEA4370D60C606D50CD21C194036AA2B3138CB3CBC2A27B2F6A619F68A923473FE4640A1DEB3A1DC3C48F4614D31FF09A626A640D3780A65E6F12B49D1B402046EDA42CFE7231C1BAE09391B8A756CE69E> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 107 /k putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four 2{/.notdef}rp /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf105.376 435.132 mo(simplyrequiresknowingthe)[3.92918 2.76762 8.30182 5.53525 2.76762 9.91081 3.90228 4.42734 5.2583 5.53525 2.76761 3.90228 4.42737 8.59167 5.25827 5.53525 4.70233 7.19501 2.76761 5.53525 9.63385 3.87445 5.53525 0 ]xsh%ADOBeginSubsetFont: RAAAAA+CMSS8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQU+CMSS8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7883CBACD30F67524603123C94ACF1266C6D43609E84B52BFCC315F5FC5AB16BEE83EAA8D8F11D9F3FFAE608CAF190616F90729F2FD97672991410C5F02EFF6708D830348D9ABBD6955CC6575B79C2D9A906112F330CA55075BB6658BBC00E92BC0198A8B76F727EBD19E05A88841223D8A4E1AB5D8335D8ABC8E38940FEFEB0A8E> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQU+CMSS8 /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/YRBUQU+CMSS8*1 [48{/.notdef}rp /zero /one /two /three /four /five /six /seven /eight /nine 198{/.notdef}rp]YRBUQU+CMSS8 nfYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.222 435.132 mo(10)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.966 446.091 mo(numberofrightleaves\()[5.25629 5.53526 8.02286 5.81421 4.42735 8.20612 4.98131 7.33847 3.90228 2.76762 4.98131 5.2563 8.1783 2.76762 4.42735 4.70235 4.97932 4.42735 8.23303 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf96.11 446.091 mo(n)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf102.09 447.586 mo(r)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf106.645 446.091 mo(\)andthenumberofitsleft)[8.16835 4.98129 5.53525 9.8391 3.87447 5.53525 8.72122 5.25629 5.53528 8.03281 5.80423 4.42737 8.20612 4.98132 7.33847 2.76761 3.87448 8.23303 2.76761 4.42737 3.04459 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 446.091 mo(11)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 457.05 mo(branchesifthetreeisterminatedateachnode)[5.53525 3.90228 4.9813 5.53526 4.14839 5.53525 4.42735 6.24051 2.76762 5.34596 3.87447 5.53525 6.73868 3.87445 3.90228 4.42735 6.72871 2.76762 6.24052 3.87445 4.42735 3.90228 8.3018 2.76764 5.53525 4.98129 3.87447 4.42735 7.83661 4.98129 6.18579 4.42734 4.98132 4.14838 7.84659 5.53525 5.26025 5.53525 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf186.103 457.05 mo(i)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf191.842 457.05 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf195.716 457.05 mo(l)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf198.689 458.887 mo(i)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf202.07 457.05 mo(\);allof)[3.87445 5.07895 4.98132 2.76761 5.069 4.98129 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 457.05 mo(12)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 468.009 mo(thesecanbecomputedintime)[3.87447 5.53525 4.42735 3.92919 7.4261 4.42734 4.98131 8.53398 5.81421 7.42609 4.42735 4.98131 8.31177 5.5253 5.53525 3.87445 4.42735 8.54396 2.76761 8.534 3.87447 2.76762 8.30182 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/O <1C60D8A8C9B6EFA8B3C8E5DE8ADE1B3772B09F0C86DA9D38F70EC31C78724DE04FCDF670A08613C29A14CFC2A8FD69ABAAD7C26F51FD45A77C4E4C1FA131263926A0478B2BEEF8A0D66DC6548DF5CED76276254BD5D6ACF7B589BB2D96502C12C44E6257BF1B2971EF845D19561CCA1370> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 79 /O putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi 25{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 9{/.notdef}rp /O 4{/.notdef}rp /T 3{/.notdef}rp /X 12{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf123.708 468.009 mo(O)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf131.584 468.009 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf135.458 468.009 mo(n)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf141.438 468.009 mo(\)foranorderedtree.)[6.8732 3.04462 4.98129 6.90103 4.98129 8.534 4.99124 3.89233 5.53525 4.42734 3.90228 4.42737 8.54395 3.87448 3.90228 4.42734 4.42734 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 468.009 mo(13)[2.64655 0 ]xsh1 /0 /CSD get_res sepcs
1 sep
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 478.968 mo(FigureS1showstheperfectmatchbetweenEquation)[6.5036 2.76762 4.9813 5.53525 3.90228 8.11352 5.53525 8.6575 3.92918 5.53525 4.71231 7.19498 7.61534 3.87448 5.52527 8.11353 5.81419 4.42735 3.90228 3.04459 4.42735 4.42735 7.56062 8.30182 4.98129 3.87447 4.14839 9.22142 5.81421 4.42734 3.59552 6.91602 4.42737 4.42734 9.22141 6.78058 5.2583 5.53522 4.98132 3.87445 2.76764 4.98129 0 ]xsh.930816 .793027 0 0 cmyk
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf226.891 478.968 mo(1)sh1 /0 /CSD get_res sepcs
1 sep
YRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 478.968 mo(14)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 489.927 mo(andobservedfrequenciesinsimulationsforallranked)[4.9813 5.53525 10.2775 4.9813 5.53525 3.92918 4.42735 3.90228 4.97932 4.42735 10.2775 3.04459 3.90228 4.42735 5.25829 5.53525 4.42734 5.53525 4.42737 2.76761 4.42735 8.67139 2.76762 10.2675 3.9292 2.76762 8.03281 5.52528 2.76764 4.98129 3.87445 2.76764 4.98132 5.53522 8.67139 3.04462 4.98129 8.6445 4.98126 2.76764 7.50983 3.90228 4.98129 5.53525 4.97934 4.42734 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 489.927 mo(15)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 500.886 mo(orderedtreeshapeswith)[4.9813 3.90228 5.53525 4.42735 3.90228 4.42735 8.64359 3.87447 3.90228 4.42734 7.53569 3.92918 5.53525 4.98131 5.81419 4.42737 7.03751 7.19498 2.76764 3.87445 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf97.8039 500.886 mo(n)sh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7A73D3B2B97FE394CF5175EFEC06CD8F59A375E41591273E0C059123310EC79AE072F532A0C9DF11EDCF7D4B9D83F0A2FCBB058CCF95C0FF8BAD8605C0C2E8D60E28BE3D0E0DD42D8AAC3094E7159CC3989179C22CC5AA3B3825C4ED9C5A83B733BA4666CE2A2B0097F22D25C776953D494478010B9DD2B5DC520FCB2B0B7183A59B91F9C6B76BCB8A8CE135881FEEEB2BD853CC29FB7FDF436E095CF25C0CF3D1030E991D37D2BB2A05DD251695665BEB980DCF70EB0EFACB10E78F2D22C879E92110E4963EE6051EA84F4D334> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four /.notdef /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S 2{/.notdef}rp /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf104.891 500.886 mo(=6andshowsthat,with)[8.85477 8.08965 4.98129 5.53525 8.6436 3.92917 5.53525 4.71231 7.19498 7.03754 3.87445 5.53525 4.98129 3.87448 5.87595 7.19498 2.76764 3.87445 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf216.028 500.886 mo(r)sh%ADOBeginSubsetFont: GBAAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQT+CMSY10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/lessmuch <1C60D8A8C9B5EE31B34ACAC9E88C39EAADBAD0A09377618C3B3FBC2529306B46B893C1B8736A3B324C2D354470EE3F658783B61C4B79350A9F4170A570300C5EBC15B73A3D915FC10C8C7F718E5265518F7622510ACF108813424FC9E44958DE0094D57BF94E07D6DAB4FF403E7E35A52FDEAF22A466ED7A0130A630997D21601066E8C6BC94E0274135820E9E0C03F50574A2406E40A4C65AEDC6ECB252FEE7DBAC> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQT+CMSY10 /Encoding getdup 28 /lessmuch putpop%ADOEndSubsetFont
/YRBUQT+CMSY10*1 [28{/.notdef}rp /lessmuch 3{/.notdef}rp /minus 17{/.notdef}rp /element 205{/.notdef}rp]YRBUQT+CMSY10 nfYRBUQT+CMSY10*1 [9.9626 0 0 -9.9626 0 0 ]msf221.907 500.886 mo(\034)shYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 500.886 mo(16)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 511.845 mo(1,thecaterpillartreeshapehasahighprobability.)[4.9813 6.08517 3.87447 5.53525 7.75485 4.42735 4.98131 3.87445 4.42735 3.90228 5.53525 2.76762 2.76764 2.76761 4.98131 7.21983 3.87445 3.90228 4.42735 7.7449 3.92918 5.53525 4.98131 5.81419 7.7449 5.53525 4.98131 7.25668 8.29884 5.53528 2.76761 4.98129 8.85278 5.53528 3.90228 4.98129 5.53525 4.98129 5.53525 2.76764 2.76764 2.76761 3.59549 4.4314 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 511.845 mo(17)[2.64655 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B6079F3ACD50B6173265EE696B04F433123BE8FE6957F3B6028924B7831F62749F61057E47C9AFC439E5FE9774BDBA95D8780F15E99A2D6DBC842E367191628A2E402043835AC8FDE6AB93164DF41C7446FAB279D3EB9C66121877CB11D6A7077E1EA3F211DD4775AFAF95572B45BD0445F00DE2D6FF03CC09F95A7375F8A1A506648567695D81EAA6869AE211E13B3028937B3B39284DCE> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 84 /T putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four /.notdef /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-2.00407 522.803 mo(Theleft/rightorderofnodescannotbeestimated)[7.19498 5.53525 10.0961 2.76762 4.42735 3.0446 3.87445 4.98131 3.90228 2.76762 4.98131 5.2563 9.54318 4.98129 3.90228 5.53525 4.42735 9.571 4.98129 8.71333 5.53525 5.26025 5.53525 4.42735 9.59792 4.42735 4.98129 5.53525 5.53525 4.98129 9.54321 5.81418 10.0961 4.42734 3.9292 3.87445 2.76764 8.30182 4.98129 3.87448 4.42734 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 522.803 mo(18)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 533.762 mo(fromsequencedata,andthus,itwouldbemoreuseful)[3.0446 3.90228 4.9813 12.3666 3.92918 4.42735 5.25827 5.53525 4.42735 5.53525 4.42735 8.50206 5.53525 4.98129 3.87445 4.98131 6.83237 4.98131 5.53525 9.59998 3.87448 5.25629 5.53525 3.9292 6.84233 2.76762 7.93921 6.91602 4.98132 5.53522 2.76764 9.60999 5.80423 8.50204 8.30182 4.98129 3.90228 8.4921 5.53528 3.92917 4.42734 3.04462 5.53525 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 533.762 mo(19)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 544.721 mo(tocomputetheprobabilitydistributionoverunordered)[3.87447 8.91652 4.42735 4.9813 8.30181 5.53525 5.53525 3.87447 8.37254 3.87445 5.53526 8.36256 5.53525 3.90228 4.98131 5.53526 4.98129 5.53525 2.76762 2.76762 2.76762 3.5955 9.19351 5.53525 2.76762 3.92918 3.87447 3.90228 2.76762 5.53525 5.53525 3.87445 2.76764 4.98132 9.48041 4.70236 4.97934 4.42734 7.83749 5.53528 5.53522 4.98132 3.90228 5.53525 4.42734 3.90228 4.42737 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 544.721 mo(20)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 555.68 mo(rankedtreeshapes.Sinceallorderingsofa)[3.90228 4.9813 5.53525 4.97932 4.42735 9.48044 3.87447 3.90228 4.42735 8.37254 3.92918 5.53525 4.98131 5.81419 4.42735 3.92918 6.72278 5.53526 2.75766 5.53525 4.43732 8.37253 4.98129 2.76764 6.71281 4.98129 3.90228 5.53525 4.42735 3.90228 2.76761 5.53528 4.98126 7.87439 4.98132 6.98975 0 ]xshYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf183.158 555.68 mo(ranked)[3.69321 5.09183 5.60092 4.58286 4.07477 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf215.237 555.68 mo(tree)[3.87445 3.90228 4.42737 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 555.68 mo(21)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 566.639 mo(aredistinct,theprobabilityofarankedtreesimplyneeds)[4.9813 3.90228 6.88811 5.53526 2.76762 3.92918 3.87447 2.76762 5.53525 4.42735 3.87447 5.22838 3.87447 5.53525 6.89807 5.53525 3.90228 4.98131 5.53525 4.98131 5.52527 2.76764 2.76762 2.76762 3.60547 7.71902 4.98131 5.50536 7.44206 3.90228 4.98129 5.53526 4.97931 4.42737 8.00595 3.87448 3.90228 4.42734 6.88809 3.9292 2.76764 8.30182 5.53522 2.76764 7.71906 5.53522 4.42737 4.42737 5.53522 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 566.639 mo(22)[2.64655 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/z <1C60D8A8C9B77FE2B22E0F07D895063A6CBFC8958E5265B47997FDB44410EF82082C1184649626F6371AF344118760364B6EC30D2E25540C9A8EEA16C343FAC809855F7DAEF0E07CA7BC51F510A8186DD54C20ED97C04F0C8551F34EFD1187F6F14F39> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 122 /z putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [12{/.notdef}rp /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four /.notdef /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /.notdef /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 577.598 mo(tomarginalizeoverallpossibleorderings.Thus,)[3.87447 8.29884 8.30181 4.9813 3.90228 4.98129 2.76764 5.53525 4.98129 2.76762 2.76762 4.42735 7.75487 4.70233 4.97934 4.42734 7.21983 4.98129 2.76762 6.09514 5.80424 4.98129 3.9292 3.93915 2.76762 5.52528 2.76762 7.75485 4.98131 3.90228 5.53525 4.42734 3.90228 2.76764 5.53525 4.98129 3.9292 6.08517 7.19498 5.25629 5.53525 3.9292 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 577.598 mo(23)[2.64655 0 ]xsh%ADOBeginSubsetFont: KAAAAA+CMCSC10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQO+CMCSC10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/C <1C60D8A8C9B6C769ACE610BE3B684092751727568786D5DD0A338BAD982E72516189AD1DD93F517E732D55960AA42DA36410CC28BA6BBFDB26955E93B5F095870D7E74BAD0EDA1AF643319544ADBC907565AA76FDA8B2C47E9DB9C6E6A36EBE3229D6CAD72BD16E122514A1FD500949E829BD40EF90587D1719EB2921A7A4247A9A53E7DE3> |-/a <1C60D8A8C9B7D61BB788A2B0CA3BF7A68E5E3E13BE18F72464BE6C28A798E82A7BBC194C774D8DBC8E216D33514CE2CCB3B9981358D4FD52B39E2CFFFE4AB641165A29304E080A10F708DEB4EC653B9B6A8335E0B9D819D82D9CDB4CEA3B1AD8D476B121E520301E08B1F77FCEC1FF5CCD13A4A073BB96EF9572F5CDFBF05E32BC1967801E4805BA0E59A3C992AA5D5D8F1E82EBC753CBF7FF41E5F3FEA8F5F92F973CE773BD39538C51002B27ADF3532B67447CC26EC81B901E3B98E0DE8EAA0D3ACFEC> |-/l <1C60D8A8C9B7BA8F693E86C705AFC30725CAE707282F2A8733B25804818164BBBEF8BFCE8BE88B1777E8D86D194D0809E2E1545744AD8E3DC837BC2FC257DDE54816A6C37D11368021333401CA95424AF2C5AFF1E3F62682BAFDBB5D3A01881ACEC0FED5584FC1CB5D09ECFE41E6D4C8DF5D> |-/y <1C60D8A8C9B7D61BB788A2BF72126082F3754428DE307BB81AB1392F6DB8C90D4FC5C9395DBE543EE9AA7CA82D91C617D1844375C8CC26053EF0E1CEF08B4F91CF883E7D9E2CCF03CBCC31E838542E8DEDA941E94BD6AF8E7C90409E5971A3DBF5C753FA56DC351B3ACEB3F8BED10D13EAE4C45A32246D1487B276DC5CE743E16F5BB11F398C69FF484975E61B2D5A2603D748DC9874F811967853DE793E2D3931AC7B8C364E9A2D874317F640EFB3B236632F04CFB88DABD07C14EE0B9DCAEFA2BC0CDA7719B60860C5530BCB932AE081109C2A3E6EF111E7B552D12E213D69DECFF052A28318> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQO+CMCSC10 /Encoding getdup 67 /C putdup 97 /a putdup 108 /l putdup 121 /y putpop%ADOEndSubsetFont
/YRBUQO+CMCSC10*1 [46{/.notdef}rp /period 20{/.notdef}rp /C /.notdef /E /.notdef /G /.notdef /I 8{/.notdef}rp /R /.notdef /T /U 11{/.notdef}rp /a 3{/.notdef}rp /e 2{/.notdef}rp /h 3{/.notdef}rp /l /m /.notdef /o 2{/.notdef}rp /r 6{/.notdef}rp /y 134{/.notdef}rp]YRBUQO+CMCSC10 nfYRBUQO+CMCSC10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 592.898 mo(Corollary)[7.83162 6.33228 5.78033 6.33228 5.11386 5.11386 6.11003 5.33202 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf46.8719 592.898 mo(1)shYRBUQO+CMCSC10*1 [9.9626 0 0 -9.9626 0 0 ]msf51.8539 592.898 mo(.)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/F <1C60D8A8C9B6415B3711EB1374ABAAA5807C9EE1C084B13FF802D135B3B1997005433A237A5921D39209F0EDE42717CCAFE5E5C433CAB42409F35694231711D059245424251E1A69C3815E9AB1A00DF7EE83FA1D7DDDA30F22A6B1ED2E0B47AE9395CA174B84E63FE7099661D664557757D55C1D2F6ED066E9C03E3414307BF00A4BF80917941AB778C40CD1F614DA014938D838517A6DFB8DB9A548EFC57C8B6DB70E2A6914FC20717804B1AC17F716EC6D21CC6A73B4A9011260FAB17796E8FD3EFDACB47AD4B7831BBFDCA6A7D7BE23D51A9ED79131FCA473833C4EDE05871EE7FDB13DFDEE8181FEA560B2006CAE95C8E4498FE30244353986360946FE784D> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 70 /F putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 23{/.notdef}rp /F 5{/.notdef}rp /L 3{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /.notdef /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf60.4849 592.898 mo(For)[5.73648 5.09181 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Y <1C60D8A8C9B7F7BFE9965B72C66223E0BD38C03944ABD0691FB86EAFA8557AB043297AE991C9291464747BAAFC167E0D0BE820F5019CD2081463ABAA6E1ABFF07F99EE02FF2837012AF6E74C6FB0AF539193FF1B386E7F19C02B7DFC56F75AE913848D4CAB5DC8040F1BEDDB51959987004B2EAFB6E61CBE9A985EE23D0C13B1A538C53D2FB8E6FAEEEEE906589CCA967F68E1E703C2F12E6A708FC80902A3ED8C5BCA23DBBFB130A60C5EEE61FEB629DC15C94845865A5AAA503E7CD5A43427576067F71A849538C0E2C2C24EEBA5FA650157A3882ECB011C19DAEB6CBA2B5D9F4DC3791732B6F0AB9BFD87BA956ADD5FAE000EE312EEACECCEED4A318F57BB54CCA5F849E9A70C25733BAC791646D5FE1FCEE9F3A08B14BAAFFFBE45F331C84F28ADCB9642D49D773931538BEE1E7EC10A6509037E4F> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 89 /Y putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi 25{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 9{/.notdef}rp /O 4{/.notdef}rp /T 3{/.notdef}rp /X /Y 11{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf79.7979 592.898 mo(Y)shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf87.7959 592.898 mo(,anr.v.overrankedtreeshapes)[7.33946 5.09181 9.87488 4.20131 3.05554 4.58287 7.33945 5.09183 4.58286 4.58286 8.48523 3.68323 5.09183 5.61087 4.58289 4.06479 9.37576 3.30954 3.69321 4.0748 8.86679 4.07373 5.09183 5.09183 4.57373 4.58289 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 592.898 mo(24)[2.64655 0 ]xshYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 603.857 mo(with)[6.61913 3.05554 3.30957 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf9.8889 603.857 mo(n)shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf19.6479 603.857 mo(leavesanddistributedaccordingtothedual-birth)[2.54645 4.07477 5.09181 4.58286 4.58287 7.84958 5.09181 5.60092 8.86765 5.09181 3.05556 4.07375 3.30957 4.20131 3.05554 4.58286 5.34691 3.30956 4.07478 8.87761 5.09181 4.0648 4.07477 5.09183 3.69321 5.09183 3.05554 5.60092 8.35867 3.30957 8.87762 3.30957 5.0918 8.3587 5.0918 5.34692 5.0918 2.54645 3.56464 4.58289 3.05554 4.20129 3.30957 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 603.857 mo(25)[2.64655 0 ]xshYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 614.816 mo(model,)[8.14736 4.58372 5.09182 4.58286 2.54645 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 614.816 mo(26)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf41.2989 628.21 mo(Pr\()[6.78058 3.90228 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf55.8549 628.21 mo(Y)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf64.9599 628.21 mo(=)shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf73.8159 628.21 mo(T)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf81.0219 624.097 mo( )shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf87.3399 628.21 mo(;)shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf90.6609 628.21 mo(n)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf96.6409 628.21 mo(\)=)[4.98032 0 ]xsh%ADOBeginSubsetFont: HBAAAA+CMEX10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQX+CMEX10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/summationdisplay <1C60D8A8C9B08A95197FC21C1744E77FED1D6499B901C04115566CD2A05BF472A1D10EF4CD07417172414F35FFA68E5FFEE3333B3840CAD5B5C27DE9B5EFDB4E4D74D071891FE726835B825A146ECE072AD20A381EA089F35CD19567562F2AD093C03B0471BA9BCC2CAF6F576049F10AB3C7C97EBE9465E1779F3B144546BFEE53E4131F258AF0F377996F67F1040B242A55E37D86AE39368AC197A4E722> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQX+CMEX10 /Encoding getdup 88 /summationdisplay putpop%ADOEndSubsetFont
/YRBUQX+CMEX10*1 [/.notdef /parenrightbig 30{/.notdef}rp /parenleftbig 48{/.notdef}rp /producttext 6{/.notdef}rp /summationdisplay 167{/.notdef}rp]YRBUQX+CMEX10 nfYRBUQX+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf121.091 618.746 mo(X)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf110.478 641.77 mo(!)sh%ADOBeginSubsetFont: MAAAAA+CMSY8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQW+CMSY8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/element <1C60D8A8C9B639EE3A52F12DDC78E73A63F312C733FF82CB1EDDEDAB644F4223E652B0FE0E3483B2F79EB93231C7EAC0CE499C8A3DDA94954DE2BFF74EF740DEB771C6132F946888C90924B6E3FA661EA73F34FDCAE5FB97864331521F912EA396DFED8636C532D1B4AADCEB45E9D5> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQW+CMSY8 /Encoding getdup 50 /element putpop%ADOEndSubsetFont
/YRBUQW+CMSY8*1 [32{/.notdef}rp /minus 17{/.notdef}rp /element 205{/.notdef}rp]YRBUQW+CMSY8 nfYRBUQW+CMSY8*1 [7.9701 0 0 -7.9701 0 0 ]msf116.03 641.77 mo(2)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf121.675 641.77 mo(\012\()[6.11621 0 ]xsh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7D10355D136D0DADE5158433371BFB24B1EEAC55C843708ED7631DE65FD5A4213D138297C3AE02E413993305D0DB4D03A1369B6FBB44AC933DE0464D1DF77D05FFD17A86D45C937293D614C36683D117FB9A1B7912150E3D09824578188963B5DE3CAEC9D55573A3199548CBC65777465CAE53ABD8D1B467D809949E19A42265483154A808D58861A8243A6D447DCD3F195643A01AB443B52147068818E77B527F6397E672B724685DC71EC4048543FCD88FA2A9BBCBB3196AC2AE49B0A65> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 84 /T putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 10{/.notdef}rp /psi /omega 27{/.notdef}rp /slash 22{/.notdef}rp /T 12{/.notdef}rp /a /b 6{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf131.085 641.77 mo(T)sh%ADOBeginSubsetFont: NBAAAA+CMMI6 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQR+CMMI6 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/psi <1C60D8A8C9B6A6CAD2FE568AECD7F40936CFFCEB553D97F8E5A0B493B1625897A3854350D945DCD13301061321C44EE0A0262D0E74B4C65EB616767802376C2082C032C6167E55DF9FA87FF8A68AE4D87A4F8C838AA985C126060CBDFC42B09A60A1E767BA047404D8086E26A9AAFE8B42F3B57E886E60CE049B10FFEE7F0C4D5F050F33567793593BC79E85B26E73DD2CEB779F864C8478D01E37A81CBAA7CE08050E31C1132ADE43D19E51A9193FCFF5EDF1EDC4EB776484D3772130ABA30A17CB52506CBFEDE692F6C0E17DD7F58C81B258A3F0EDCA204BBACDC45F2F> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQR+CMMI6 /Encoding getdup 32 /psi putpop%ADOEndSubsetFont
/YRBUQR+CMMI6*1 [32{/.notdef}rp /psi 64{/.notdef}rp /a /b 15{/.notdef}rp /r 141{/.notdef}rp]YRBUQR+CMMI6 nfYRBUQR+CMMI6*1 [5.9776 0 0 -5.9776 0 0 ]msf137.191 639.501 mo( )shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf142.802 641.77 mo(\))shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf146.648 628.21 mo(Pr\()[6.78058 3.90228 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf161.205 628.21 mo(T)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf168.411 624.097 mo( )shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf167.027 630.673 mo(!)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf174.73 628.21 mo(\)\(2\))[44.4123 3.87445 4.98129 0 ]xshYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf-11.9661 657.894 mo(where)[6.61913 5.09182 4.58286 3.69321 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Omega <1C60D8A8C9B6079F1E1A6CA7597AE0A9458C2566BC1EF3884F3BB6AE00F206185BCC8411F39C778B4AB4C8ACA1B6EF6A9DBD883F6FC26F73D46BEEC9383C6C3872FAE4B20D80158D880F6A4A89F73F4CD1E83D7D88ADEC6E2EFA3F0CFBF95C529CBEE1AD338F2DD3F93741BDB62607C60BC9FDF8806CF070DBBEAC2273F1CABDBE6E9014C1CC9B6B6DFF6DA7862AF20A14D0DFFE93E4C0E77FFD2B90A72840478657C1A327CB46C139549DA600487D7783E6D660> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 10 /Omega putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [10{/.notdef}rp /Omega /.notdef /fi 21{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four /.notdef /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /.notdef /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf16.1669 657.894 mo(\012)sh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/f <1C60D8A8C9B83844C7B478DA83EA30BC3E39AD311755C2286411182586F04E69B5F91C586CC63CDA7069B6762A4D0316FC3DA3CEE20848FBF9BE0079DC0810B379544E2DCCE4E1C7528FF4B95F7D29F641B2EC4AED53C161D57C4E0FE83CD7536AB7457D9228B913369426EA353B183BDFF1819BECA617EC3676AD1E3D575941F12F25C5CA321258FDC35E86E821C8A9A806688D16F67D3F64BFA5520013FA4D819969D48A1049EC3E87A1E11E0C3DA91EA80550> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 102 /f putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 23{/.notdef}rp /F 5{/.notdef}rp /L 3{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf26.9259 657.894 mo(givesthesetofallorderingsof)[4.58287 3.05554 4.58286 4.58287 7.64037 3.30957 5.09181 8.14948 4.07375 4.58287 6.86621 5.09181 6.62216 5.09183 3.05453 6.11304 5.09183 3.69321 5.09181 4.58287 4.20129 3.05554 5.60092 4.58286 7.63043 5.10178 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf164.664 657.894 mo(T)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf171.87 654.279 mo( )shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf178.189 657.894 mo(.)shYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf-27.2221 657.894 mo(27)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf254.285 281.432 mo(Thiscomputingrequiresanexponentialnumberof)[7.19498 5.53525 2.76764 9.38867 4.42737 4.98129 8.30182 5.53525 5.53525 3.87445 2.76764 5.53525 10.4408 3.90228 4.42737 5.25824 5.53528 2.76761 3.90228 4.42734 9.3887 4.98129 10.9948 4.43732 5.25827 5.80426 4.98126 5.53528 4.42737 5.25629 3.87445 2.76764 4.98126 8.23712 5.25629 5.53528 8.02283 5.81421 4.42737 9.36176 4.98132 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 281.432 mo(28)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 292.391 mo(computationstoiterateallorderings\(therecursive)[4.42734 4.98132 8.30179 5.53525 5.53528 3.87445 4.98129 3.87448 2.76761 4.98129 5.53528 10.8432 3.87448 11.9053 2.76764 3.87445 4.42734 3.90228 4.98129 3.87448 11.3414 4.98129 2.76761 9.69165 4.98129 3.90228 5.53525 4.42737 3.90228 2.76764 5.53522 4.98132 10.8432 3.87451 3.87439 5.53528 11.3414 3.90222 4.42737 4.43732 5.52533 3.90222 3.93921 2.75763 4.98932 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 292.391 mo(29)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 303.35 mo(formulaforthatiterationisgiveninthesupplement,)[3.04459 4.98132 3.90228 8.02286 5.53525 2.76761 9.91281 3.03464 4.98129 8.83377 3.87445 5.53525 4.98132 8.79596 2.76764 3.87445 4.42737 3.90228 4.98129 3.87445 2.76764 4.98129 10.4667 2.76764 8.85071 4.98129 2.76761 4.97934 4.42734 10.4668 2.76758 10.4568 3.87445 5.53528 9.35883 3.9292 5.53522 5.53528 5.52527 2.76764 4.43732 8.30182 4.42737 5.25629 3.87445 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 303.35 mo(30)[2.64655 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/ffi <1C60D8A8C9B6B41CC7B459B64F3AB25EB9649A6ADC5FEFFFE9C5328CFEA2A391DB97082DCF8FB0EA616324EFF7EB46C19CA165B5F0ED450119258A58C607CC111A0B8F5D2E701305AD20E8BC855C2FE5F2771DD390E5B65F32BC1C2BA4BB90DA3B1E59891AF2FB30A13834FA7AE34E723C734F096B7FEFF151875D7B07B7D821F40278F8274A9E9DC2C9747BD06BB0803B7BB246A3EFF8139BDB055B580B267635E981FF9BC26C8FCA91ADFF2F3DE57E1895BA37B71CE90BBFFAEC90C88938BCE8B565ECA0EEC67636C979EEF48402FB581466802A954ADDAEF772F4E630A622DFBC79B412B8D57FC96D5CEC80ACAAA3DB60951E6A74E73EF3926317E05014692EDC3D82EDCEC2E75DB812BDDF6FF3DF83A3304A27D797551C0846C23CA49FE6418161278A54E7C771C67B91E7731A6A279C05F8FEEA92966A2F0D118E826EA738F4F8A9E20A65A7C3E3C29E3C67A1BA35F673E479D5A82B3AF37ECA6CE79B8E820C6A6B06D2E1E0FEF89C6AE68B3C8DCA050480E74DA5EF9CACA132A047BC> |-/five <1C60D8A8C9B7A73D3B2B97F19D54A2E00E7DDA8E72064220CB7581D13CEDF071F346430E40993A6297E3A2A6D6093205222D977AC7F7B65CC82B221D9B18ADEA5D4AF0261ABF060D3E283C7B3B5EB39FF499721FD51203AE59E3BEA257DFD3E472FEF67221488EC8D1F355E2FAD057CA44A8B4BAD6C6C719C164907CBF9A6CC770DB0C7E58A37D2385E23F576BCFF94FFBFD8ADD4C5E6C32CD83ACEB77472D00FE1A4DC66393A99AC6BBD252B04C98B710149EA42B66ACE89D4FC4393F3A09165DF477ABCB0E8A8DB21E4278CA219EBCC9B067F95E336B85E37D444AD601D63D5ECEDC6A300696D98ABBC6ACC6E54D428BA49C3B1F> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 14 /ffi putdup 53 /five putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [10{/.notdef}rp /Omega /.notdef /fi /.notdef /ffi 19{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L 2{/.notdef}rp /O /P 2{/.notdef}rp /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /.notdef /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 314.309 mo(Eq.S5.Whethere\016cientalgorithmsforcomputingthis)[6.78058 5.25827 6.24457 5.53525 4.98132 6.24457 10.2396 5.53525 4.42737 3.87445 5.53525 4.42734 7.36926 4.42737 8.30182 4.42734 2.76761 4.42737 5.26624 7.34146 4.98129 2.76764 4.98129 4.98129 3.90228 2.76764 3.87445 5.53525 8.30185 7.40613 3.04456 4.98132 7.37921 4.42737 4.98126 8.30188 5.53522 5.53522 3.87451 2.76758 5.53528 8.45825 3.87445 5.53522 2.76764 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 314.309 mo(31)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 325.268 mo(probabilityexistisuncleartous.SeeFigureS1foran)[5.53525 3.90228 4.98129 5.53525 4.98132 5.53525 2.76761 2.76764 2.76761 3.59552 9.37283 4.42734 5.25827 2.76764 3.9292 7.97906 2.76761 8.04373 5.53525 5.53525 4.42737 2.76761 4.42737 4.98129 8.01685 3.87445 9.09586 5.53525 3.9292 6.88214 5.53528 4.42737 8.54187 6.50366 2.76758 4.98132 5.53522 3.89233 8.54193 5.53522 9.09589 3.04456 4.98132 8.01685 4.98132 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 325.268 mo(32)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 336.227 mo(exampledistributionandmatchingsimulations.)[4.42734 5.2583 4.98129 8.30182 5.53525 2.76761 7.7449 5.53525 2.76764 3.92917 3.87448 3.90228 2.76761 5.53525 5.53525 3.87448 2.76761 4.98132 8.85278 4.98129 5.53525 8.86276 8.30182 4.98129 3.87445 4.14841 5.53525 2.76764 5.53525 8.29886 3.92914 2.76764 8.03284 5.53522 2.75769 4.98132 3.87445 2.76764 4.98132 5.53522 3.9292 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 336.227 mo(33)[2.64655 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/N <1C60D8A8C9B6E3FA234780EB1A04772A480C0BA74E47A01736C3330B79F94973DD24567A876D5331B1C1E5BDF74D24451B47112EB46B9EF65275AA4A1B843B86074DC79A6CD0050A641BBD3D76F6A280A01B662CF540DC44B0244BA42328D0C0AD1033AC62F401A3DED6A2DEA6245CB4859932AF05637597C673C1E4554E6D1A85B9A271FFDD6802EE1900EEE3BF3FB1C692903A5561AF31F20EADA5B95CF7CED21BCF0DCD198120A75B66796A207B4ED846B6C8BCEB6AFE688E2BBAFBC7E620BB69A3B9327CE86F09F7F62A63> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 78 /N putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [10{/.notdef}rp /Omega /.notdef /fi /.notdef /ffi 19{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L /.notdef /N /O /P 2{/.notdef}rp /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /.notdef /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf254.285 347.185 mo(Next,weturntocomputingtheprobability)[7.47195 4.42734 5.25827 3.87448 13.3778 6.91605 15.0375 3.8645 5.53525 3.90228 16.1454 3.87448 15.5815 4.42737 4.98129 8.30182 5.53525 5.53525 3.87448 2.76761 5.53525 15.5815 3.87439 5.53528 15.0276 5.53522 3.90228 4.98132 5.53522 4.98132 5.53522 2.76764 2.76764 2.76764 3.59552 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 347.185 mo(34)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 358.144 mo(distributionoverunrankedshapes.Thiscanbedone)[5.53525 2.76764 3.92917 3.87448 3.90228 2.76761 5.53525 5.53525 3.87448 2.76761 4.98129 10.9449 4.70236 4.98929 4.42734 9.31198 5.53525 5.53525 3.90228 4.98129 5.53525 4.97934 4.42734 10.9549 3.9292 5.53528 4.98126 5.80426 4.42737 3.9292 8.1972 7.19501 5.53522 2.76764 9.34882 4.42737 4.98132 10.9449 5.81421 9.83704 5.53528 4.98132 5.53522 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 358.144 mo(35)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 369.103 mo(byenumeratingallpossiblerankingsoftheunranked)[5.25629 10.3293 4.42734 5.25632 5.53525 8.30179 4.42737 3.90228 4.98129 3.87448 2.76761 5.53525 10.0522 4.98132 2.76761 7.82864 5.81421 4.98129 3.92917 3.9292 2.76764 5.53525 2.76761 9.49832 3.90228 4.98129 5.53528 5.25824 2.76764 5.53522 4.98132 9.00018 4.98126 8.10559 3.87451 5.53522 9.49835 5.53522 5.53528 3.90228 4.98132 5.53522 4.97931 4.42737 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 369.103 mo(36)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 380.062 mo(treeandsumminguptheirprobabilities.Thesetof)[3.87445 3.90228 4.42737 10.2057 4.98129 5.53525 11.3235 3.9292 5.53525 8.30182 8.30182 2.76761 5.53525 10.7596 5.53525 11.3135 3.87448 5.53525 4.42734 2.76764 9.69055 5.53525 3.90228 4.98129 5.53525 4.98132 5.53528 2.76758 2.75769 2.76764 3.87445 2.76764 4.42731 3.93915 8.55591 7.19501 5.53522 10.2156 3.9292 4.42731 9.65277 4.98132 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 380.062 mo(37)[2.64655 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Psi <1C60D8A8C9B6FC2DE47E11B825457988C4BE04AB69233F77ECECF701949FC06BD8A99AB583AF1BB0A0DCD0ACE59827788E803DF812E486D61EE71CAC176EC285E2BEF928C02DAFD46765701D8D5B1AAA63BB66E16638548D67A4DC03B5F67428CC644C564AC8D3DAC3510A453D4CC2DEB16F514AED8C7F39AA15855904E986F26FFC3C36B9D914817634F80D2B18ECA8458214EF777C5CD9347BB446D433F18408559A795A92605BD34CCDA1A384E33254EBD4BD0992229D442C33B8802DDD4BBFCD5B45B2CEB60CC75C86212F0B505E9ADD163FEABCB4049E4F29EFA19C237C4FBAA24C9100DEF0755E66A092152FA8007CE228F483EC1748FC6BA2B93DA7180EBD04AE41B51B4269224C923F8394> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 9 /Psi putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [9{/.notdef}rp /Psi /Omega /.notdef /fi /.notdef /ffi 19{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /.notdef /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L /.notdef /N /O /P 2{/.notdef}rp /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /.notdef /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 391.021 mo(allrankings,\011\()[4.98129 2.76764 7.77881 3.90228 4.98129 5.53525 5.25827 2.76764 5.53525 4.98129 3.9292 7.77881 7.74893 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf316.141 391.021 mo(T)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf323.347 391.021 mo(\),issimplythesetofallthelinear)[3.87445 7.77884 2.76761 8.94037 3.9292 2.76764 8.30179 5.53525 2.76764 10.2695 3.87445 5.53525 9.43854 3.9292 4.42737 8.88562 4.98132 8.05579 4.98126 2.76764 7.77881 3.87445 5.52533 9.43854 2.76758 2.76764 5.53528 4.42731 4.98132 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 391.021 mo(38)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 401.98 mo(extensionsofthePOSETde\014nedbythetreeshape.)[4.42734 5.2583 3.87445 4.42734 5.53525 3.9292 2.76764 4.98129 5.53525 9.40863 4.98129 8.52402 3.87448 5.53525 9.90677 6.78058 7.74893 5.53525 6.78058 12.6744 5.53525 4.42734 5.53528 5.53522 4.42737 11.0147 5.25623 10.7377 3.87445 5.53528 9.90674 3.87451 3.90222 4.42737 9.9068 3.92914 5.53528 4.98132 5.81421 4.42731 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 401.98 mo(39)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 412.939 mo(However,a\014nalcomplicationneedstobeaddressed.)[7.47195 4.70233 6.91605 4.42734 4.98929 4.42734 3.90228 8.0777 10.2914 5.53525 5.53528 4.98129 8.07767 4.42737 4.98129 8.30182 5.53525 2.76764 2.76761 4.42734 4.98132 3.87445 2.76764 4.98129 10.8354 5.53525 4.42734 4.42737 5.53522 9.23926 3.87451 10.2914 5.81421 9.73743 4.98126 5.53528 5.53522 3.90228 4.42737 3.9292 3.92914 4.42737 5.53528 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 412.939 mo(40)[2.64655 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/hyphen <1C60D8A8C9B81F2C3AF48BE1F128682CB71E9BBC932714B7AB24E23905FE> |-/R <1C60D8A8C9B615D12DC96511BCDF86E8A7C75693A48984A0E7356B506A1E15B47A94A73C653189B6B5BD65FB5FD80494A93ED537A0F09ED1A8D7E99F236C312E766AB94701E7DF4C5D2A60F4FD92EAE94A3954DDA379326F222414F1DE7C4AACE6D4DED1720B0E27193BD7C5EA0E3BA2CC71AE1473C45D199A12EC2BADFA899FEA715987353E3C7215E3A7FAC395D71EA8789DE2ED7766F94B55DE6CADF8918D147A0B2E013795A64EAA525827FF34103C3300ACB3AA71F9D25FB8DACE8C183EB9D5D1CB14AE41492D4FA0E06AFE19D1D845A5D9B7C1D57AA6016B555070D6E922D376B26646FEF8B92A7CC134A4CEA68E0101BD25C8C1C5F54B53F4976893EC3DED988EEFD4> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 45 /hyphen putdup 82 /R putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [9{/.notdef}rp /Psi /Omega /.notdef /fi /.notdef /ffi 19{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /.notdef /H 3{/.notdef}rp /L /.notdef /N /O /P /.notdef /R /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /.notdef /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 423.898 mo(Recallthatleavesareunlabeled.Foranon-cherry)[7.33347 4.42734 4.42737 4.98129 2.76761 9.86099 3.87448 5.53525 4.98129 10.9678 2.76764 4.42734 4.70236 4.97931 4.42734 11.0226 4.98129 3.90228 11.5207 5.53525 5.53525 2.76764 4.98129 5.81418 4.42737 2.76764 4.42734 5.53525 9.88092 5.6767 4.98132 10.9957 12.0746 5.53522 4.98132 5.53528 3.3205 4.14838 5.53528 4.42737 3.90222 3.90234 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 423.898 mo(41)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 434.857 mo(symmetricnode)[3.9292 5.25827 8.30182 8.30179 4.42737 3.87445 3.90228 2.76764 7.47589 5.53525 5.26025 5.53525 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf316.363 434.857 mo(u)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf325.112 434.857 mo(\(i.e.,sub-treeshapesbelow)[3.87445 2.76764 2.76761 4.42737 2.76761 5.81619 3.9292 5.53525 5.53525 3.3205 3.87448 3.90228 4.42734 7.47589 3.9292 5.53525 4.98129 5.80426 4.42737 6.97772 5.81421 4.42731 2.76764 4.70239 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf445.144 434.857 mo(u)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf450.847 436.561 mo(1)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf458.626 434.857 mo(and)[4.98132 5.53522 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf477.723 434.857 mo(u)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf483.426 436.561 mo(2)shYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 434.857 mo(42)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 445.816 mo(areidentical\),takeanyorderingofanyrankingofnodes)[4.98129 3.90228 7.54565 2.76761 5.53525 4.42737 5.25629 3.87445 2.76764 4.42737 4.98129 2.76761 3.87448 5.89587 3.87445 4.98129 4.97934 7.54562 4.98132 5.25629 8.38654 4.98129 3.90228 5.53525 4.42737 3.90228 2.76764 5.53522 8.09961 4.98129 6.16287 4.98132 5.25629 8.37659 3.90228 4.98132 5.53522 5.25824 2.76764 5.53528 8.10956 4.98126 6.1629 5.53528 5.26025 5.52527 4.43732 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 445.816 mo(43)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 456.774 mo(below)[5.81421 4.42734 2.76764 4.70233 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf274.796 456.774 mo(u)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf280.499 456.774 mo(.Nowswap)[8.34668 7.47195 4.70233 12.7641 3.9292 6.91602 4.98132 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/omega <1C60D8A8C9B663CCDCD38BB615B5A9927D0AC8F3BEF99308F53E6E11EF6FDEC2A41598615AD97858C1C11CB2852335C8D037EC343F7FB2C8BB19CE76FD6F3CFC450758B31E07C66BA64F6059F9713685D367F90360A0A6D6D36DC65850B1914FCA760767E999EE65C6CD28F426EBA0E29CA50A7962F3BDF64398160F81EDCC71E779153676C2979CD0C26D1D704FD8A8A9077DF794C92C4969318F1308BFC9C44847FB6EBD1C8DAB4B80C252D428DD48E8F0> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 33 /omega putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi /omega 24{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 9{/.notdef}rp /O 4{/.notdef}rp /T 3{/.notdef}rp /X /Y 11{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf340.715 456.774 mo(!)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf347.274 456.774 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf351.148 456.774 mo(u)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf356.851 458.479 mo(1)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf361.583 456.774 mo(\)and)[9.44354 4.98132 5.53525 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf392.641 456.774 mo(!)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf399.2 456.774 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf403.074 456.774 mo(u)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf408.778 458.479 mo(2)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf413.51 456.774 mo(\)andalsoswap)[9.44354 4.98132 5.53522 11.0944 4.98126 2.76764 3.9292 10.5504 3.92914 6.91602 4.98132 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 456.774 mo(44)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 467.733 mo(therankingsofnodesbelow)[3.87445 5.53525 8.05374 3.90228 4.98129 5.53528 5.25827 2.76761 5.53525 4.98129 7.5556 4.98129 6.66101 5.53525 5.26025 5.53525 4.42737 7.55557 5.81421 4.42734 2.76761 4.70236 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf370.792 467.733 mo(!)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf377.35 467.733 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf381.225 467.733 mo(u)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf386.928 469.438 mo(1)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf391.66 467.733 mo(\)withtherankingsof)[7.50085 7.19495 2.76764 3.87445 9.16168 3.87445 5.53522 8.05377 3.90228 4.98126 5.52533 5.25824 2.76764 5.53522 4.98132 7.5556 4.98126 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 467.733 mo(45)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 478.692 mo(theidenticalnodesunder)[3.87445 5.53525 9.42859 2.76764 5.53525 4.42734 5.25629 3.87448 2.76761 4.43732 4.98129 7.76886 5.53525 5.26025 5.53525 4.42734 8.93042 5.53525 5.53525 5.53525 4.42737 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf364.605 478.692 mo(!)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf371.164 478.692 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf375.038 478.692 mo(u)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf380.741 480.397 mo(2)sh1 /0 /CSD get_res sepcs
1 sep
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf385.474 478.692 mo(\)\(Fig.)[8.8757 3.87445 6.5036 2.76764 4.98126 0 ]xsh.930816 .793027 0 0 cmyk
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf420.255 478.692 mo(1)sh1 /0 /CSD get_res sepcs
1 sep
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf425.237 478.692 mo(c\);thiswould)[4.42737 3.87445 7.76886 3.87445 5.53522 2.76764 8.94037 6.91602 4.98132 5.53528 2.76758 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 478.692 mo(46)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 489.651 mo(produceanidenticaltreeshape.However,ourprocess)[5.53525 3.90228 5.26025 5.53525 5.53525 4.42737 9.04999 4.98129 10.1579 2.76761 5.53528 4.42734 5.25629 3.87448 2.76761 4.42734 4.98132 7.39026 3.87445 3.90228 4.42737 9.04999 3.93915 5.5253 4.98129 5.81421 4.42734 7.40024 7.47198 4.70233 6.92596 4.42737 4.97931 4.42731 3.90234 7.39026 4.98132 5.53522 8.52496 5.53522 3.90228 5.26025 4.42737 4.42737 3.92914 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 489.651 mo(47)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 500.61 mo(willcountthisidenticaltreeshapetwice.Toaccountfor)[7.19498 2.76761 2.76764 5.88593 4.42734 4.98129 5.53525 5.25632 7.00272 3.87445 5.53528 2.76761 7.04749 2.76761 5.53528 4.42734 5.25629 3.87448 2.76761 4.42734 4.98132 5.88593 3.87445 3.90228 4.42734 7.5556 3.9292 5.53525 4.98132 5.80423 7.55557 3.59552 7.19501 2.76764 4.42731 4.42737 5.88593 6.3681 8.09955 4.98132 4.42731 4.42737 4.98132 5.53522 5.25629 7.00275 3.04462 4.98126 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 500.61 mo(48)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 511.569 mo(this,weneedtodividethetotalprobabilitybytwofor)[3.87445 5.53525 2.76764 3.9292 6.63312 6.91602 8.29285 5.53525 4.42734 4.42734 9.40076 3.87445 8.8468 5.53525 2.76764 5.25824 2.76764 5.53525 8.29285 3.87448 5.53522 8.29285 3.87448 4.98129 3.87445 4.98132 6.63312 5.53528 3.90222 4.98132 5.53528 4.98126 5.53528 2.76764 2.76758 2.76764 3.59552 9.13373 5.25629 9.12378 3.59552 6.91602 8.8468 3.04462 4.98126 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 511.569 mo(49)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 522.528 mo(everynon-cherrysymmetricnode.Thus,)[4.42734 4.97934 4.42734 3.90228 8.58578 5.53525 4.98132 5.52527 3.33047 4.14841 5.53525 4.42734 3.90228 3.90228 8.57584 3.92917 5.2583 8.30179 8.30182 4.42734 3.87448 3.90228 2.76761 7.75485 5.5253 5.26025 5.53525 4.42734 6.09515 7.19495 5.25629 5.53528 3.92914 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 522.528 mo(50)[2.64655 0 ]xshYRBUQO+CMCSC10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 542.342 mo(Corollary)[7.83163 6.33228 5.78033 6.33228 5.11386 5.11386 6.11002 5.332 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf303.194 542.342 mo(2)shYRBUQO+CMCSC10*1 [9.9626 0 0 -9.9626 0 0 ]msf308.175 542.342 mo(.)shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf316.825 542.342 mo(For)[5.73648 5.09183 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Z <1C60D8A8C9B65F8A31F6FD1FBCC6997F2A627AF66BA6A5BA8AA647156A83F92EA504DD7099798151DE60D61983412D158CF0C28B02A7A644B280CB40E839D240459FD3B790E98E27DB78EACAA031C191FF413D96DA59E40D6C7B1EDD3987A433A0E41E31614118F7759BE655B0772F7198331FD887A7536EB1A08984CD12A1FD783C66CB458EF034A6D34BB2FE> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 90 /Z putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 10{/.notdef}rp /psi /omega 24{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 9{/.notdef}rp /O 4{/.notdef}rp /T 3{/.notdef}rp /X /Y /Z 10{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf336.167 542.342 mo(Z)shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf343.68 542.342 mo(,anr.v.overtreeshapeswith)[7.36935 5.09183 9.90475 4.20129 3.05554 4.58289 7.36932 5.09183 4.58286 4.58289 8.50513 3.30957 3.69318 4.07477 8.88672 4.07379 5.0918 5.10175 4.57379 4.58289 8.38751 6.61914 3.05554 3.30957 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf482.178 542.342 mo(n)shYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 542.342 mo(51)[2.64655 0 ]xshYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 553.301 mo(leavesanddistributedaccordingtothedual-birthmodel,)[2.54645 4.07477 5.0918 4.58289 4.58286 7.36142 5.0918 5.60092 8.36951 5.09183 3.05554 4.07376 3.30957 4.20129 3.05554 4.58289 5.34689 3.30957 4.07477 8.37949 5.0918 4.07477 4.07477 5.09183 3.69321 5.09183 3.04556 5.6109 7.86057 3.30957 8.37949 3.30957 5.0918 7.87054 5.0918 5.34692 5.0918 2.54645 3.56464 4.58289 3.05554 4.20129 3.30957 8.36951 8.14734 4.58374 5.0918 4.58289 2.54645 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 553.301 mo(52)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf290.304 575.759 mo(Pr\()[6.78058 3.90228 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf304.861 575.759 mo(Z)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf313.481 575.759 mo(=)shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf322.337 575.759 mo(T)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf329.542 575.759 mo(;)shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf332.863 575.759 mo(n)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf338.843 575.759 mo(\)=)[4.98032 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf363.034 569.019 mo(1)sh353.875 573.268 mo
377.173 573.268 li
@
YRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf353.875 583.706 mo(2)sh%ADOBeginSubsetFont: ZAAAAA+CMMI8 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQQ+CMMI8 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/sigma <1C60D8A8C9B7DCE0346E58AEAF93B0BBB320D03A3720F904893BAEC0801A7F3D5DC070499139D3149224C545B0F95939193366B00F08A34E43C9468544133EF2F88F939854ACC8290A79ACEA2FF42939908ED9D308A66631639D012A76CA5D4F737C9403A79568EB9A14D95ECC0E9A> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQQ+CMMI8 /Encoding getdup 27 /sigma putpop%ADOEndSubsetFont
/YRBUQQ+CMMI8*1 [21{/.notdef}rp /lambda 5{/.notdef}rp /sigma 4{/.notdef}rp /psi /omega 27{/.notdef}rp /slash 22{/.notdef}rp /T 12{/.notdef}rp /a /b 6{/.notdef}rp /i 4{/.notdef}rp /n 3{/.notdef}rp /r 141{/.notdef}rp]YRBUQQ+CMMI8 nfYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf358.857 580.641 mo(\033)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf363.982 580.641 mo(\()shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf367.275 580.641 mo(T)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf373.382 580.641 mo(\))shYRBUQX+CMEX10*1 [9.9626 0 0 -9.9626 0 0 ]msf387.1 566.295 mo(X)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf378.922 588.877 mo( )shYRBUQW+CMSY8*1 [7.9701 0 0 -7.9701 0 0 ]msf384.743 588.877 mo(2)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf390.388 588.877 mo(\011\()[6.58649 0 ]xshYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf400.268 588.877 mo(T)shYRBUQI+CMR8*1 [7.9701 0 0 -7.9701 0 0 ]msf406.375 588.877 mo(\))shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf410.221 575.759 mo(Pr\()[6.78058 3.90228 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf424.778 575.759 mo(T)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf431.983 571.646 mo( )shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf438.302 575.759 mo(\)\(3\))[37.1296 3.87445 4.98132 0 ]xshYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 606.698 mo(where)[6.61914 5.0918 4.58289 3.69321 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf272.479 606.698 mo(\011)shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf283.815 606.698 mo(givesallrankingsof)[4.58286 3.05554 4.58289 4.58286 7.66028 5.09183 3.05453 6.13297 3.69321 5.09183 5.60092 4.58286 3.05554 5.60092 4.58289 7.66028 5.09183 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf374.161 606.698 mo(T)shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf384.954 606.698 mo(and)[5.09183 5.60092 0 ]xsh%ADOBeginSubsetFont: YAAAAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQS+CMMI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/sigma <1C60D8A8C9B7E02ADD9A9645B6EFEFDAF8223441C504B97557ED13314FE544C9EC1A4406DB0721B939B9558B16716B0F0FF7B06C03D0B74C12F5C9EAF2F3F5230C06C2BA0F17D29505064C824CF331A94AFFDE518E68EA269F3BD5D5CAB13DA3DA4393C4E631DAFE8831AF656D23D2065E3B2DD1> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQS+CMMI10 /Encoding getdup 27 /sigma putpop%ADOEndSubsetFont
/YRBUQS+CMMI10*1 [14{/.notdef}rp /delta 6{/.notdef}rp /lambda 5{/.notdef}rp /sigma 4{/.notdef}rp /psi /omega 24{/.notdef}rp /period /comma /.notdef /slash 7{/.notdef}rp /E 9{/.notdef}rp /O 4{/.notdef}rp /T 3{/.notdef}rp /X /Y /Z 10{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 3{/.notdef}rp /r /.notdef /t /u /v 137{/.notdef}rp]YRBUQS+CMMI10 nfYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf404.326 606.698 mo(\033)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf410.377 606.698 mo(\()shYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf414.251 606.698 mo(T)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf421.457 606.698 mo(\))shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf428.918 606.698 mo(isthenumber)[3.05554 7.66028 3.30957 5.09186 8.16937 5.60095 5.34686 8.1474 4.07477 4.58282 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 606.698 mo(53)[2.64655 0 ]xshYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 617.657 mo(ofnon-cherrysymmetricnodesin)[5.09183 6.62213 5.60095 5.0918 5.60092 3.56467 4.58286 5.09183 4.58286 4.20129 4.20129 8.39444 4.07376 4.8378 8.14737 8.14737 4.58286 3.30957 4.20129 3.05554 8.14948 5.60092 4.58374 5.0918 4.58289 7.64035 3.05554 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf395.172 617.657 mo(T)shYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf402.378 617.657 mo(.)shYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 617.657 mo(54)[2.64655 0 ]xsh%ADOBeginSubsetFont: SAAAAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQV+CMTI10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/W <1C60D8A8C9B5E868C08614A8BF71110993D64445AF5786931379F1A070D12AD14E18434BC41F465311D5C91FF807A547D9196CF352F1B2A53292DFBF8265DD61A588A9EF18F8A33019053B643CEFE9636DA47C8EA43BEB5F130204B7F86579AE9C9E5606233BE07FC03799CEBB86C6352DD6A9AB4E4D9E48DDED586D6565AE63716B9B82C751E9B278174AAB8A817C806386BE1F1D5DD8B99EDEEB69EEBEE7FD18621B0A5D026B4132696CCE486776E5B669D57E9808526B0B17E5B48FBDB5FF3CAF25E6FC43B15F50B4DC04A2217D75EFB14FB808C3720579F3B444A391D1F79BEC93A0D499FFCFA29DFD3DC0C3033EED842928BA18B151ACC1EC7D025FB303B88AED05A39A0400132A1F6BA4B67E72EC9DBA0E83E4162A2FE4BE67F8FD9776B1DF113B90143A083DF69C1FB88DC8D031C95D8632D7AF1CD7CA0DDA3C271458331FEF7DD57F1E95ECF33DAD4CE999742D> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQV+CMTI10 /Encoding getdup 87 /W putpop%ADOEndSubsetFont
/YRBUQV+CMTI10*1 [40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period 23{/.notdef}rp /F 5{/.notdef}rp /L 3{/.notdef}rp /P 3{/.notdef}rp /T 2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /.notdef /r /s /t /u /v /w /.notdef /y 2{/.notdef}rp /emdash 131{/.notdef}rp]YRBUQV+CMTI10 nfYRBUQV+CMTI10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 644.445 mo(Weightedtrees.|)[9.95166 4.58286 3.05554 4.58286 5.09183 3.30957 4.07477 12.5339 3.30957 3.69321 4.07477 4.58286 4.07376 3.05554 0 ]xsh%ADOBeginSubsetFont: EAAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.systemdict beginYRBUQG+CMR10 dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/G <1C60D8A8C9B6C5CA50BA1A66B0ED58C9A27CC1684A535A4AAE923AA869469B9FB1E98E8E911A6B68D071D9A9C53B9EA692748987A65C86386EDBF1DC70F64BF40FA829872071155D2EEF287FA3F412065012D7ECC6A66BEC3F9115F8F2B744B6FDCED55D0AA61445F9E82DBD8E663727CBB905C20DD0B57EE3C58C71FBD261064D2534E005C7403CDFF8F45F8CA19540B5E742E2C392DF93DEF0F5DEAFD77D3EE1270EBF8C86EDAFD0C899763930BDAF6E95FB83A7C6FF21F91FB9F4114AC07B82F3A2368EBE8C4CF6B8F681F436D5496509EB99DE62F2C39298D13A5FC8117BF4675C81CBB48E290A6FB33819> |-systemdict /gcheck known {setglobal} if end {end} ifendYRBUQG+CMR10 /Encoding getdup 71 /G putpop%ADOEndSubsetFont
/YRBUQG+CMR10*1 [9{/.notdef}rp /Psi /Omega /.notdef /fi /.notdef /ffi 19{/.notdef}rp /quotedblright /numbersign 4{/.notdef}rp /parenleft /parenright /.notdef /plus /comma /hyphen /period /slash /zero /one /two /three /four /five /six /seven /.notdef /nine /colon /semicolon /.notdef /equal 5{/.notdef}rp /C /.notdef /E /F /G /H 3{/.notdef}rp /L /.notdef /N /O /P /.notdef /R /S /T /.notdef /V /W 4{/.notdef}rp /quotedblleft 4{/.notdef}rp /a /b /c /d /e /f /g /h /i /.notdef /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /.notdef /emdash 131{/.notdef}rp]YRBUQG+CMR10 nfYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf334.437 644.445 mo(Givenanorderedweightedtree)[7.81763 2.76764 4.97931 4.42737 13.0769 4.98129 13.067 4.98129 3.90228 5.53528 4.42731 3.90228 4.42737 13.067 6.92596 4.42737 2.76764 4.98132 5.25629 3.87445 4.42737 13.067 3.87445 3.90228 4.42737 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 644.445 mo(55)[2.64655 0 ]xshYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf244.323 657.895 mo(shape)[3.9292 5.53525 4.98129 5.81421 0 ]xshYRBUQS+CMMI10*1 [9.9626 0 0 -9.9626 0 0 ]msf271.863 657.895 mo(T)shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf279.068 652.913 mo( )shYRBUQQ+CMMI8*1 [7.9701 0 0 -7.9701 0 0 ]msf277.684 659.489 mo(!)shYRBUQG+CMR10*1 [9.9626 0 0 -9.9626 0 0 ]msf285.387 657.895 mo(,wecaneasilycomputetheprobabilitydensity)[5.62689 6.91602 7.27667 4.42734 4.98129 8.39453 4.42734 4.98129 3.9292 2.76761 2.76764 8.11752 4.42737 4.98129 8.30182 5.53525 5.53525 3.87448 7.27664 3.87445 5.53525 7.28662 5.53528 3.90222 4.98132 5.53528 4.98126 5.53528 2.76764 2.76758 2.76764 3.59552 8.10754 5.53528 4.42737 5.53522 3.9292 2.76764 3.59552 0 ]xshYRBUQU+CMSS8*1 [4.9813 0 0 -4.9813 0 0 ]msf502.791 657.895 mo(56)[2.64655 0 ]xshgrestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/YRBUQN+CMB10*1 uf/YRBUQN+CMB10 uf/JAAAAA+CMB10 uf/YRBUQX+CMEX10*1 uf/YRBUQX+CMEX10 uf/HBAAAA+CMEX10 uf/YRBUQV+CMTI10*1 uf/YRBUQV+CMTI10 uf/SAAAAA+CMTI10 uf/YRBUQU+CMSS8*1 uf/YRBUQU+CMSS8 uf/RAAAAA+CMSS8 uf/YRBUQW+CMSY8*1 uf/YRBUQW+CMSY8 uf/MAAAAA+CMSY8 uf/YRBUQT+CMSY10*1 uf/YRBUQT+CMSY10 uf/GBAAAA+CMSY10 uf/YRBUQS+CMMI10*1 uf/YRBUQS+CMMI10 uf/YAAAAA+CMMI10 uf/YRBUQM+CambriaMath*1 uf/YRBUQM+CambriaMath uf/UCAAAA+CambriaMath uf/YRBUQO+CMCSC10*1 uf/YRBUQO+CMCSC10 uf/KAAAAA+CMCSC10 uf/YRBUQQ+CMMI8*1 uf/YRBUQQ+CMMI8 uf/ZAAAAA+CMMI8 uf/YRBUQP+CMBX8*1 uf/YRBUQP+CMBX8 uf/MBAAAA+CMBX8 uf/YRBUQL+ArialMT*1 uf/YRBUQL+ArialMT uf/VCAAAA+ArialMT uf/YRBUQK+CambriaMath*1 uf/YRBUQK+CambriaMath uf/GCAAAA+CambriaMath uf/YRBUQR+CMMI6*1 uf/YRBUQR+CMMI6 uf/NBAAAA+CMMI6 uf/YRBUQJ+CambriaMath*1 uf/YRBUQJ+CambriaMath uf/SBAAAA+CambriaMath uf/YRBUQI+CMR8*1 uf/YRBUQI+CMR8 uf/LAAAAA+CMR8 uf/YRBUQH+LCIRCLE10*1 uf/YRBUQH+LCIRCLE10 uf/FAAAAA+LCIRCLE10 uf/YRBUQG+CMR10*1 uf/YRBUQG+CMR10 uf/EAAAAA+CMR10 ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
