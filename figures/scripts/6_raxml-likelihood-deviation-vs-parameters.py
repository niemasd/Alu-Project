#! /usr/bin/env python3
'''
Niema Moshiri 2016

Generate plots of RAxML Likelihood Score Deviation vs. various parameters
'''
# imports
from matplotlib import rcParams
from matplotlib.patches import Patch
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# settings
sns.set_style("ticks")
rcParams['font.family'] = 'serif'
pal = {'simulated':'#597DBE', 'fasttree':'#FF0000', 'raxml':'#0000FF'}
handles = [Patch(color=pal['fasttree'],label='FastTree'),Patch(color=pal['raxml'],label='RAxML')]
axisY = np.asarray([i for i in range(-1000,1501,500)])

# DATASETS
# modifying r = lambdaA/lambdaB (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
r_original = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'score':np.array([-65344.805019,-65087.953934,-77536.817781,-73330.845949,-68336.18178,-58076.381367,-75191.469477,-57832.65113,-74355.303698,-64147.249583,-61481.735266,-76251.533817,-69584.492748,-67608.881445,-73043.53981,-64871.136564,-81469.986161,-84113.410246,-72806.323146,-63557.558655] +    # r = 0.0001
                               [-70604.619755,-78082.848925,-74842.108793,-71631.106297,-83182.250363,-69375.638849,-69188.719766,-82230.387934,-69597.395244,-74018.542767,-75799.638139,-72658.57226,-79563.402658,-71603.172437,-66696.159756,-73826.060075,-66311.608949,-79600.008888,-77912.907525,-78304.153423] +  # r = 0.001
                               [-80709.713758,-73856.529745,-75502.780961,-74540.884497,-75876.071246,-73795.052862,-77790.349577,-69038.219246,-71649.74025,-78353.178317,-76114.587871,-84358.649285,-74648.750233,-79721.722257,-73228.881099,-76690.026221,-73801.143071,-70634.246459,-75825.75293,-82096.47232] +    # r = 0.01
                               [-79243.836027,-76953.892264,-79827.205436,-81053.172297,-76722.442424,-80784.884674,-77764.21494,-80978.352122,-83201.534091,-75421.494079,-81833.045022,-74529.251689,-77814.623336,-79032.554298,-74224.632043,-83220.410071,-78129.684146,-81227.347882,-74235.527089,-76052.356011] +  # r = 0.1
                               [-80074.702932,-80747.640052,-77189.467978,-84540.239241,-78435.47821,-79833.937511,-76171.762488,-77837.804832,-84668.948038,-82383.176678,-82536.177689,-81038.89812,-78847.86538,-82849.43168,-82838.476674,-80310.97249,-81600.498221,-80919.00678,-80496.001449,-84494.605174]         # r = 1
             ).astype(float)}
r_fasttree = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'score':np.array([-65105.069023,-64692.429192,-77196.907305,-72994.620353,-67951.548517,-57653.217202,-74841.578473,-57431.887222,-73931.764436,-63906.468318,-61091.236845,-75888.692355,-69215.209843,-67274.231253,-72688.655664,-64490.042963,-81104.804753,-83866.745176,-72438.642733,-63175.999394] + # r = 0.0001
                               [-70364.025843,-77884.68447,-74704.301469,-71406.715296,-83055.967639,-69179.160611,-68996.746516,-82170.329057,-69445.855331,-73826.058665,-75647.286719,-72537.997947,-79390.277015,-71418.732604,-66444.016485,-73634.062093,-66184.129645,-79500.637317,-77735.347128,-78168.969796] +  # r = 0.001
                               [-80599.119089,-73773.892081,-75370.94377,-74413.765721,-75825.667449,-73677.47343,-77653.477309,-68897.555652,-71597.371628,-78265.152034,-76011.735771,-84252.02756,-74542.36193,-79598.637872,-73093.533946,-76559.938911,-73692.828415,-70471.567244,-75702.091503,-81962.879837] +     # r = 0.01
                               [-79170.895612,-76883.656528,-79772.957785,-80971.11659,-76656.9652,-80714.640395,-77705.198691,-80956.86449,-83141.824682,-75353.355689,-81746.133832,-74500.860156,-77763.610206,-78954.939967,-74123.90224,-83169.921912,-78051.373429,-81144.032697,-74156.513504,-75992.242751] +      # r = 0.1
                               [-80045.454382,-80691.369416,-77151.507529,-84483.376384,-78392.191461,-79755.328431,-76111.883486,-77798.040909,-84630.386992,-82338.517801,-82475.556949,-80995.341937,-78806.654744,-82782.442436,-82778.161703,-80263.010474,-81570.999846,-80845.823371,-80441.806887,-84458.295279]   # r = 1
             ).astype(float)}
r_raxml    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'score':np.array([-64721.118531,-64374.759635,-76751.227171,-72610.446826,-67594.413205,-57455.999083,-74447.766757,-57161.452022,-73559.603396,-63554.927398,-60768.286805,-75434.571043,-68836.895605,-66873.157844,-72310.605244,-64112.221652,-80655.075316,-83423.981678,-72083.686968,-62921.14995] +  # r = 0.0001
                               [-70197.75659,-77672.788142,-74480.5435,-71220.830254,-82757.526842,-69038.2907,-68821.043778,-81837.156683,-69236.312505,-73632.042184,-75439.489958,-72318.280932,-79173.762461,-71202.972023,-66305.929894,-73388.038531,-65991.590621,-79191.490262,-77546.756299,-77974.196929] +      # r = 0.001
                               [-80535.192689,-73708.555137,-75332.361563,-74363.440145,-75689.741194,-73647.046214,-77589.705993,-68823.151596,-71499.571642,-78178.398687,-75949.560934,-84141.145497,-74481.66217,-79535.633212,-73044.301514,-76489.717939,-73624.068722,-70395.752904,-75628.417073,-81903.404004] +  # r = 0.01
                               [-79163.327471,-76877.435343,-79754.585095,-80945.659055,-76620.152123,-80705.572663,-77691.742937,-80921.987699,-83118.983772,-75333.03248,-81730.896906,-74455.106224,-77737.686571,-78947.331176,-74109.226138,-83140.986949,-78031.543064,-81133.10863,-74138.343013,-75970.671609] +   # r = 0.1
                               [-80041.193787,-80679.089805,-77145.164752,-84475.727166,-78390.981748,-79752.291996,-76104.167932,-77791.669883,-84627.307431,-82329.920002,-82466.928424,-80987.146954,-78797.801663,-82779.995239,-82768.318115,-80255.160877,-81563.818961,-80843.583754,-80432.770488,-84453.658611]   # r = 1
             ).astype(float)}
''' # VALUES FROM ORIGINAL RAXML TREES
r_raxml    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'score':np.array([-64721.123522,-64375.308287,-76753.16638,-72610.48708,-67594.68259,-57457.152769,-74448.298872,-57161.452933,-73559.726652,-63553.805094,-60768.778621,-75435.023477,-68837.252485,-66873.985752,-72311.386214,-64112.30155,-80656.405399,-83424.075889,-72084.048411,-62921.895435] +     # r = 0.0001
                               [-70198.908202,-77674.555776,-74482.185636,-71220.855048,-82756.81101,-69038.527378,-68821.517183,-81838.818829,-69236.778669,-73634.197678,-75439.87469,-72324.147845,-79173.911942,-71205.840826,-66306.337949,-73388.42564,-65992.910384,-79191.845619,-77547.584867,-77974.762763] +    # r = 0.001
                               [-80535.557878,-73709.223295,-75334.876586,-74364.00186,-75693.051161,-73647.04934,-77593.640422,-68823.667881,-71501.233427,-78180.634603,-75950.828564,-84141.871288,-74483.09165,-79536.665403,-73045.400995,-76491.495545,-73624.958121,-70396.163292,-75630.964197,-81905.377818] +    # r = 0.01
                               [-79165.853342,-76878.511177,-79754.732762,-80946.472116,-76620.272196,-80706.387436,-77692.609251,-80924.296321,-83119.187674,-75333.04282,-81730.900448,-74455.670464,-77738.742946,-78947.538768,-74109.486068,-83141.401584,-78032.315448,-81133.38351,-74142.241048,-75972.593998] +   # r = 0.1
                               [-80041.291094,-80679.097956,-77146.273308,-84475.955293,-78391.116292,-79752.310414,-76105.029005,-77792.020491,-84627.353748,-82330.094032,-82467.481243,-80987.659001,-78797.932904,-82780.043583,-82768.808954,-80255.213461,-81564.218094,-80843.851505,-80433.127156,-84453.686813]   # r = 1
             ).astype(float)}
'''

# modifying r = lambdaA/lambdaB (with constant lambda = lambdaA + lambdaB)
r2_original = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
               'score':np.array([-236256.467124,-250023.837641,-241363.779049,-239382.70897,-266409.813916,-247608.52449,-238143.144138,-236259.026323,-258347.834184,-251037.976748,-251278.062054,-240224.534974,-226193.951883,-232413.145608,-240787.478327,-261263.094947,-259856.648487,-225695.185818,-227818.582575,-234274.69889] +    # r = 0.0001
                                [-135814.174694,-148912.746209,-153982.442911,-148312.58214,-152116.291691,-148726.161159,-144762.455403,-141706.013911,-155536.630086,-149635.96566,-163379.505404,-142767.148151,-140269.553949,-148459.127494,-141325.028513,-161409.186953,-141899.892038,-156817.504078,-149651.310055,-139559.662118] +   # r = 0.001
                                [-80709.713758,-73856.529745,-75502.780961,-74540.884497,-75876.071246,-73795.052862,-77790.349577,-69038.219246,-71649.74025,-78353.178317,-76114.587871,-84358.649285,-74648.750233,-79721.722257,-73228.881099,-76690.026221,-73801.143071,-70634.246459,-75825.75293,-82096.47232] +                        # r = 0.01
                                [-35845.285346,-33059.110941,-35917.548218,-33662.322982,-33638.821552,-32632.996697,-33785.499891,-35279.677502,-32376.12605,-33918.450583,-33390.547823,-37258.81427,-32504.739609,-35832.23244,-34813.792013,-34813.200713,-32919.796146,-33456.191265,-35998.851535,-34842.866508] +                        # r = 0.1
                                [-21905.608079,-22961.317257,-22918.306086,-21196.710769,-23082.935784,-22690.317373,-21237.863764,-20640.339648,-22324.766063,-22343.477924,-23014.985853,-21902.963515,-22317.217164,-21924.371242,-22222.156474,-21948.367543,-22492.45245,-22330.066312,-21858.851451,-23615.075666]                        # r = 1
              ).astype(float)}
r2_fasttree = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
               'score':np.array([-236439.166779,-250388.436316,-241568.481341,-239516.317852,-266737.634086,-247835.519401,-238520.268535,-236412.595069,-258810.775946,-251369.270154,-251502.962126,-240483.078396,-226374.527509,-232676.529191,-240948.873299,-261413.295522,-259999.226604,-225942.529989,-227974.695984,-234428.349187] + # r = 0.0001
                                [-135726.864667,-148902.605241,-153877.587411,-148311.164318,-152047.483619,-148675.023377,-144711.066305,-141728.007453,-155531.968163,-149654.835953,-163571.607168,-142703.822596,-140230.590302,-148427.260126,-141280.695189,-161448.01874,-141921.045471,-157004.81007,-149606.841974,-139623.741341] +   # r = 0.001
                                [-80599.119089,-73773.892081,-75370.94377,-74413.765721,-75825.667449,-73677.47343,-77653.477309,-68897.555652,-71597.371628,-78265.152034,-76011.735771,-84252.02756,-74542.36193,-79598.637872,-73093.533946,-76559.938911,-73692.828415,-70471.567244,-75702.091503,-81962.879837] +                         # r = 0.01
                                [-35771.137429,-32968.534222,-35804.317981,-33559.273332,-33565.16735,-32547.713555,-33707.879882,-35216.026037,-32289.39565,-33814.275362,-33353.022749,-37155.095489,-32423.22945,-35741.388096,-34700.838726,-34738.099985,-32842.218661,-33394.784362,-35905.743146,-34768.717226] +                        # r = 0.1
                                [-21852.738817,-22907.328111,-22862.21704,-21128.228771,-22999.511221,-22637.67086,-21175.301628,-20593.212842,-22268.653821,-22283.529714,-22950.045663,-21860.162822,-22267.170094,-21853.311863,-22157.90734,-21892.851238,-22450.192316,-22280.072507,-21811.196995,-23555.628946]                          # r = 1
              ).astype(float)}
r2_raxml    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
               'score':np.array([-235574.741791,-249220.874747,-240638.447876,-238609.549095,-265516.697447,-246721.620519,-237464.350192,-235589.729779,-257556.012482,-250186.638542,-250470.247891,-239538.707691,-225549.414833,-231745.225374,-239917.56926,-260256.542401,-259022.367908,-225099.675647,-227206.98245,-233544.493987] +   # r = 0.0001
                                [-135512.870199,-148569.683831,-153616.635783,-147979.178882,-151757.990618,-148382.101873,-144392.462023,-141407.571682,-155197.626815,-149286.610995,-163018.799323,-142453.61547,-139919.52801,-148068.460875,-140976.659163,-161010.157229,-141587.768279,-156459.791308,-149295.660669,-139265.744311] +   # r = 0.001
                                [-80535.192689,-73708.555137,-75332.361563,-74363.440145,-75689.741194,-73647.046214,-77589.705993,-68823.151596,-71499.571642,-78178.398687,-75949.560934,-84141.145497,-74481.66217,-79535.633212,-73044.301514,-76489.717939,-73624.068722,-70395.752904,-75628.417073,-81903.404004] +                      # r = 0.01
                                [-35763.119438,-32954.34694,-35793.695426,-33550.786635,-33558.806236,-32542.226895,-33699.236866,-35207.376367,-32282.648829,-33806.054587,-33332.956736,-37150.196243,-32407.699782,-35723.368844,-34690.343776,-34734.906041,-32841.618613,-33381.421215,-35889.948391,-34760.914439] +                      # r = 0.1
                                [-21847.942429,-22905.408949,-22848.457282,-21126.413155,-23001.125475,-22639.385886,-21171.568869,-20593.213282,-22269.359852,-22278.964182,-22945.307356,-21852.783043,-22263.406008,-21851.436228,-22155.385409,-21888.75604,-22442.992448,-22276.462001,-21809.224968,-23552.572865]                        # r = 1
              ).astype(float)}
''' # VALUES FROM ORIGINAL RAXML TREES
r2_raxml    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
               'score':np.array([-235580.946859,-249229.140054,-240641.432684,-238616.634205,-265524.222245,-246726.273561,-237468.393668,-235593.241418,-257562.957926,-250195.206504,-250478.523172,-239549.614943,-225552.719327,-231751.826368,-239922.620689,-260261.133918,-259024.463547,-225105.912546,-227212.282473,-233547.822149] + # r = 0.0001
                                [-135514.92689,-148571.046519,-153620.648384,-147981.815493,-151760.858318,-148383.588188,-144395.187105,-141409.240367,-155200.186426,-149289.05166,-163022.3919,-142457.833496,-139923.479332,-148070.914016,-140979.687737,-161011.530126,-141588.990224,-156466.338382,-149298.311138,-139269.167583] +     # r = 0.001
                                [-80535.557878,-73709.223295,-75334.876586,-74364.00186,-75693.051161,-73647.04934,-77593.640422,-68823.667881,-71501.233427,-78180.634603,-75950.828564,-84141.871288,-74483.09165,-79536.665403,-73045.400995,-76491.495545,-73624.958121,-70396.163292,-75630.964197,-81905.377818] +                        # r = 0.01
                                [-35763.161165,-32954.35513,-35793.693671,-33550.787905,-33559.685265,-32543.011277,-33699.277179,-35207.757029,-32283.240177,-33807.0679,-33333.07508,-37150.412292,-32407.78614,-35724.737924,-34690.523234,-34734.907654,-32841.921015,-33382.304725,-35889.961281,-34761.915418] +                          # r = 0.1
                                [-21847.942351,-22906.97689,-22848.456071,-21126.414125,-23001.260451,-22639.3986,-21172.096633,-20593.219783,-22269.359997,-22278.988994,-22945.30739,-21852.78637,-22263.405948,-21851.602449,-22155.154179,-21888.761449,-22442.997626,-22276.462972,-21809.225555,-23554.412751]                            # r = 1
              ).astype(float)}
'''

# modifying lambda = lambdaA + lambdaB
l_original = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'score':np.array([-204245.615253,-201284.899112,-198871.130795,-199872.051165,-205233.812877,-205836.657396,-194362.070201,-190457.653322,-192830.888197,-206681.549895,-206535.600977,-211797.35904,-205278.972015,-199141.86768,-203041.047569,-200945.747602,-194344.417256,-199046.801035,-187682.659769,-196759.491554] +  # lambda = 33.86550309051126
                               [-120350.879199,-119941.672017,-126599.019881,-118169.660309,-126140.308632,-116942.599765,-122667.570408,-114585.052621,-111016.548266,-116567.68295,-132319.047492,-115660.245328,-118480.806851,-118036.823202,-111673.399418,-123846.136722,-131048.843621,-119938.235504,-111013.923595,-113123.105095] + # lambda = 84.66375772627816
                               [-80709.713758,-73856.529745,-75502.780961,-74540.884497,-75876.071246,-73795.052862,-77790.349577,-69038.219246,-71649.74025,-78353.178317,-76114.587871,-84358.649285,-74648.750233,-79721.722257,-73228.881099,-76690.026221,-73801.143071,-70634.246459,-75825.75293,-82096.47232] +                       # lambda = 169.32751545255631
                               [-44951.182445,-43749.633709,-46840.477031,-48466.081368,-48047.92942,-45363.755123,-43481.621241,-40162.231945,-44878.390607,-43472.151444,-38743.144318,-45888.433848,-42337.312471,-44553.235562,-43632.041589,-43728.05823,-44341.504795,-40472.50287,-44667.771888,-43936.559002] +                       # lambda = 338.65503090511262
                               [-22169.782681,-22349.805321,-20630.157362,-22782.605812,-19787.398678,-19936.376809,-19659.683747,-24155.51329,-22541.951944,-20742.573043,-21974.240307,-21484.32314,-21624.677105,-22084.791005,-20936.797017,-23027.682351,-22291.457808,-20355.124556,-20691.580559,-21069.813179]                        # lambda = 846.63757726278155
             ).astype(float)}
l_fasttree = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'score':np.array([-204176.337082,-201231.821716,-198776.912473,-199756.238198,-205168.05148,-205778.762629,-194300.938601,-190449.0061,-192736.882166,-206590.704835,-206438.019061,-211668.367679,-205160.734401,-199131.873722,-203026.605442,-200811.42472,-194252.335973,-198965.048437,-187671.906563,-196648.298934] +    # lambda = 33.86550309051126
                               [-120270.315508,-119857.772925,-126514.207224,-118088.464803,-126034.231446,-116839.763365,-122564.424753,-114490.85497,-110913.980745,-116490.520455,-132252.136539,-115615.188611,-118424.948404,-117894.96248,-111578.288458,-123799.967761,-130946.576273,-119852.961529,-110972.390422,-113018.36769] +   # lambda = 84.66375772627816
                               [-80599.119089,-73773.892081,-75370.94377,-74413.765721,-75825.667449,-73677.47343,-77653.477309,-68897.555652,-71597.371628,-78265.152034,-76011.735771,-84252.02756,-74542.36193,-79598.637872,-73093.533946,-76559.938911,-73692.828415,-70471.567244,-75702.091503,-81962.879837] +                        # lambda = 169.32751545255631
                               [-44776.652091,-43572.51723,-46656.117356,-48322.098398,-47900.81747,-45216.301312,-43325.203743,-39977.777313,-44689.851032,-43283.766797,-38617.329733,-45751.725817,-42175.173683,-44419.209114,-43485.670125,-43543.918847,-44230.281615,-40357.632607,-44530.647293,-43802.339858] +                      # lambda = 338.65503090511262
                               [-21969.597168,-22185.350041,-20488.748016,-22631.716475,-19577.954954,-19765.430837,-19442.96796,-24007.38831,-22381.020646,-20602.304115,-21777.299401,-21336.907614,-21462.500201,-21922.608076,-20793.393126,-22875.233393,-22124.615336,-20217.198626,-20517.313612,-20886.05985]                         # lambda = 846.63757726278155
             ).astype(float)}
l_raxml    = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'score':np.array([-203993.020891,-201087.316648,-198664.078499,-199650.983396,-205005.222684,-205648.13277,-194145.718224,-190256.978101,-192658.431862,-206450.731509,-206339.681145,-211571.876787,-205056.5885,-198981.450273,-202880.523446,-200739.968871,-194156.64421,-198863.777106,-187504.943736,-196550.430048] +    # lambda = 33.86550309051126
                               [-120167.239906,-119761.157032,-126437.913559,-118004.867763,-125959.217572,-116775.671904,-122495.224275,-114427.638488,-110832.230156,-116383.844299,-132126.301333,-115495.062155,-118311.036137,-117835.929504,-111514.767388,-123678.213696,-130879.53155,-119744.047589,-110866.243906,-112939.771928] + # lambda = 84.66375772627816
                               [-80535.192689,-73708.555137,-75332.361563,-74363.440145,-75689.741194,-73647.046214,-77589.705993,-68823.151596,-71499.571642,-78178.398687,-75949.560934,-84141.145497,-74481.66217,-79535.633212,-73044.301514,-76489.717939,-73624.068722,-70395.752904,-75628.417073,-81903.404004] +                     # lambda = 169.32751545255631
                               [-44730.693262,-43524.307496,-46612.867574,-48254.073328,-47867.153974,-45145.872914,-43291.631825,-39919.655429,-44657.93738,-43251.943713,-38595.56485,-45694.685785,-42147.851569,-44364.93605,-43425.168599,-43512.864624,-44180.620174,-40299.432238,-44480.88418,-43760.745733] +                        # lambda = 338.65503090511262
                               [-21943.84095,-22156.599184,-20461.434763,-22616.728793,-19559.27898,-19751.912801,-19433.692035,-23970.426676,-22374.749785,-20581.172189,-21772.342652,-21315.970961,-21442.802081,-21900.026161,-20769.191062,-22834.579202,-22086.846738,-20210.554136,-20504.872966,-20869.928059]                        # lambda = 846.63757726278155
             ).astype(float)}
''' # VALUES FROM ORIGINAL RAXML TREES
l_raxml    = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'score':np.array([-203995.742781,-201092.162149,-198666.380373,-199657.368266,-205009.918424,-205652.933685,-194150.337095,-190262.259673,-192663.422418,-206454.380628,-206341.689778,-211573.962691,-205060.130296,-198987.365255,-202883.48317,-200741.461655,-194160.899977,-198864.764613,-187510.577368,-196552.518186] + # lambda = 33.86550309051126
                               [-120167.990367,-119763.004838,-126441.167923,-118006.867297,-125962.580048,-116779.1658,-122497.452798,-114429.121436,-110832.537675,-116384.517135,-132129.364892,-115497.263062,-118313.98356,-117836.333433,-111518.088573,-123679.007989,-130882.633152,-119745.802142,-110867.016279,-112944.486125] +   # lambda = 84.66375772627816
                               [-80535.557878,-73709.223295,-75334.876586,-74364.00186,-75693.051161,-73647.04934,-77593.640422,-68823.667881,-71501.233427,-78180.634603,-75950.828564,-84141.871288,-74483.09165,-79536.665403,-73045.400995,-76491.495545,-73624.958121,-70396.163292,-75630.964197,-81905.377818] +                       # lambda = 169.32751545255631
                               [-44730.829066,-43524.818528,-46613.657435,-48255.790227,-47867.621534,-45146.284118,-43292.71421,-39919.739712,-44658.02566,-43253.315939,-38597.345364,-45695.480357,-42147.854432,-44365.446,-43426.940668,-43512.865958,-44181.699209,-40301.076397,-44481.769691,-43762.045056] +                         # lambda = 338.65503090511262
                               [-21943.832013,-22156.597311,-20461.434712,-22616.779686,-19559.280914,-19752.825988,-19433.692144,-23970.42703,-22375.417575,-20582.002617,-21772.342883,-21316.757901,-21442.822396,-21900.092169,-20769.866547,-22834.580211,-22086.845609,-20210.613638,-20505.260955,-20870.340831]                       # lambda = 846.63757726278155
             ).astype(float)}
'''

# modifying sequence length
k_original = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'score':np.array([-11824.78982,-11920.742904,-11924.344755,-12037.143475,-10195.597442,-12578.443796,-11517.811418,-10914.947053,-12684.965474,-11624.995311,-11423.788527,-11095.062372,-11694.243672,-11245.774185,-11992.284094,-11528.992095,-12274.616125,-12729.893738,-12904.35377,-11793.859529] +                       # length = 50
                               [-22245.185242,-24816.013716,-24029.930142,-24003.493759,-24602.119369,-24170.979354,-23189.827768,-26573.645892,-23987.192147,-21402.164644,-25299.910585,-21522.003548,-24088.788589,-23367.614589,-24705.110031,-25499.928237,-25075.080702,-24745.872506,-23933.671953,-22829.850478] +                     # length = 100
                               [-50648.551301,-49537.068296,-50150.193402,-53035.864207,-48848.771252,-54038.869595,-45487.439417,-48933.421881,-50411.383606,-46040.23941,-50377.110484,-52338.034912,-48158.08392,-49905.622416,-48693.080697,-53972.321632,-48778.323341,-51371.171655,-46615.948843,-48541.588926] +                       # length = 200
                               [-80709.713758,-73856.529745,-75502.780961,-74540.884497,-75876.071246,-73795.052862,-77790.349577,-69038.219246,-71649.74025,-78353.178317,-76114.587871,-84358.649285,-74648.750233,-79721.722257,-73228.881099,-76690.026221,-73801.143071,-70634.246459,-75825.75293,-82096.47232] +                        # length = 300
                               [-154781.326226,-143746.802629,-158638.576854,-163862.305543,-151137.217954,-148010.637734,-149837.700916,-135201.073585,-150538.124858,-150004.600409,-154904.635046,-150987.249121,-145988.509367,-151054.326992,-156756.740042,-154040.272304,-149628.846224,-148977.010032,-158983.316775,-161217.671405] + # length = 600
                               [-311370.234492,-294222.167147,-291385.797846,-283764.993689,-301883.805502,-311572.926656,-297191.194478,-304104.683382,-297198.547272,-315608.662203,-321687.459328,-313056.743233,-296936.612989,-315601.023613,-301143.798606,-279677.433464,-304005.05335,-304987.778658,-314120.231998,-310177.207797] +  # length = 1200
                               [-619525.63515,-624948.214435,-574049.285655,-559511.548817,-603898.285083,-602789.292988,-586057.030246,-584190.237726,-636595.098751,-604873.905675,-617199.449508,-557478.007063,-650297.414261,-609242.915399,-590644.878177,-612363.76339,-574535.435938,-636099.53375,-601794.352843,-569642.449589] +    # length = 2400
                               [-1392825.95824,-1261559.2846,-1168723.31978,-1242807.65419,-1200829.75283,-1195134.97545,-1187708.4166,-1184842.46223,-1294313.67845,-1081755.40518,-1165650.09341,-1238825.91376,-1153638.38064,-1172927.07853,-1135747.89392,-1144395.48536,-1281652.95996,-1237335.95239,-1237623.27863,-1228867.56045]     # length = 4800
             ).astype(float)}
k_fasttree = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'score':np.array([-11444.278234,-11541.423323,-11614.664312,-11731.697591,-9867.550132,-12171.992302,-11111.308774,-10578.979619,-12344.560131,-11248.021328,-11095.407942,-10708.282538,-11327.223671,-10926.127482,-11702.093898,-11220.734572,-11879.808065,-12343.484461,-12584.348403,-11435.50761] +                       # length = 50
                               [-21948.121563,-24619.280047,-23733.789352,-23771.635975,-24382.497162,-23987.468601,-22905.543932,-26331.866322,-23762.750309,-21208.018907,-25044.226613,-21290.106806,-23801.54588,-23112.901823,-24490.21867,-25282.949696,-24805.945582,-24540.523538,-23713.224691,-22613.235942] +                       # length = 100
                               [-50504.456946,-49385.211251,-50053.028792,-52901.018667,-48707.712541,-53859.026098,-45395.214396,-48792.171251,-50264.327888,-45943.843404,-50204.523793,-52175.535593,-48008.105893,-49747.923288,-48550.608094,-53839.760716,-48589.384987,-51214.275342,-46442.813706,-48378.643576] +                     # length = 200
                               [-80599.119089,-73773.892081,-75370.94377,-74413.765721,-75825.667449,-73677.47343,-77653.477309,-68897.555652,-71597.371628,-78265.152034,-76011.735771,-84252.02756,-74542.36193,-79598.637872,-73093.533946,-76559.938911,-73692.828415,-70471.567244,-75702.091503,-81962.879837] +                         # length = 300
                               [-154714.92933,-143668.5171,-158541.998222,-163770.32974,-151110.94828,-147958.552308,-149810.581289,-135123.672148,-150512.626022,-149914.535215,-154824.328781,-150926.562031,-145929.572757,-150942.970401,-156679.251953,-153928.716013,-149573.863724,-148887.487502,-158916.670236,-161150.355127] +      # length = 600
                               [-311382.711578,-294174.70529,-291324.358166,-283706.684356,-301881.724563,-311502.374454,-297143.400984,-304059.482925,-297133.820157,-315560.035224,-321639.209487,-313002.912004,-296899.885641,-315554.811897,-301090.138484,-279644.563884,-303972.711523,-304968.412307,-314114.974682,-310162.279693] +  # length = 1200
                               [-619493.670459,-624914.470419,-574039.161379,-559509.380428,-603859.780892,-602776.107455,-586038.966233,-584161.752044,-636535.189908,-604851.329752,-617170.560057,-557432.091631,-650271.36634,-609229.71344,-590646.958569,-612323.757381,-574500.296352,-636052.816754,-601760.230439,-569621.486779] +   # length = 2400
                               [-1392793.72027,-1261542.24155,-1168701.58399,-1242810.07221,-1200801.06248,-1195101.92996,-1187681.18502,-1184817.6489,-1294296.50954,-1081752.17972,-1165613.03877,-1238809.01812,-1153606.56435,-1172902.31442,-1135726.76105,-1144371.88283,-1281647.56296,-1237318.9273,-1237589.12818,-1228858.89185]     # length = 4800
             ).astype(float)}
k_raxml    = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'score':np.array([-11344.047048,-11442.660455,-11522.236566,-11614.701737,-9773.268187,-12047.023895,-10996.257751,-10464.102248,-12256.139527,-11123.356983,-11001.349919,-10628.363656,-11244.257187,-10823.189209,-11592.481667,-11098.660735,-11739.912416,-12244.419075,-12435.765318,-11275.844673] +                      # length = 50
                               [-21863.499018,-24507.842067,-23656.63399,-23666.54028,-24282.774609,-23856.920092,-22866.945254,-26213.941671,-23651.33114,-21088.363891,-24978.860234,-21189.347169,-23696.21736,-23025.03517,-24378.404536,-25179.168475,-24744.331518,-24461.812871,-23644.969585,-22525.211865] +                          # length = 100
                               [-50431.859782,-49313.398969,-49933.944281,-52782.043453,-48630.586443,-53788.768665,-45270.301834,-48720.274853,-50212.849392,-45836.056055,-50134.868194,-52088.023281,-47945.920479,-49643.871352,-48479.717555,-53724.491994,-48512.946906,-51115.108569,-46363.873721,-48308.972982] +                     # length = 200
                               [-80535.192689,-73708.555137,-75332.361563,-74363.440145,-75689.741194,-73647.046214,-77589.705993,-68823.151596,-71499.571642,-78178.398687,-75949.560934,-84141.145497,-74481.66217,-79535.633212,-73044.301514,-76489.717939,-73624.068722,-70395.752904,-75628.417073,-81903.404004] +                      # length = 300
                               [-154663.905342,-143631.407744,-158508.178585,-163724.962096,-151033.499394,-147893.487771,-149743.010901,-135108.352473,-150422.799607,-149884.694121,-154767.641565,-150860.368728,-145884.105638,-150905.766125,-156629.306914,-153885.244028,-149515.190182,-148861.980518,-158849.288002,-161087.695383] + # length = 600
                               [-311323.38284,-294152.839453,-291303.091466,-283690.055631,-301827.147383,-311455.80227,-297106.96555,-304025.644497,-297115.995018,-315534.863742,-321594.801501,-312956.186824,-296858.587772,-315519.222298,-301062.662325,-279603.788508,-303916.19956,-304927.142155,-314049.834853,-310093.403099] +     # length = 1200
                               [-619471.372422,-624897.630666,-573996.698323,-559466.37168,-603842.618681,-602742.240624,-586019.861163,-584141.94988,-636530.146577,-604831.769545,-617158.478585,-557431.790793,-650256.959929,-609206.394568,-590620.243241,-612311.160347,-574477.533539,-636033.069045,-601752.29391,-569602.651538] +    # length = 2400
                               [-1392793.12715,-1261535.93573,-1168694.66344,-1242783.38836,-1200799.89699,-1195094.68449,-1187677.6558,-1184807.28012,-1294279.24867,-1081736.4748,-1165605.82221,-1238789.12386,-1153599.66841,-1172888.10098,-1135713.01726,-1144369.25804,-1281624.23092,-1237314.17357,-1237586.38507,-1228832.67854]     # length = 4800
             ).astype(float)}
''' # VALUES FROM ORIGINAL RAXML TREES
k_raxml    = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'score':np.array([-11344.047107,-11443.710028,-11521.888858,-11614.842929,-9772.126082,-12046.946716,-10996.88477,-10464.486741,-12255.939373,-11125.388915,-11001.501214,-10627.491293,-11244.217887,-10823.436865,-11592.591271,-11098.660509,-11738.749024,-12244.439222,-12436.079991,-11278.001791] +                       # length = 50
                               [-21865.033019,-24510.990737,-23658.452346,-23660.804788,-24282.483943,-23856.979865,-22866.9545,-26214.078363,-23651.186237,-21088.369596,-24978.806451,-21189.401858,-23696.337128,-23026.480471,-24379.113953,-25178.975096,-24745.02443,-24462.990913,-23644.970083,-22525.368442] +                        # length = 100
                               [-50433.280784,-49314.483237,-49934.15518,-52783.2709,-48631.296591,-53789.687323,-45271.680078,-48720.763577,-50213.264673,-45836.352094,-50136.328368,-52089.325327,-47946.070484,-49644.138498,-48480.378622,-53725.296491,-48513.524184,-51116.149191,-46366.14117,-48309.076222] +                         # length = 200
                               [-80535.557878,-73709.223295,-75334.876586,-74364.00186,-75693.051161,-73647.04934,-77593.640422,-68823.667881,-71501.233427,-78180.634603,-75950.828564,-84141.871288,-74483.09165,-79536.665403,-73045.400995,-76491.495545,-73624.958121,-70396.163292,-75630.964197,-81905.377818] +                        # length = 300
                               [-154664.697045,-143632.221635,-158508.795318,-163726.29353,-151035.004856,-147893.785028,-149744.803859,-135110.880518,-150423.415558,-149888.013521,-154768.047588,-150861.670856,-145886.898339,-150906.724367,-156630.852593,-153885.997485,-149517.580203,-148862.979385,-158851.036098,-161089.838035] +  # length = 600
                               [-311326.422103,-294154.793169,-291306.646821,-283692.950758,-301829.146167,-311457.433519,-297109.428139,-304029.226007,-297118.345751,-315539.449986,-321596.560734,-312958.369213,-296859.515933,-315525.437932,-301064.182042,-279605.009461,-303917.649158,-304932.37279,-314053.796505,-310093.688546] +  # length = 1200
                               [-619474.614217,-624900.475253,-573997.664608,-559474.713199,-603845.624432,-602744.839988,-586022.474184,-584148.782609,-636537.104312,-604840.547649,-617167.856386,-557436.679361,-650265.925332,-609209.392736,-590627.504433,-612313.321301,-574480.189542,-636034.461169,-601756.498862,-569605.864631] + # length = 2400
                               [-1392802.91764,-1261542.98522,-1168698.40735,-1242787.76763,-1200803.57245,-1195099.50114,-1187681.97171,-1184811.74691,-1294288.2022,-1081743.3261,-1165620.7669,-1238790.06061,-1153608.18857,-1172898.37274,-1135714.78391,-1144371.6505,-1281630.05009,-1237322.8739,-1237589.92356,-1228838.82983]        # length = 4800
             ).astype(float)}
'''

# modifying deviation from ultrametricity
g_original = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'score':np.array([-69454.157129,-71154.80374,-69147.569445,-70336.345043,-69944.566185,-78034.211638,-68950.979781,-71408.735648,-72561.902085,-70265.913277,-64709.837164,-70699.373286,-69075.663891,-69102.133033,-78848.723824,-68499.685918,-72705.912686,-74133.47754,-71159.038468,-67283.573887] +   # gamma = 2.95181735298926
                               [-71271.240616,-73670.199436,-77466.87252,-75998.23364,-77146.917587,-66125.777325,-72273.613299,-71720.253305,-81353.161218,-76366.023776,-70124.088539,-72145.53252,-71679.177473,-81678.572526,-78178.938234,-76488.551478,-70966.928638,-72336.559308,-73293.541981,-75092.709405] +    # gamma = 5.90363470597852
                               [-80709.713758,-73856.529745,-75502.780961,-74540.884497,-75876.071246,-73795.052862,-77790.349577,-69038.219246,-71649.74025,-78353.178317,-76114.587871,-84358.649285,-74648.750233,-79721.722257,-73228.881099,-76690.026221,-73801.143071,-70634.246459,-75825.75293,-82096.47232] +    # gamma = 29.518173529892621
                               [-71791.316251,-76206.736536,-70307.232387,-74147.587305,-75550.967808,-77465.162215,-76690.565183,-72574.720846,-76719.645321,-75355.1989,-71931.509587,-74050.719225,-71268.752472,-82966.626179,-71146.883033,-76264.344907,-78745.462068,-71079.514521,-76201.708644,-78571.467462] +   # gamma = 147.590867649463
                               [-71231.664043,-75239.343644,-73444.482904,-78940.474355,-77077.312258,-75197.374554,-75845.02561,-75078.000052,-72335.497956,-75595.748914,-75414.478986,-73519.250354,-72009.266028,-71628.146353,-72418.667872,-79892.456782,-74032.525351,-70137.996546,-78863.116748,-73247.364139] +  # gamma = 295.181735298926
                               [-75061.153472,-75041.16209,-80020.493496,-72456.621318,-75091.268953,-78418.671358,-74429.798821,-74031.128499,-79791.041555,-67903.961033,-74769.948888,-78393.250267,-74630.659167,-73350.94211,-79450.92255,-75491.358843,-80003.4645,-66913.839715,-79772.775777,-77133.054512]        # gamma = infinity
             ).astype(float)}
g_fasttree = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'score':np.array([-69405.287918,-71001.558694,-69068.624206,-70232.524062,-69844.5885,-77906.694809,-68886.549748,-71284.447281,-72465.047356,-70119.822786,-64592.969474,-70603.780995,-69014.965265,-69015.969035,-78781.580236,-68425.653413,-72581.929813,-74016.071463,-71102.589889,-67187.567331] +   # gamma = 2.95181735298926
                               [-71125.741312,-73550.86494,-77345.881452,-75907.942586,-77002.223667,-66029.582043,-72164.799305,-71654.197452,-81245.489647,-76217.944876,-70006.345895,-72051.489031,-71566.739831,-81604.309442,-78092.495355,-76444.290595,-70908.150348,-72255.254515,-73157.029476,-75023.976705] +  # gamma = 5.90363470597852
                               [-80599.119089,-73773.892081,-75370.94377,-74413.765721,-75825.667449,-73677.47343,-77653.477309,-68897.555652,-71597.371628,-78265.152034,-76011.735771,-84252.02756,-74542.36193,-79598.637872,-73093.533946,-76559.938911,-73692.828415,-70471.567244,-75702.091503,-81962.879837] +     # gamma = 29.518173529892621
                               [-71686.853967,-76081.284983,-70198.842209,-74029.787983,-75428.569598,-77333.912175,-76553.705589,-72464.200999,-76582.144888,-75268.373748,-71804.268616,-73935.150466,-71132.817034,-82826.902605,-71075.115504,-76173.681336,-78649.29368,-70993.350302,-76091.088731,-78456.687039] +  # gamma = 147.590867649463
                               [-71164.265335,-75167.016152,-73365.309494,-78870.657419,-76982.774558,-75138.272853,-75719.656942,-74928.650481,-72205.890946,-75538.48194,-75330.05686,-73400.847007,-71904.68119,-71513.237511,-72299.413297,-79763.304742,-73889.476081,-70034.404252,-78745.942972,-73120.262629] +    # gamma = 295.181735298926
                               [-74913.829411,-74921.305095,-79867.627223,-72338.323072,-74979.38247,-78283.509404,-74301.538401,-73879.729313,-79684.64058,-67772.8561,-74596.780493,-78290.868303,-74496.363218,-73253.96772,-79315.987446,-75357.835105,-79934.470496,-66834.873871,-79643.41416,-77066.064235]         # gamma = infinity
             ).astype(float)}
g_raxml    = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'score':np.array([-69281.550782,-70927.439609,-68977.194444,-70158.267336,-69763.552462,-77819.143633,-68789.166026,-71235.787677,-72371.744631,-70045.719234,-64521.799528,-70514.73134,-68916.709848,-68939.847347,-78647.040095,-68331.70456,-72471.359566,-73909.923919,-70998.217878,-67110.445351] +   # gamma = 2.95181735298926
                               [-71035.122286,-73485.395459,-77271.259487,-75811.339897,-76913.13294,-65941.729788,-72084.078681,-71568.243121,-81127.882406,-76171.374418,-69954.908347,-71954.435787,-71512.372923,-81501.071234,-78004.739908,-76271.02909,-70811.406063,-72120.612346,-73111.484883,-74912.064778] +   # gamma = 5.90363470597852
                               [-80535.192689,-73708.555137,-75332.361563,-74363.440145,-75689.741194,-73647.046214,-77589.705993,-68823.151596,-71499.571642,-78178.398687,-75949.560934,-84141.145497,-74481.66217,-79535.633212,-73044.301514,-76489.717939,-73624.068722,-70395.752904,-75628.417073,-81903.404004] +  # gamma = 29.518173529892621
                               [-71636.295963,-76021.681354,-70160.594858,-73994.810347,-75361.19572,-77258.115507,-76485.381979,-72383.374838,-76518.557713,-75192.694056,-71732.902973,-73876.081837,-71072.751397,-82751.401772,-70980.152569,-76108.026956,-78575.354909,-70922.634075,-76002.260227,-78375.616947] +  # gamma = 147.590867649463
                               [-71056.616462,-75099.807973,-73287.099879,-78802.49568,-76895.883042,-75060.225868,-75672.687481,-74868.444427,-72159.030741,-75426.770368,-75216.015495,-73351.919669,-71823.748041,-71438.463368,-72246.702954,-79687.707027,-73840.095743,-69992.264909,-78682.77845,-73081.858209] +   # gamma = 295.181735298926
                               [-74855.0668,-74872.663854,-79802.082086,-72253.816097,-74917.99413,-78223.010422,-74249.563659,-73845.208475,-79619.875835,-67716.072744,-74546.83264,-78198.458195,-74438.5241,-73176.347708,-79227.524504,-75283.4066,-79822.202316,-66776.430099,-79584.27865,-76972.933281]            # gamma = infinity
             ).astype(float)}
''' # VALUES FROM ORIGINAL RAXML TREES
g_raxml    = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'score':np.array([-69282.751583,-70928.004495,-68978.694437,-70158.563299,-69763.814181,-77819.166669,-68792.056337,-71237.84944,-72372.770861,-70045.956835,-64521.523163,-70515.758914,-68918.664415,-68941.191078,-78652.40526,-68332.573368,-72471.638421,-73910.227114,-70999.9454,-67111.29545] +      # gamma = 2.95181735298926
                               [-71036.023807,-73485.970756,-77274.71672,-75811.363084,-76914.477223,-65944.34246,-72087.315613,-71568.456177,-81128.450638,-76172.860103,-69955.745329,-71954.487768,-71513.898287,-81502.728144,-78005.022316,-76271.89057,-70812.276675,-72120.941761,-73112.94888,-74913.546976] +     # gamma = 5.90363470597852
                               [-80535.557878,-73709.223295,-75334.876586,-74364.00186,-75693.051161,-73647.04934,-77593.640422,-68823.667881,-71501.233427,-78180.634603,-75950.828564,-84141.871288,-74483.09165,-79536.665403,-73045.400995,-76491.495545,-73624.958121,-70396.163292,-75630.964197,-81905.377818] +    # gamma = 29.518173529892621
                               [-71636.470184,-76023.644162,-70161.968992,-73995.894943,-75362.325157,-77259.653833,-76486.468662,-72384.370307,-76518.941553,-75194.312544,-71734.933362,-73876.160116,-71073.031957,-82753.558486,-70982.404732,-76108.506668,-78576.046645,-70923.246314,-76003.609075,-78377.376875] + # gamma = 147.590867649463
                               [-71058.502363,-75100.518668,-73288.285029,-78804.183744,-76897.334195,-75060.482987,-75673.947569,-74868.992215,-72159.961245,-75426.864197,-75217.268842,-73352.945042,-71826.596587,-71440.299117,-72247.885816,-79688.551592,-73840.338055,-69993.886605,-78684.38724,-73082.35793] +   # gamma = 295.181735298926
                               [-74856.219982,-74873.878053,-79806.18505,-72255.20096,-74918.259718,-78225.023354,-74251.282244,-73845.322323,-79620.261825,-67717.260232,-74547.991928,-78199.163566,-74439.159982,-73177.616784,-79229.17756,-75284.8596,-79825.570507,-66776.901486,-79586.526602,-76974.514182]        # gamma = infinity
             ).astype(float)}
'''

# modifying n
n_fasttree = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'score':np.array([2.553719,1.59162,0.15927,2.302307,5.644638,5.702009,3.975923,-1.417003,0.466599,2.074479,6.416957,1.604742,0.000633,0.628374,5.076548,0.793097,2.571294,0.83539,1.011658,2.428829] + # n = 25
                               [2.522978,3.036117,6.091044,5.604324,13.07789,15.090545,6.586299,8.526834,-4.640891,7.926857,9.731932,7.914527,0.799637,5.971405,-6.489723,2.946664,5.835776,1.404674,3.133966,4.45529] + # n = 50
                               [34.21515,33.660909,26.253199,5.69123,42.714256,23.968124,42.416078,23.225456,17.55803,11.283666,22.313346,35.107251,5.771281,18.254338,40.211708,44.469623,23.777657,22.514452,30.149625,17.75481] + # n = 250
                               [80.549219,27.319235,66.48392,46.026542,80.026585,42.70561,71.653989,55.418383,37.363895,58.278416,61.454227,47.993757,81.71128,48.612045,56.066744,18.971579,37.505909,34.869832,51.342313,41.789949] + # n = 500
                               [110.594799,82.417724,131.699734,127.123887,50.357407,117.583231,136.812772,140.662363,52.354899,88.016958,102.843802,106.618877,106.374805,123.055934,135.332397,130.085503,108.284031,162.676886,123.634518,133.581771] + # n = 1000
                               [182.004383,186.90385,266.756931,226.425903,143.188234,215.690189,199.084194,163.298967,225.729808,173.714964,171.179504,207.991447,251.155269,214.659698,257.58345,249.541515,228.92303,236.210803,199.637298,254.818601] + # n = 2000
                               [334.133345,439.630512,458.939156,515.734301,414.675558,461.135278,556.894532,479.321821,413.076589,453.231773,358.211005,453.960328,425.213744,334.809898,509.725731,398.365774,449.047575,490.734605,423.962697,403.3844]   # n = 4000
             ).astype(float)}
n_raxml    = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'score':np.array([3.126333,3.694069,0.485275,3.049633,5.806828,5.69216,4.094939,9.3e-05,0.440221,1.295452,6.415636,1.604742,0.000667,1.350705,5.321059,6.112365,2.571304,0.83539,1.453968,2.428281] + # n = 25
                               [2.741544,3.207842,6.443235,5.604291,13.269164,15.090436,7.735385,9.491638,8.5779,7.925132,10.467574,7.914534,7.399153,10.007575,2.503534,6.303063,7.099242,3.169774,6.602968,7.844635] + # n = 50
                               [41.758094,49.267218,45.226708,30.51731,52.476896,43.868406,49.038052,40.879886,34.400603,37.202023,40.093543,40.680391,34.13625,34.347052,54.011984,54.75985,31.960969,29.712543,34.258903,37.413251] + # n = 250
                               [88.102496,52.788837,93.584729,76.353379,104.716428,101.425549,91.718632,74.892625,87.989436,93.350506,93.106205,84.878242,109.811136,79.665589,79.981789,69.691096,89.257384,86.651009,67.198488,102.429613] + # n = 500
                               [174.155064,147.318304,167.765215,176.891066,182.97742,148.00771,196.695035,214.55344,148.480067,172.543503,163.759704,216.776598,165.654509,185.057395,183.469069,198.527401,176.17566,238.077752,194.75257,191.078212] + # n = 1000
                               [348.110796,352.119564,392.021827,317.250407,342.491522,379.580476,348.187379,347.839616,337.692731,327.60505,288.445227,365.469472,370.042909,388.203024,379.904709,366.805373,360.531671,369.549661,319.291067,372.187048] + # n = 2000
                               [730.561611,712.279196,730.184151,729.779463,675.806415,723.928519,763.668822,739.160277,705.243411,757.791197,642.871841,708.497386,729.471431,670.64617,789.376416,749.648255,710.614863,753.955922,644.066059,783.901507]   # n = 4000
             ).astype(float)}

# plot RAxML Likelihood Score Difference vs. r (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
df = {'r':{},'score':{},'category':{}}
for i in range(len(r_fasttree['score'])):
    currNum = len(df['r'])
    df['r'][currNum] = r_fasttree['r'][i]
    df['score'][currNum] = r_fasttree['score'][i] - r_original['score'][i]
    df['category'][currNum] = 'fasttree'
    currNum = len(df['r'])
    df['r'][currNum] = r_raxml['r'][i]
    df['score'][currNum] = r_raxml['score'][i] - r_original['score'][i]
    df['category'][currNum] = 'raxml'
df = pd.DataFrame(df)
ax = sns.violinplot(x='r',y='score',hue='category',data=df,order=x,palette=pal)
plt.plot(np.linspace(-1,101,10),[0]*10,linestyle='--',color='#000000')
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(E(l_b)=0.298\right)$',fontsize=14)
sns.plt.ylabel(r'RAxML Score Difference $\left(Inferred-True\right)$',fontsize=14)
sns.plt.title(r'RAxML Score Difference vs. $\log_{10}{r}\ \left(E(l_b)=0.298\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('raxml-likelihood-difference_vs_r_const-exp-branch-length.pdf', format='pdf', bbox_inches='tight')
plt.close()

# plot RAxML Likelihood Score Difference vs. r (with constant lambda = lambdaA + lambdaB)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
df = {'r':{},'score':{},'category':{}}
for i in range(len(r2_fasttree['score'])):
    currNum = len(df['r'])
    df['r'][currNum] = r2_fasttree['r'][i]
    df['score'][currNum] = r2_fasttree['score'][i] - r2_original['score'][i]
    df['category'][currNum] = 'fasttree'
    currNum = len(df['r'])
    df['r'][currNum] = r2_raxml['r'][i]
    df['score'][currNum] = r2_raxml['score'][i] - r2_original['score'][i]
    df['category'][currNum] = 'raxml'
df = pd.DataFrame(df)
ax = sns.violinplot(x='r',y='score',hue='category',data=df,order=x,palette=pal)
plt.plot(np.linspace(-1,101,10),[0]*10,linestyle='--',color='#000000')
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(\lambda = \lambda_A + \lambda_B = 169\right)$',fontsize=14)
sns.plt.ylabel(r'RAxML Score Difference $\left(Inferred-True\right)$',fontsize=14)
sns.plt.title(r'RAxML Score Difference vs. $\log_{10}{r}\ \left(\lambda=\lambda_A+\lambda_B=169\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('raxml-likelihood-difference_vs_r_const-lambda.pdf', format='pdf', bbox_inches='tight')
plt.close()

# plot RAxML Likelihood Score Difference vs. lambda
fig = plt.figure()
x = np.array([33.866,84.664,169.328,338.655,846.638])
df = {'lambda':{},'score':{},'category':{}}
for i in range(len(l_fasttree['score'])):
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_fasttree['lambda'][i]
    df['score'][currNum] = l_fasttree['score'][i] - l_original['score'][i]
    df['category'][currNum] = 'fasttree'
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_raxml['lambda'][i]
    df['score'][currNum] = l_raxml['score'][i] - l_original['score'][i]
    df['category'][currNum] = 'raxml'
df = pd.DataFrame(df)
ax = sns.violinplot(x='lambda',y='score',hue='category',data=df,order=x,palette=pal)
plt.plot(np.linspace(-1,101,10),[0]*10,linestyle='--',color='#000000')
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\lambda = \lambda_A + \lambda_B$',fontsize=14)
sns.plt.ylabel(r'RAxML Score Difference $\left(Inferred-True\right)$',fontsize=14)
sns.plt.title(r'RAxML Score Difference vs. $\lambda$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('raxml-likelihood-difference_vs_lambda.pdf', format='pdf', bbox_inches='tight')
plt.close()

# plot RAxML Likelihood Score Difference vs. length
fig = plt.figure()
x = np.array([50,100,200,300,600,1200,2400,4800])
df = {'length':{},'score':{},'category':{}}
for i in range(len(k_fasttree['score'])):
    currNum = len(df['length'])
    df['length'][currNum] = k_fasttree['length'][i]
    df['score'][currNum] = k_fasttree['score'][i] - k_original['score'][i]
    df['category'][currNum] = 'fasttree'
    currNum = len(df['length'])
    df['length'][currNum] = k_raxml['length'][i]
    df['score'][currNum] = k_raxml['score'][i] - k_original['score'][i]
    df['category'][currNum] = 'raxml'
df = pd.DataFrame(df)
ax = sns.violinplot(x='length',y='score',hue='category',data=df,order=x,palette=pal)
plt.plot(np.linspace(-1,101,10),[0]*10,linestyle='--',color='#000000')
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel('Sequence Length',fontsize=14)
sns.plt.ylabel(r'RAxML Score Difference $\left(Inferred-True\right)$',fontsize=14)
sns.plt.title('RAxML Score Difference vs. Sequence Length',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('raxml-likelihood-difference_vs_length.pdf', format='pdf', bbox_inches='tight')
plt.close()

# plot RAxML Likelihood Score Difference vs. gamma rate
fig = plt.figure()
x = np.array([2.952,5.904,29.518,147.591,295.182,float('inf')])
df = {'gammarate':{},'score':{},'category':{}}
for i in range(len(g_fasttree['score'])):
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_fasttree['gammarate'][i]
    df['score'][currNum] = g_fasttree['score'][i] - g_original['score'][i]
    df['category'][currNum] = 'fasttree'
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_raxml['gammarate'][i]
    df['score'][currNum] = g_raxml['score'][i] - g_original['score'][i]
    df['category'][currNum] = 'raxml'
df = pd.DataFrame(df)
ax = sns.violinplot(x='gammarate',y='score',hue='category',data=df,order=x,palette=pal)
plt.plot(np.linspace(-1,101,10),[0]*10,linestyle='--',color='#000000')
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'Gamma Distribution Rate $\left(\alpha\right)$',fontsize=14)
sns.plt.ylabel(r'RAxML Score Difference $\left(Inferred-True\right)$',fontsize=14)
sns.plt.title('RAxML Score Difference vs. Ultrametricity',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('raxml-likelihood-difference_vs_gammarate.pdf', format='pdf', bbox_inches='tight')
plt.close()

# plot RAxML Likelihood Score Difference vs. n
fig = plt.figure()
x = np.array([25,50,250,500,1000,2000,4000])
df = {'n':{},'score':{},'category':{}}
for i in range(len(n_fasttree['score'])):
    currNum = len(df['n'])
    df['n'][currNum] = n_fasttree['n'][i]
    df['score'][currNum] = n_fasttree['score'][i]
    df['category'][currNum] = 'fasttree'
    currNum = len(df['n'])
    df['n'][currNum] = n_raxml['n'][i]
    df['score'][currNum] = n_raxml['score'][i]
    df['category'][currNum] = 'raxml'
df = pd.DataFrame(df)
ax = sns.violinplot(x='n',y='score',hue='category',data=df,order=x,palette=pal)
plt.plot(np.linspace(-1,101,10),[0]*10,linestyle='--',color='#000000')
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$n$',fontsize=14)
sns.plt.ylabel(r'RAxML Score Difference $\left(Inferred-True\right)$',fontsize=14)
sns.plt.title(r'RAxML Score Difference vs. $n$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('raxml-likelihood-difference_vs_n.pdf', format='pdf', bbox_inches='tight')
plt.close()