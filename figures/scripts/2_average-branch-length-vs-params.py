#! /usr/bin/env python3
'''
Niema Moshiri 2016

Generate plots of average branch length vs. various parameters
'''
# imports
from matplotlib import rcParams
from matplotlib.patches import Patch
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# settings
sns.set_style("ticks")
rcParams['font.family'] = 'serif'
pal = {'theoretical_all':'#000000', 'theoretical_pen':'#A0A0A0', 'simulated_all':'#00FF00', 'simulated_pen':'#AAFFAA', 'fasttree_all':'#FF0000', 'fasttree_pen':'#FFAAAA', 'raxml_all':'#0000FF', 'raxml_pen':'#AAAAFF'}
meancolor='#00AA00'
meansize=20
handles = [Patch(color=pal['theoretical_all'],label='Theoretical (All)'),Patch(color=pal['fasttree_all'],label='Fasttree (All)'),Patch(color=pal['raxml_all'],label='Raxml (All)'),Patch(color=pal['theoretical_pen'],label='Conjectured (Pendant)'),Patch(color=pal['fasttree_pen'],label='FastTree (Pendant)'),Patch(color=pal['raxml_pen'],label='RAxML (Pendant)'),Patch(color=meancolor,label='Mean')]

# expected pendant branch length
def exp_pen_bl(la,lb):
    r = float(la)/float(lb)
    return (r**0.5)/((1+2*(r**0.5)-r)*la)

# average
def avg(x):
    return sum(x)/float(len(x))

# DATASETS
# modifying r = lambdaA/lambdaB (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
r_original_all = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.0267173088177,0.0261440606527,0.0312439923838,0.0323414121369,0.0284412304162,0.0221902476671,0.0332732948459,0.0226990515461,0.0322243882024,0.0266119261977,0.0244588228148,0.0317945312511,0.0284623983945,0.0274336980022,0.0294185465291,0.0251340426802,0.0361775313532,0.0378493489401,0.0283413235062,0.0255517224613] + # r = 0.0001
                                   [0.0288172453829,0.0315400414579,0.0295240432778,0.0314335257526,0.0343411206552,0.0278711604309,0.0284841657065,0.0361782655956,0.0272720510435,0.0302386959695,0.0332791081614,0.0296476943958,0.0336052533775,0.0288903880247,0.0266085546863,0.0305035900252,0.0260006600931,0.0353427556564,0.0334477664964,0.0324730285238] + # r = 0.001
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +  # r = 0.01
                                   [0.0299481742691,0.0289619265772,0.0296858964798,0.0297792291545,0.0290083407157,0.031170217537,0.0292953427293,0.0295663785745,0.0295398968843,0.0289082105581,0.0308991197082,0.0286197107639,0.0291878001923,0.0301480809545,0.0289924890617,0.0315681614106,0.0291487309335,0.0291714524352,0.0279512663003,0.029028363695] +   # r = 0.1
                                   [0.0301758545112,0.0283734237391,0.0292391515714,0.0298961038617,0.0292665173444,0.0299198089995,0.0294413732906,0.0287958391176,0.0305076937245,0.030277653103,0.0309607757197,0.0295143582298,0.0285685168413,0.030862266786,0.0313784886087,0.0290061688089,0.0308840269252,0.02954865896,0.0290013878204,0.0314258420558]       # r = 1
             ).astype(float)}
r_original_pen = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.05211371021875,0.0512297228303,0.061797446863,0.0633513695013,0.0558467766767,0.0429430474049,0.0654491528655,0.0444522703401,0.063532247061,0.0518279400333999,0.04785571508136,0.0627527366239,0.05585616795182,0.053917658368,0.057945068252,0.0490126884975,0.07121076825188,0.0745786006010999,0.0556578329178001,0.049892897893] + # r = 0.0001
                                   [0.0540156572161,0.0594743150151,0.0564965532841,0.0593807591684,0.0651779863969,0.052034541759,0.0529811443897,0.0691929607322999,0.0512580490676,0.0567328918511999,0.0628850676783,0.0558861319819,0.06403699584543,0.0547811990241,0.0494660221439999,0.05748380627007,0.0484152664254,0.0675701164849901,0.0635102113208,0.0608867089249] + # r = 0.001
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +  # r = 0.01
                                   [0.0369001356831,0.0351373801105,0.0367995133576001,0.0373990550002,0.0367945518176,0.0405898976469,0.0382727307663,0.037607011242,0.037570699165,0.036201468953745,0.03914934570063,0.0360982855081,0.037667183159,0.037609239605,0.0370391519312,0.04020511913064,0.0385091681041,0.037187987679,0.0355679845582,0.03443311435736] +   # r = 0.1
                                   [0.028884366642,0.0286623900136,0.028669512086,0.0301880764450521,0.0280100686923,0.0295818764956,0.0300524267384,0.02782771570489,0.0289318597909,0.0303210168274,0.0302515229524,0.0302996009504,0.0272456630893,0.03242192537459,0.0315863684157,0.0289330938172,0.0321053473041,0.0299850085924,0.0297205269745,0.0316251289161]       # r = 1
             ).astype(float)}
r_fasttree_all = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.0277010958141,0.0265143141218,0.0323989607617,0.0319814928761,0.0291314339464,0.0227122796804,0.0319834135897,0.0228791183098,0.0305442403446,0.0271591277934,0.0244915183886,0.0317114543838,0.028426164759,0.0269760587033,0.0302641240046,0.0261201045544,0.0354289151267,0.0384571628397,0.0297522129431,0.0259690047314] +  # r = 0.0001
                                   [0.0282492489113,0.0319204721501,0.0297846665391,0.0303982881751,0.0363164388012,0.0275645631831,0.0287137955639,0.0376649653051,0.0274833386826,0.0316486788842,0.0334498290035,0.0296774374243,0.0343918451152,0.0309263763241,0.0269060412675,0.0312141987748,0.0263782775323,0.0347570542275,0.0324042098405,0.0336479660488] + # r = 0.001
                                   [0.0328280374927,0.0293589119216,0.0293702403287,0.0292681320346,0.0304669867301,0.0293316668095,0.0321295772533,0.0263854120724,0.0283967136126,0.03225246587,0.0319497768996,0.0374410630995,0.0308409901689,0.0339875604079,0.0297108082644,0.0315950468596,0.0294834989233,0.028531067488,0.0302582171395,0.0339871709363] +    # r = 0.01
                                   [0.030908756487,0.0293246405779,0.0305872622326,0.0312348412715,0.0302792192364,0.0317577917227,0.0292236069209,0.0315772113499,0.0322745759664,0.0284663069264,0.0311400442172,0.0276892237524,0.0299521893201,0.0302964643453,0.0278839343805,0.0333979026186,0.0299993248823,0.0314752551242,0.0280796421003,0.0291283838921] +  # r = 0.1
                                   [0.0301889357577,0.0303062380285,0.0282059312142,0.0321063780255,0.0293023983941,0.0293900225611,0.028442782481,0.028683302495,0.0318360375896,0.0317259772173,0.0309329562267,0.030243283971,0.0291623957044,0.0319937694507,0.031138244972,0.0297647370636,0.0306398214027,0.0302573248453,0.0299996197709,0.0322849918988]       # r = 1
             ).astype(float)}
r_fasttree_pen = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.050401596175,0.049093814765,0.0605851219269999,0.05869153103,0.054107523415,0.041599304982,0.059769054045,0.042559308675,0.057396866691,0.049898209425,0.04530935737,0.059509060017,0.052955513339,0.050355640075,0.056635380815,0.048229183606,0.066092077126,0.0722724249499999,0.055354852694,0.047968200121] +  # r = 0.0001
                                   [0.051304798965,0.05835950115,0.0553694324059999,0.055294280737,0.066758605416,0.050115706075,0.0516933930259999,0.0694252432,0.0499618813709998,0.0577750077299999,0.061253943256,0.0542208627659999,0.063620553357,0.056808702148,0.048640167851,0.0570257672009999,0.047620476331,0.063962075626,0.059626735921,0.0613127159769999] + # r = 0.001
                                   [0.05429832944,0.048022279512,0.0478333330219999,0.0481881549409999,0.050224322631,0.047267546798,0.0541395826969999,0.042425100062,0.044854692312,0.0535634681539999,0.053526008508,0.0616557804509999,0.05031051607,0.057325405126,0.048228245456,0.052373883944,0.049134988781,0.04678109667,0.049150004384,0.055940799892] +    # r = 0.01
                                   [0.037980389433,0.035281558737,0.037703583818,0.038566290743,0.038101027147,0.040952445257,0.037838977156,0.039907457596,0.04043076843,0.035188834548,0.0391577788069999,0.03432579838,0.038687896337,0.037568157297,0.035375554122,0.0425129816340001,0.039524022012,0.039848239264,0.035327156098,0.034342154247] +  # r = 0.1
                                   [0.028515084454,0.03082206312,0.02753489496,0.032538149129,0.0280665238280001,0.028739179852,0.028820794097,0.027592867969,0.030235268602,0.031532518133,0.03001634396,0.0308991174310001,0.027354521858,0.033670888866,0.031127000314,0.029754782357,0.031935990891,0.0301858043549999,0.030391284074,0.032433876255]       # r = 1
             ).astype(float)}
r_raxml_all    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.0270387292907,0.0258095380015,0.0318911961122,0.0315934898558,0.0293305971321,0.0218815015426,0.0309971420466,0.0212832505631,0.0305937832192,0.0262620095852,0.0245085815946,0.0326436813757,0.0307466368844,0.028548015499,0.0299977935007,0.0260223119895,0.0336145034673,0.0403828992306,0.0291081885646,0.0237641686912] +  # r = 0.0001
                                   [0.029969053045,0.0320143954915,0.0301172414532,0.030889502036,0.0374888457429,0.0296711286241,0.0305363993994,0.0387410590853,0.0289985763326,0.0307957555105,0.0326013547504,0.0289211946295,0.0341100697443,0.030462251037,0.0271495609903,0.0300855181439,0.0251281004615,0.0349710569474,0.0353715618504,0.0345478361644] +    # r = 0.001
                                   [0.0320627849303,0.029357181472,0.0305326707884,0.0289740640911,0.0323534289368,0.0299067751542,0.0316808413939,0.0259196208263,0.0290405317412,0.0336676563179,0.03080075762,0.0362685412896,0.0298654321997,0.0343790777392,0.0312268586191,0.0300231913117,0.029390497616,0.0287303930869,0.031261099007,0.0355477334875] +      # r = 0.01
                                   [0.0305971169004,0.0283481299094,0.0316546440105,0.0319335659363,0.0291312950406,0.0323667306134,0.0298306343934,0.0342081406547,0.0343437039148,0.0293254575725,0.0317853793377,0.0280283629329,0.029840099048,0.0310309919259,0.0281691301063,0.0315599067282,0.0309138291201,0.0316301863529,0.0263835705239,0.0299180873564] +  # r = 0.1
                                   [0.0300813066286,0.031863441041,0.0307194256892,0.0316068984059,0.0294496173584,0.0285649690711,0.0281780788213,0.0269782861727,0.0316738341011,0.0343393561566,0.0348200252052,0.0302318461121,0.03057807389,0.033046348041,0.0329865221688,0.0309843997938,0.0301954531168,0.0330972648038,0.029998763484,0.034829676734]         # r = 1
             ).astype(float)}
r_raxml_pen    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.05108324227,0.0490778652199999,0.0608918004399999,0.0598147787399998,0.0556412522299999,0.0410014831,0.0588893875,0.0403433650499999,0.05818460625,0.04965381123,0.0464609058399999,0.0623282971099998,0.0584083396999999,0.0543350749500001,0.0571530520899999,0.0492147593,0.0641306085899999,0.0771237082399998,0.05532348732,0.04499423245] +  # r = 0.0001
                                   [0.0548570528699999,0.0589331936899999,0.05644454112,0.05709280765,0.069652834913,0.05437006146,0.0556431538599999,0.0724834546629999,0.0531845713799999,0.05680969196,0.0603512757099999,0.0533432198199999,0.0637981768999999,0.0566993338999999,0.0495513296799999,0.0554280705699999,0.04584096848,0.0655141772,0.0654879800599999,0.0634351224599999] +    # r = 0.001
                                   [0.053244245845,0.048381250994,0.04991983727,0.0479605690499998,0.0534337896699999,0.0483772793259999,0.0535554350399999,0.0418456882699999,0.0461932962399999,0.0561950290199998,0.0519095218399999,0.0600406398299999,0.04905802711,0.0581779192899999,0.05086339094,0.04985123391,0.0489749013199999,0.04717251422,0.0508396067799999,0.0587191549399999] +      # r = 0.01
                                   [0.03752807545,0.03412456569,0.0390620028899999,0.03944598212,0.03662218429,0.0416428935499999,0.03863880152,0.04324818228,0.04308134079,0.03627711487,0.03996115323,0.03479758552,0.03859792542,0.03851413386,0.03578425899,0.0401265490799999,0.04072760481,0.04005821382,0.03320534856,0.03533713508] +  # r = 0.1
                                   [0.02846367745,0.032349585275,0.02978492648,0.0320327344190001,0.0282032373540001,0.02793059462,0.02857833366,0.02587541881,0.03008149369,0.034131468322,0.03374318342,0.0308620657900001,0.02866236186,0.0347805059029999,0.03299297895,0.03098213721,0.031507499302,0.03300729028,0.03037358019,0.0350049485630001]         # r = 1
             ).astype(float)}

# modifying r = lambdaA/lambdaB (with constant lambda = lambdaA + lambdaB)
r2_original_all = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.235508623662,0.262010890762,0.26777858773,0.241735202482,0.317321260001,0.295131341426,0.231501419898,0.232604632401,0.282924404669,0.318855169806,0.275903260058,0.252841392577,0.214269304973,0.215280794679,0.299891549679,0.383802517711,0.280469785689,0.199292398496,0.197418658194,0.220236326541] +                                       # r = 0.0001
                                   [0.0771874103174,0.093522571013,0.0944345091822,0.0886075855878,0.0942926395073,0.0846837181773,0.0878442822435,0.0872843633653,0.0990605514199,0.0894565331086,0.104336800808,0.0850699683727,0.0824760998189,0.0958794515592,0.0813781099597,0.0991601749303,0.0862946707689,0.0943619042295,0.0895996381695,0.0789658810706] +                    # r = 0.001
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +                   # r = 0.01
                                   [0.0104230927432,0.0100345745525,0.0103151664639,0.00994326536942,0.00959895138881,0.00940962754297,0.00993734146685,0.0104469917093,0.00939680513363,0.00982917305324,0.0101244762123,0.0111928415007,0.00977384548981,0.0106629374697,0.0103899990171,0.0105269104061,0.00982281005085,0.0105245305712,0.0108628938025,0.0102633901509] +          # r = 0.1
                                   [0.00574271027405,0.00615527046848,0.00587626103644,0.00580408327046,0.00582344507897,0.0059932817163,0.00577139965317,0.0055095373957,0.00586534091989,0.00576687528432,0.00591879122331,0.005796973702,0.00596858785722,0.00607603351526,0.00590287194715,0.00594363947666,0.00590856277427,0.00575930241676,0.00588576984628,0.0063292753831]     # r = 1
              ).astype(float)}
r2_original_pen = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.459348669437,0.5153038103444,0.522107204048,0.47404159432,0.622439142061,0.5776956222216,0.454255302463,0.456792121949,0.552930335108,0.6271853410902,0.543092090623,0.494970308988,0.419463102763,0.42080746492,0.58708424732,0.755948307239999,0.553281735949,0.38679403665,0.386364030903,0.431505017545] +                                       # r = 0.0001
                                   [0.144773034963,0.1754932775334,0.179204975890001,0.1671068241917,0.179310766923,0.161447921808,0.164535198436,0.1637993372327,0.187927327201,0.169884498461,0.1986930765674,0.160093622409,0.1543821285686,0.17895843189993,0.152321664007,0.188821239181,0.160886693421,0.178467951287,0.168521782658,0.147569457856] +                    # r = 0.001
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +                   # r = 0.01
                                   [0.013676545115,0.0125066878306,0.01284881394178,0.01232337265248,0.01206060372795,0.0117345483031,0.01255388975966,0.013516588900278,0.01178834185124,0.01198778753368,0.0131696568037,0.0138917945361,0.0118666528199,0.0131258351838,0.0134663089141,0.01307902445003,0.0123739490849,0.0130068843126,0.0136999503989,0.01308127444976] +          # r = 0.1
                                   [0.0056582866565,0.00603082341276,0.00587361800650002,0.00576840011426401,0.00580617676210001,0.0060649661242,0.00589304199779,0.00547689869019,0.0060351969569,0.0057115932326,0.00600956822908,0.00564103863829001,0.00604813090129001,0.00612134589108,0.00601708198678009,0.00583531481656,0.005989111953,0.00569121171421,0.00583329652408501,0.00644172504573]     # r = 1
              ).astype(float)}
r2_fasttree_all = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.216102612555,0.237728725148,0.238378729585,0.220598138892,0.280139140216,0.248792812834,0.216596619703,0.214201745526,0.253509190382,0.261515098296,0.244176780691,0.224200888262,0.198881592815,0.197578800958,0.242602301057,0.301742192233,0.248085745794,0.190681480682,0.190361169683,0.202930079214] +                                      # r = 0.0001
                                   [0.0776380430566,0.0942164924424,0.0930781514727,0.0877949225338,0.0946227213793,0.0832843807231,0.0877183677064,0.0847023796321,0.0959168807181,0.088407859003,0.103102817882,0.0818617883041,0.0785649471713,0.0918447758462,0.0816049673968,0.102085071851,0.0832788748326,0.0957997004345,0.0914600294709,0.0807448356287] +                     # r = 0.001
                                   [0.0328280374927,0.0293589119216,0.0293702403287,0.0292681320346,0.0304669867301,0.0293316668095,0.0321295772533,0.0263854120724,0.0283967136126,0.03225246587,0.0319497768996,0.0374410630995,0.0308409901689,0.0339875604079,0.0297108082644,0.0315950468596,0.0294834989233,0.028531067488,0.0302582171395,0.0339871709363] +                     # r = 0.01
                                   [0.01088083443,0.00992735498489,0.0109351720587,0.0107131410991,0.0101390973401,0.00999612979154,0.0101288065317,0.010895061003,0.00987218763476,0.0105317569139,0.0102457129985,0.0120174114401,0.00970399923399,0.0110395321855,0.0107174161061,0.0106196544291,0.00976033948361,0.0102104479899,0.0111549571355,0.0106570870389] +                # r = 0.1
                                   [0.00599345508388,0.00646391016591,0.00622927652123,0.00576894738621,0.0063303263861,0.00640376569959,0.00583936552506,0.00572118207774,0.00610647881199,0.00601086128651,0.00641964555522,0.00608458938886,0.00619473873529,0.00616070627268,0.00614667713951,0.00607636779036,0.00642136849289,0.00604308441024,0.00600230603984,0.00675911011494] # r = 1
              ).astype(float)}
r2_fasttree_pen = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.394223130285,0.435531601927,0.430236364404,0.404383944042,0.506327028298,0.447873350868,0.397244799532,0.39310831893,0.459332942179,0.466106359513,0.442695328162001,0.409417492131,0.366460641588001,0.366253512406,0.438935826132,0.526391773042,0.453724719356,0.351453370244,0.35139024844,0.373731240304] +                                      # r = 0.0001
                                   [0.141528279427,0.170665742062,0.17128499359,0.16086425811,0.174202813123,0.15452980177,0.158821302164,0.154070558423,0.176010701857,0.163086824667,0.189781235817,0.150124448273,0.142682938265,0.165793313871,0.148895461594,0.187975764111,0.150531227345,0.175147389423,0.166801855049,0.146399278392] +                     # r = 0.001
                                   [0.05429832944,0.048022279512,0.0478333330219999,0.0481881549409999,0.050224322631,0.047267546798,0.0541395826969999,0.042425100062,0.044854692312,0.0535634681539999,0.053526008508,0.0616557804509999,0.05031051607,0.057325405126,0.048228245456,0.052373883944,0.049134988781,0.04678109667,0.049150004384,0.055940799892] +                     # r = 0.01
                                   [0.013975514554,0.012169467914,0.013521291755,0.013122432279,0.012721609803,0.012292608012,0.012471777094,0.013762809696,0.011925528755,0.012540506653,0.012941362557,0.01439810423,0.011457982209,0.013471939313,0.013688974934,0.012962889884,0.011875935708,0.012419489952,0.01393433551,0.013372217442] +                # r = 0.1
                                   [0.00586947268200001,0.00620693612400001,0.00614714495600002,0.00563011172800001,0.00634691660400002,0.00637574603400002,0.00585825955000001,0.00552062312600001,0.00606222344800001,0.00566369986500001,0.00655619091299999,0.00581195228000002,0.00604455544900001,0.00622202176500002,0.00608212099400001,0.00592060556500002,0.00634879849300001,0.00597982744800001,0.00588089901600001,0.00670057648500002] # r = 1
              ).astype(float)}
r2_raxml_all    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.201377948794,0.206675017398,0.232472984163,0.216435182374,0.266085401229,0.251330253754,0.204550554746,0.216871379692,0.233367594782,0.246182272486,0.239059881284,0.21066958036,0.206508155983,0.201068901712,0.24953540808,0.298984270367,0.271057891974,0.174260799277,0.187371283427,0.208019808208] +                                        # r = 0.0001
                                   [0.0747203867169,0.0999061475706,0.0917055037689,0.0902450916832,0.093591330368,0.0825635854381,0.08484787493,0.0870993957174,0.0978067494474,0.0888319446175,0.110332834578,0.0865988605646,0.0876937276704,0.0942597073609,0.0810912476155,0.10565198131,0.0873911432102,0.0983789226672,0.0958061919453,0.0840274156952] +                        # r = 0.001
                                   [0.0320627849303,0.029357181472,0.0305326707884,0.0289740640911,0.0323534289368,0.0299067751542,0.0316808413939,0.0259196208263,0.0290405317412,0.0336676563179,0.03080075762,0.0362685412896,0.0298654321997,0.0343790777392,0.0312268586191,0.0300231913117,0.029390497616,0.0287303930869,0.031261099007,0.0355477334875] +                       # r = 0.01
                                   [0.0108190065329,0.00976742342843,0.0113794132648,0.010244111245,0.0101082833414,0.00968961752302,0.0102119937817,0.0102691195359,0.00985321176577,0.010377879984,0.010285615964,0.0113086136476,0.00967055268218,0.0108282133053,0.0104341710415,0.0106325401016,0.00966632804755,0.00985069631507,0.0111346539269,0.0104831124525] +               # r = 0.1
                                   [0.00579316517167,0.00634517334585,0.00619041776627,0.00574177898799,0.00617619236236,0.00619816014715,0.00553390669169,0.00550814332833,0.00595130407407,0.00598013912913,0.00609444323123,0.00587841191191,0.00601506145646,0.0060110740035,0.00605605615616,0.00594885133133,0.00608332587788,0.00606442801301,0.00581321851351,0.00638657581081] # r = 1
              ).astype(float)}
r2_raxml_pen    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.37177630704,0.38590009137,0.420653603620001,0.40208763025,0.49010860598,0.462273845309999,0.38138021169,0.4051360157,0.43194152222,0.44742707759,0.43908590538,0.392172043140001,0.38483958858,0.37809472766,0.459018469232,0.53133043103,0.50408278325,0.32571188796,0.35310725103,0.39079062938] +                                        # r = 0.0001
                                   [0.13684918715,0.18218422792,0.16964610209,0.16676183983,0.17390901209,0.15430068753,0.15343439916,0.15831391416,0.18087415073,0.16499864814,0.20472475119,0.15821827096,0.16034272032,0.17146941883,0.14868888581,0.19600948022,0.16002740015,0.18227059589,0.17627028512,0.15420644236] +                        # r = 0.001
                                   [0.053244245845,0.048381250994,0.04991983727,0.0479605690499998,0.0534337896699999,0.0483772793259999,0.0535554350399999,0.0418456882699999,0.0461932962399999,0.0561950290199998,0.0519095218399999,0.0600406398299999,0.04905802711,0.0581779192899999,0.05086339094,0.04985123391,0.0489749013199999,0.04717251422,0.0508396067799999,0.0587191549399999] +                       # r = 0.01
                                   [0.0139750940999999,0.01206280036,0.0141027900499999,0.01261517401,0.01280045075,0.0119631401599999,0.0127236934499999,0.0130591457299999,0.01197801102,0.012424803305,0.01312777558,0.0136832500099999,0.01151273082,0.0133013867299999,0.0133965259099999,0.0130914709099999,0.01184911235,0.01205723571,0.0139377310499999,0.0132919619599999] +               # r = 0.1
                                   [0.00573405770000004,0.00618195391600004,0.00617676785000002,0.00568787744000002,0.00627848035000004,0.00625905778000003,0.00561956792000002,0.00539980247000002,0.00599860486000003,0.00569190870000002,0.00632620242000003,0.00567971497000004,0.00593492510000003,0.00614249067200004,0.00609668664000003,0.00588930399000003,0.00609916954000002,0.00608696341000003,0.00574131855000003,0.00640939552000003] # r = 1
              ).astype(float)}

# modifying lambda = lambdaA + lambdaB
l_original_all = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.161344217969,0.13914039572,0.141880578472,0.152121461118,0.14854863721,0.153995679248,0.137604724294,0.13695170033,0.132730890029,0.15804463179,0.153967318291,0.162398566883,0.146383732671,0.135834140848,0.14213131163,0.14570627092,0.130295452985,0.142674896807,0.128650072528,0.148344543078] +                                               # lambda = 33.86550309051126
                                   [0.0575394257479,0.0565515976237,0.0655486845047,0.0602840013708,0.0634513965612,0.0578730072628,0.057906309832,0.054910833606,0.050116414039,0.0553045125509,0.0652008516828,0.0557670546682,0.0565274212505,0.0549595425016,0.0560328950153,0.0618731330533,0.0663397872985,0.059944109731,0.0526933912266,0.0532540226046] +                         # lambda = 84.66375772627816
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +                      # lambda = 169.32751545255631
                                   [0.0152403603366,0.014969397447,0.0159206639142,0.0174719817445,0.0155243566165,0.0159844901146,0.0144759136345,0.0134115442032,0.0142469572875,0.0149791445624,0.0130799891608,0.0152068090801,0.0138217839539,0.0144693128477,0.0144079050459,0.0149786258522,0.0145023765406,0.0142388539955,0.0144987533606,0.0140120301359] +                      # lambda = 338.65503090511262
                                   [0.00615739444225,0.00600433292579,0.00585292974031,0.00640174217878,0.00577163058783,0.00552211831022,0.00564774525726,0.00672511081415,0.00614197255059,0.00607276573989,0.00586703404507,0.00597194979227,0.00595905264059,0.00600993592936,0.00582957055436,0.00667616168129,0.00619190359535,0.00581191444748,0.005915794599,0.0061569606114]      # lambda = 846.63757726278155
             ).astype(float)}
l_original_pen = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.2759533175188,0.2306429744264,0.236774608375,0.250155676183,0.248258306479,0.255836963836,0.226817070628,0.224334398284,0.220990889926,0.27061414603116,0.2523477479745,0.273864996273999,0.246108276762,0.226223466202,0.23967570198,0.241992457224,0.219834282585,0.23559770804985,0.209787213593,0.24730867029024] +                                               # lambda = 33.86550309051126
                                   [0.0965569208382999,0.0967033252558,0.110644241016,0.10059365922,0.1070973548683,0.0952472724450001,0.0961405823836,0.0906541736402,0.0843091702231001,0.0915717238301,0.112834958584,0.0921977778699001,0.0938282362530999,0.090593838843,0.0909637258970999,0.10390981733315,0.112183875984,0.101185811853,0.0887108956711099,0.0880947724664] +                         # lambda = 84.66375772627816
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +                      # lambda = 169.32751545255631
                                   [0.0257229337037,0.0255286663836,0.0265500841376,0.0300388862004,0.0260335247114,0.027121592784623,0.0238752708393,0.0227644530981,0.0236125457331,0.0250316725779,0.0214781147088,0.02586916617946,0.0225990122696,0.0242480211587,0.02354290851786,0.0247995702807,0.0240609147836,0.0238105296315,0.0247443312486,0.0228136054703] +                      # lambda = 338.65503090511262
                                   [0.0103184619891,0.01015787671194,0.0097357957648,0.01094530475379,0.00979960901092999,0.00920926010389,0.00965930485558001,0.0114887217019,0.01031627460386,0.010261071188,0.00973768678319999,0.0102150663898,0.01009174788589,0.0101006564519,0.00971150131459999,0.01112593514886,0.0105132658901,0.00961194084718799,0.0099624898722,0.01032199873488]      # lambda = 846.63757726278155
             ).astype(float)}
l_fasttree_all = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.159401676355,0.143119146848,0.13943602077,0.144122653384,0.1482882493,0.157464393554,0.135828809548,0.135581543577,0.132579478232,0.154882957309,0.156633606591,0.162897810776,0.146780818986,0.140818075046,0.145856434927,0.14167510423,0.129835103366,0.143581219252,0.125248582956,0.142577213] +                                                # lambda = 33.86550309051126
                                   [0.0604693157429,0.058339246339,0.0643995834605,0.0585328312609,0.0639507101799,0.0578836266757,0.0613798946019,0.0567041225376,0.0514580968653,0.056993765345,0.0674941721703,0.0564744919605,0.0575915933541,0.0591447873814,0.0539272253839,0.0624513646234,0.0686656067852,0.0582208754892,0.0517107301662,0.0553103145298] +                       # lambda = 84.66375772627816
                                   [0.0328280374927,0.0293589119216,0.0293702403287,0.0292681320346,0.0304669867301,0.0293316668095,0.0321295772533,0.0263854120724,0.0283967136126,0.03225246587,0.0319497768996,0.0374410630995,0.0308409901689,0.0339875604079,0.0297108082644,0.0315950468596,0.0294834989233,0.028531067488,0.0302582171395,0.0339871709363] +                        # lambda = 169.32751545255631
                                   [0.0154383765073,0.0152995890046,0.0171440767731,0.0172654187215,0.0167823620101,0.0159487654748,0.01458545532,0.0134600903485,0.01495597646,0.0148970970574,0.0128979437647,0.015907616744,0.0146244560696,0.0152191702214,0.0148568102184,0.0155448107264,0.0148786852301,0.0136708127245,0.0152917297251,0.0146697741707] +                          # lambda = 338.65503090511262
                                   [0.00665054567668,0.00700573830646,0.00607985518435,0.00689991867082,0.00580241481063,0.00574620460489,0.00568098098893,0.00735709616581,0.00677958404845,0.00628684842542,0.00651527487481,0.00625861069979,0.00627265577046,0.00642583572648,0.00618519765586,0.00682052274095,0.00657416572813,0.00595771463807,0.00619613880304,0.00624704466562]   # lambda = 846.63757726278155
             ).astype(float)}
l_fasttree_pen = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.264017522909,0.231660144608,0.227069663764,0.231271063374,0.241103304496,0.254909997607,0.218203124968,0.216808756174,0.21637823149,0.258273211475,0.249631767925,0.267856833406,0.239345044133,0.22862677472,0.2415478655,0.228915756903,0.214560832301,0.231710664481,0.200708071089,0.231492345455] +                                                # lambda = 33.86550309051126
                                   [0.100121608982,0.098450306589,0.107210165276,0.0962092295849998,0.105985765035,0.094005911384,0.100766276962,0.0923122976680001,0.085732782115,0.0932747572070002,0.114696749481,0.0920654660959999,0.093889643092,0.0955317547619999,0.0861845025149999,0.103327714277,0.114438924021,0.0969039683549999,0.0861703624360001,0.0899103319049999] +                       # lambda = 84.66375772627816
                                   [0.05429832944,0.048022279512,0.0478333330219999,0.0481881549409999,0.050224322631,0.047267546798,0.0541395826969999,0.042425100062,0.044854692312,0.0535634681539999,0.053526008508,0.0616557804509999,0.05031051607,0.057325405126,0.048228245456,0.052373883944,0.049134988781,0.04678109667,0.049150004384,0.055940799892] +                        # lambda = 169.32751545255631
                                   [0.025559566879,0.025520702668,0.028032869046,0.028872912378,0.027517123954,0.026685162682,0.023454686046,0.022200462757,0.024129186378,0.024249367431,0.020513013382,0.026499891838,0.023400172873,0.025030762697,0.023756232692,0.025212115596,0.02399119199,0.022065092796,0.025456603703,0.023191921847] +                          # lambda = 338.65503090511262
                                   [0.010518307306,0.011233191407,0.009297662866,0.011100070033,0.00919369496,0.00901925717700001,0.00895653694900002,0.012020165584,0.010808643137,0.00988733076100001,0.010281618183,0.010119288961,0.010039096922,0.010140568458,0.00967679378400001,0.010824099021,0.010504953636,0.00931700613600002,0.009625747439,0.00992023841400001]   # lambda = 846.63757726278155
             ).astype(float)}
l_raxml_all    = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.155763679434,0.132370527761,0.144468274169,0.137128929062,0.138467210356,0.153284446153,0.135079214084,0.149820501227,0.125974963642,0.156739727258,0.153737363672,0.151596336605,0.145149304187,0.135883874722,0.151287996263,0.140373681287,0.129685330923,0.15123131279,0.118681102326,0.141865522968] +                                          # lambda = 33.86550309051126
                                   [0.0657772250084,0.0566822124206,0.0626362238697,0.055279571838,0.0646154962536,0.070241777495,0.0700283644785,0.0541454637352,0.0516326623026,0.0571194721527,0.0665629610388,0.0644774082724,0.0622315222773,0.0585302548238,0.0543617978739,0.0625617471743,0.0716447591035,0.0615702812584,0.0480373851301,0.055620941007] +                        # lambda = 84.66375772627816
                                   [0.0320627849303,0.029357181472,0.0305326707884,0.0289740640911,0.0323534289368,0.0299067751542,0.0316808413939,0.0259196208263,0.0290405317412,0.0336676563179,0.03080075762,0.0362685412896,0.0298654321997,0.0343790777392,0.0312268586191,0.0300231913117,0.029390497616,0.0287303930869,0.031261099007,0.0355477334875] +                          # lambda = 169.32751545255631
                                   [0.0158407852683,0.0149858191386,0.0164606465429,0.0163047749992,0.0168525931702,0.0165040618839,0.0140432301191,0.0126507378854,0.0145990224299,0.0144604256522,0.0134723322643,0.0162886254775,0.0143329355435,0.0155687923337,0.0152732196486,0.0147275014454,0.014432562468,0.0138985652082,0.0145847227798,0.0152923029539] +                      # lambda = 338.65503090511262
                                   [0.00621775593544,0.00669951623824,0.00559605445195,0.00642167036186,0.00541613576977,0.00544057414014,0.0053860329975,0.00706814168619,0.00655771985035,0.00581422886011,0.00609637382883,0.00591623798378,0.0061018004004,0.00636506848448,0.00587960105105,0.00645982783784,0.00636558895495,0.00568709858859,0.00577995283884,0.00596362098949]     # lambda = 846.63757726278155
             ).astype(float)}
l_raxml_pen    = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.2591402988,0.21577368171,0.23668763054,0.220718095722,0.22591160628,0.25057826232,0.21914449794,0.24144237313,0.20627070831,0.26133990124,0.244078436939999,0.249567588233,0.23928252176,0.22187886896,0.25153608138,0.22738204937,0.21537568876,0.24494323248,0.19104345712,0.23111962354] +                                          # lambda = 33.86550309051126
                                   [0.10940822571,0.09600503836,0.104526703211,0.0886695062199999,0.1072116516,0.11452603861,0.11478538697,0.0884595111700001,0.0861876871899999,0.0939572716299999,0.11330457769,0.1054114655,0.10198038358,0.0947022899199998,0.0871361132499998,0.10372343886,0.11951222896,0.1027767188,0.0801916211400001,0.0904515817799999] +                        # lambda = 84.66375772627816
                                   [0.053244245845,0.048381250994,0.04991983727,0.0479605690499998,0.0534337896699999,0.0483772793259999,0.0535554350399999,0.0418456882699999,0.0461932962399999,0.0561950290199998,0.0519095218399999,0.0600406398299999,0.04905802711,0.0581779192899999,0.05086339094,0.04985123391,0.0489749013199999,0.04717251422,0.0508396067799999,0.0587191549399999] +                          # lambda = 169.32751545255631
                                   [0.0264563901800001,0.025252970503,0.02716005072,0.02757472922,0.02801620105,0.0278248730200001,0.02284354936,0.02107655913,0.02369246664,0.02368897003,0.02169812036,0.02733743884,0.02309694617,0.0259280564021,0.02454328058,0.02406639348,0.0234815351900001,0.02280139837,0.02447093562,0.0243959849700001] +                      # lambda = 338.65503090511262
                                   [0.01019116739,0.01110648988,0.00898216528,0.01073328317,0.00902246561499999,0.00889770389000001,0.00896763070500001,0.01192600282,0.01075328908,0.00959963491999999,0.00994980531999995,0.00994471184999999,0.01004189378,0.01033048226,0.00962963466999998,0.01060397025,0.01058133095,0.00924719804999999,0.00941832209999998,0.00989804318799998]     # lambda = 846.63757726278155
             ).astype(float)}

# modifying sequence length
k_original_all = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0284931012228,0.0307748834925,0.0301411062467,0.0297436066337,0.0275891512421,0.0290649108389,0.028609414352,0.0274162274925,0.0301476036583,0.0298047602971,0.0284793325808,0.029963215125,0.028837352485,0.0283873892907,0.0303243081214,0.029293205105,0.0327153929395,0.0308518385369,0.0295864403528,0.0309191005386] +     # length = 50
                                   [0.0270778195409,0.0299130834174,0.0318979519992,0.027488412488,0.0306707536898,0.029308765722,0.0270248179271,0.0320555445784,0.0290692530556,0.0284979346389,0.0304438910376,0.0285303894213,0.0304476715115,0.0296161534923,0.0298740411178,0.0302357508632,0.0299607478262,0.0312880496374,0.028793328111,0.0277394173861] +    # length = 100
                                   [0.030419808986,0.0292859000354,0.0310592580287,0.0305805704108,0.0299089491082,0.0312026029657,0.0260914805414,0.0287223750579,0.0291930395234,0.0272580200153,0.0285046210828,0.0311744982884,0.026534703066,0.0321906401393,0.0287807500189,0.0334438177267,0.0281491468137,0.0301456375809,0.0297098225001,0.0291462222521] +   # length = 200
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +  # length = 300
                                   [0.029283946609,0.0284552208998,0.032091702207,0.0324600041667,0.0298169988045,0.0280473146183,0.0293726211966,0.0253982362318,0.0301109800056,0.0291868270968,0.0309414558942,0.0284216696536,0.0288120749584,0.0297963721996,0.031115545752,0.0302906478586,0.0291922768528,0.0289384177662,0.0318018394156,0.032831803984] +     # length = 600
                                   [0.0307311734289,0.0274205580791,0.028939800434,0.0269496451926,0.0281499320659,0.0317128459077,0.0297070788178,0.030370397764,0.0291161747811,0.0311845171899,0.0321532069617,0.0312733422706,0.0299351432161,0.0314959300496,0.0289359713235,0.0266325981277,0.0305939451407,0.0295542418277,0.0321537827674,0.031363970106] +    # length = 1200
                                   [0.0305307291262,0.030958528327,0.0271240187209,0.0263394339541,0.0293952290617,0.0294565255968,0.028540901613,0.0285658958113,0.0331315126629,0.0286675557815,0.0301055205125,0.0260360732925,0.0331989887384,0.0294023497631,0.0283741173256,0.0300299546643,0.0266228839302,0.0322598449667,0.0290677901752,0.0265800123561] +   # length = 2400
                                   [0.0360521753512,0.0311628567019,0.0285442886311,0.0308576014031,0.0295918225096,0.0284400644944,0.0287484391075,0.0285830290755,0.0336441365022,0.0252272138443,0.0274378138284,0.0302030387858,0.0276376135806,0.0290055417255,0.026796159065,0.0273370539296,0.0314225508202,0.0309531563926,0.0311517827872,0.0301353300603]    # length = 4800
             ).astype(float)}
k_original_pen = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0479437496560001,0.0512661959222,0.0494611259979,0.049277232285,0.045035111209,0.04959253325411,0.0468709947674999,0.044871199523,0.049874273359,0.0498882515238,0.04705790846129,0.0507625453425,0.0483937895041,0.046429062909,0.0505471355663,0.048544757677,0.0558738991706,0.050669543249,0.0505406330905,0.0516853922016001] +     # length = 50
                                   [0.0448047240069999,0.0496283882909,0.0545552579837,0.0462791016855,0.0507082516541999,0.0483459964603,0.0449644133097311,0.0537442032419999,0.0491551591059999,0.0465091046101,0.0513345884951,0.0476220883513001,0.0504105157920999,0.0498537322116,0.0510295290817,0.0497503473294,0.0503447354617999,0.0521468016511,0.0485079183691,0.04632999232542] +    # length = 100
                                   [0.0518057612864499,0.0489542566841,0.0515725201872,0.05096105661866,0.0499165776376,0.0530509878793,0.0438107949136,0.0473194472892,0.04903568759468,0.044675504247,0.0472813869631999,0.0520938085095,0.0433249801138,0.0540253349023,0.048627439764,0.0564744447403,0.0461370856924,0.0513751928659,0.0499526900514,0.0480285213158391] +   # length = 200
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +  # length = 300
                                   [0.050013357726,0.0485191534401,0.0546728109345101,0.0555407475533,0.0489881355258001,0.0473735541968,0.0482234738849999,0.041235972022,0.0508462165536,0.04803482713003,0.0523379864346,0.048226248948,0.04738472388881,0.048482727139,0.0525825653152,0.05075505186261,0.0472217367904999,0.04847026479446,0.053857589343,0.0560397099714] +     # length = 600
                                   [0.052044693534,0.0463014784947999,0.048075206605,0.044582711972,0.0477106674122961,0.05248380801104,0.049079792365,0.0505461628055,0.0483177054710001,0.0522602035696,0.0543370820511,0.0529021544902999,0.0491171222751,0.0527711825564,0.0469515897054,0.0446182403574999,0.051423319696,0.0486150847421099,0.0540948980557,0.05145041577933] +    # length = 1200
                                   [0.0520654039522001,0.0510890503800001,0.0452663111438,0.0430852832056,0.0497779631724,0.049490562123,0.0476479009352,0.0471818527890001,0.05558512026358,0.0485637680353,0.0505186204162,0.0435752499631,0.0565969169390999,0.0502279118891,0.0473550821353,0.0506650969836,0.04510232576898,0.055976147188,0.04839626762375,0.044009181433] +   # length = 2400
                                   [0.0618704593439,0.0518446366706999,0.0465729448919,0.0528075649595,0.0486794961057,0.0479412708333999,0.0470603089336,0.0479606754729001,0.0572558369715001,0.0419834888294001,0.0469144456683,0.05044422251197,0.0457798593198,0.0492470603092,0.0440886244498,0.0452071323883,0.0534129507347,0.0530935541810001,0.0517847882606999,0.051098874839]    # length = 4800
             ).astype(float)}
k_fasttree_all = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0323049922434,0.0330997329365,0.0301239618022,0.0311059176135,0.0252810806663,0.032581193386,0.0286972441282,0.0274308960005,0.0319711942442,0.02951189685,0.0289793576468,0.029861903848,0.0301088926937,0.0273234353349,0.0309292058559,0.0323661952707,0.030519146433,0.0355100152377,0.0330002379672,0.0314723987252] +      # length = 50
                                   [0.0273562202205,0.030116735938,0.0301089613672,0.0296475485859,0.0297628754723,0.0295041498544,0.0278976652915,0.0340448167358,0.0292364164156,0.0258750961136,0.0323563450516,0.0263812083153,0.029427368734,0.0277949457749,0.0306641738779,0.0328807525879,0.0312842071938,0.0308510911013,0.028681324357,0.0268408379878] +    # length = 100
                                   [0.030972220064,0.0299638091521,0.0315226136296,0.0328419410779,0.0289174589329,0.0332228654784,0.026909894458,0.0299873012441,0.0303400242964,0.0278613518415,0.0310346620186,0.0320334790433,0.028376787614,0.0309826428086,0.0292771105355,0.0344072489205,0.0296077198604,0.032635135004,0.0304579586454,0.0297026302019] +     # length = 200
                                   [0.0328280374927,0.0293589119216,0.0293702403287,0.0292681320346,0.0304669867301,0.0293316668095,0.0321295772533,0.0263854120724,0.0283967136126,0.03225246587,0.0319497768996,0.0374410630995,0.0308409901689,0.0339875604079,0.0297108082644,0.0315950468596,0.0294834989233,0.028531067488,0.0302582171395,0.0339871709363] +    # length = 300
                                   [0.0302761961251,0.0284981491874,0.0326194302566,0.0338646417916,0.0315185984637,0.0291619371572,0.030537622843,0.025583555008,0.0306140446633,0.0311873871873,0.0313634779695,0.0295955102509,0.0292493981066,0.0305070639184,0.0316019598524,0.0313036969224,0.0306495195478,0.0299053845419,0.0327121231887,0.0338669334437] +   # length = 600
                                   [0.0313626960541,0.0281599019149,0.0285180759384,0.0272499276031,0.0297688868497,0.0323819281317,0.0302250271847,0.0308701523468,0.029107307983,0.032516865492,0.0326983531076,0.0318512151351,0.03028419169,0.0325897124957,0.0295884545792,0.0269629585734,0.0306532010551,0.0305703478654,0.0327032333849,0.0319563213063] +     # length = 1200
                                   [0.0317467294715,0.0318648085465,0.0280939369515,0.0268121476897,0.0295901676171,0.0298187566306,0.0285533113283,0.0290632181982,0.033575925502,0.029423157981,0.0307882974199,0.0262049346281,0.0341295913278,0.030562281022,0.0292778882012,0.0308023171326,0.0276541889464,0.0323372589535,0.0298856928544,0.0277415727643] +    # length = 2400
                                   [0.0366509426732,0.031993037986,0.0291339746877,0.031224729494,0.0299412434915,0.0292786536767,0.0292863646101,0.0288440769319,0.0340184906201,0.0255577601877,0.0281135128078,0.0309604490235,0.0281764460836,0.0293401611922,0.0273622853488,0.0276385592467,0.0325769739675,0.0314486464885,0.031378226974,0.0305317128053]      # length = 4800
             ).astype(float)}
k_fasttree_pen = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0471300508659999,0.047691640878,0.043273694899,0.044389528257,0.03501756386,0.0473919622339999,0.039857377472,0.03766204756,0.046422562203,0.041788744243,0.040569807705,0.04283287143,0.043212032819,0.0387758757409999,0.045286056481,0.045896945576,0.044500586521,0.0506473473510001,0.048632369426,0.045018972129] +      # length = 50
                                   [0.042755809152,0.0468117396589999,0.048573790571,0.04708420105,0.046505913869,0.045802915202,0.044252299491,0.0535084360580001,0.04618442355,0.040133010542,0.0519822627949999,0.04089374384,0.046314504536,0.043409970373,0.04958721778,0.051434131936,0.0492074918910001,0.0480974871289999,0.045243542288,0.042227622644] +    # length = 100
                                   [0.0516297941590001,0.048858683188,0.051063641789,0.053053903432,0.0467551427480001,0.0553351171350001,0.0441941261240001,0.048440355638,0.049723077478,0.0442214239409999,0.050472713115,0.0521259488509999,0.045187909402,0.0505095514820001,0.0482893219079999,0.056684928779,0.047039993029,0.054244840804,0.050083348789,0.047910776959] +     # length = 200
                                   [0.05429832944,0.048022279512,0.0478333330219999,0.0481881549409999,0.050224322631,0.047267546798,0.0541395826969999,0.042425100062,0.044854692312,0.0535634681539999,0.053526008508,0.0616557804509999,0.05031051607,0.057325405126,0.048228245456,0.052373883944,0.049134988781,0.04678109667,0.049150004384,0.055940799892] +    # length = 300
                                   [0.051472449677,0.0483594221349999,0.0549375024370001,0.05757671553,0.051324689652,0.048761865782,0.049588430092,0.041220504961,0.0513360394669999,0.050908780246,0.0526745496209999,0.049876882347,0.0480014265069999,0.049050402895,0.053115973421,0.052171558871,0.049433594117,0.049559151606,0.055139541819,0.0572953390019999] +   # length = 600
                                   [0.0528874785369999,0.047366352338,0.047217355129,0.044856267509,0.050198524351,0.053372440949,0.049987985413,0.051219630024,0.048123423653,0.054554866377,0.055027570498,0.053781241061,0.049256420262,0.054541598151,0.047713941035,0.044998415033,0.0513208660129999,0.050124478916,0.054938343081,0.05234881275] +     # length = 1200
                                   [0.054072322899,0.05245133101,0.046736631728,0.043813804638,0.0500456735490001,0.0500975397239998,0.047537329049,0.048119489762,0.056278200861,0.049720523347,0.051546286315,0.043755881921,0.0580446171919999,0.052085120543,0.048679346299,0.051920575384,0.046682075346,0.056051599927,0.049626538696,0.045929691715] +    # length = 2400
                                   [0.062822368174,0.05324356388,0.0474305641420001,0.053368731835,0.049209206759,0.049293384255,0.048002969582,0.0482982199599999,0.057825998905,0.0425801204529999,0.0480288641059999,0.051650643662,0.046588763682,0.049787492673,0.04492668489,0.045629231183,0.055358152092,0.053937273667,0.052165854354,0.051703741439]      # length = 4800
             ).astype(float)}
k_raxml_all    = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0291083058929,0.0295252200026,0.0460638923123,0.0317690853904,0.024376575981,0.0374488006987,0.0271349087012,0.0276599326647,0.0385267914144,0.0465194458974,0.0300188996496,0.0829166219419,0.0400063483629,0.0265212803704,0.0582467541291,0.0267310447948,0.03268151601,0.0346612446431,0.0353818740691,0.0358755395445] +    # length = 50
                                   [0.0268485472768,0.031820885459,0.0295197216091,0.0357105623058,0.0310019493453,0.0355924263664,0.0322928371271,0.0375244345526,0.0291627732658,0.0253882541787,0.0407196742628,0.0268918770125,0.0300001251777,0.0279692084364,0.0311211313147,0.0317428267122,0.0395086965215,0.0307648756044,0.0284277462937,0.0250961350646] +  # length = 100
                                   [0.0322872175978,0.0293381322182,0.0314086329379,0.0342655513999,0.0283582349795,0.0318992529019,0.026952408549,0.028163229509,0.0310390494538,0.0272003541356,0.0339388771146,0.0335996414129,0.0290238912122,0.0308954442204,0.030718387956,0.0344980501962,0.0299072863749,0.031763471995,0.0269982183644,0.0291480363929] +     # length = 200
                                   [0.0320627849303,0.029357181472,0.0305326707884,0.0289740640911,0.0323534289368,0.0299067751542,0.0316808413939,0.0259196208263,0.0290405317412,0.0336676563179,0.03080075762,0.0362685412896,0.0298654321997,0.0343790777392,0.0312268586191,0.0300231913117,0.029390497616,0.0287303930869,0.031261099007,0.0355477334875] +      # length = 300
                                   [0.0324471348053,0.028763293967,0.0331673356507,0.033793580176,0.0309154878544,0.0308761998228,0.030124767442,0.0254356321015,0.03115063205,0.0313244410451,0.0324663825823,0.0305385141951,0.0292981277634,0.033275992783,0.0328071304776,0.0313505764967,0.0306752449469,0.030397485139,0.0341862389546,0.0325972991048] +        # length = 600
                                   [0.0330032252971,0.028720198828,0.028592964888,0.0276276297974,0.0309272645832,0.0338247898311,0.0298710589662,0.0314159025225,0.0303112909361,0.0332402234861,0.0338654544824,0.0317615272294,0.0317589078139,0.0330886150232,0.0310110608514,0.0275464626637,0.0310748989796,0.0311349348363,0.0345543280953,0.0330950174398] +   # length = 1200
                                   [0.0320797605309,0.0323907439888,0.0290472224036,0.0278363499932,0.0300204062759,0.0302756634095,0.0292560682712,0.0298262268802,0.0345098762028,0.0305992981877,0.0311315199233,0.0259765408769,0.0352052578382,0.0305985761137,0.0292301767971,0.0311854728916,0.0279422574973,0.0321942485498,0.0304121471863,0.0271907821904] + # length = 2400
                                   [0.0378702666787,0.0328385806932,0.0300249446701,0.0316597114817,0.0304318582155,0.0296912604177,0.0299439631298,0.0295138936501,0.0350309732188,0.0261085476618,0.0291266015313,0.0312586109107,0.0289929596556,0.0297044254707,0.0287518965765,0.0280432716479,0.0333538429747,0.0325505572725,0.0327718774596,0.0314986284763]   # length = 4800
             ).astype(float)}
k_raxml_pen    = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0453045728999997,0.0453577545999998,0.0471173456199998,0.0483583831499999,0.03664218621,0.04746481063,0.0454143862147998,0.0407947555199999,0.0559974198499996,0.0693665975399995,0.0453599602569999,0.118915226399999,0.0388290719689999,0.04035513242,0.0413757852399999,0.04056247878,0.0513620269099997,0.0523727373799997,0.0549956692699997,0.0550944392999997] +    # length = 50
                                   [0.04292833999,0.0505419771999999,0.0490139800499999,0.0454465749499999,0.0498155034999997,0.0462732157599999,0.0519476923099997,0.0603559653999999,0.0468426874099998,0.0405797290599999,0.0498122055099999,0.0428691917799999,0.0481851283199999,0.04474516072,0.0519559046899998,0.05066488119,0.0633570330699998,0.0491911648399997,0.0460463582799998,0.04042500107] +  # length = 100
                                   [0.0542605811899999,0.0481504276899998,0.0513714950499999,0.0557831193899999,0.0462874794899999,0.05351037235,0.04470125298,0.04589971395,0.0511695010799999,0.0436252282999999,0.0552594179499999,0.0551928452,0.046466704961,0.0507096942399999,0.0510746869799999,0.05732252165,0.0477607863499998,0.05328604722,0.04476350768,0.0473738275799999] +     # length = 200
                                   [0.053244245845,0.048381250994,0.04991983727,0.0479605690499998,0.0534337896699999,0.0483772793259999,0.0535554350399999,0.0418456882699999,0.0461932962399999,0.0561950290199998,0.0519095218399999,0.0600406398299999,0.04905802711,0.0581779192899999,0.05086339094,0.04985123391,0.0489749013199999,0.04717251422,0.0508396067799999,0.0587191549399999] +      # length = 300
                                   [0.0551314935699999,0.04879469831,0.05589523879,0.0575271033799999,0.05036716079,0.05156173156,0.0490299751,0.04098134432,0.05225841085,0.05115565524,0.05451391399,0.0514190025400001,0.0480898272699999,0.0535537432,0.05510611913,0.0522629845099999,0.0494754136799999,0.0505212934999999,0.0575774067800001,0.0552959253599999] +        # length = 600
                                   [0.05568877014,0.048301431431,0.047330139554,0.045486222308,0.052175164687,0.0557841282,0.049398289505,0.052117519246,0.0501172713060001,0.055774528028,0.056934919612,0.0536442269789999,0.0516503942249999,0.055373962051,0.049997168025,0.0459902262954999,0.0520568875409999,0.051040824206,0.05793195988,0.054168177946] +   # length = 1200
                                   [0.0546330522369999,0.0533059626989999,0.0483143385419999,0.0454720919679999,0.050739962751,0.050819356772,0.0486790802780001,0.0493717178709999,0.057811276485,0.0516708485169999,0.052111124632,0.043352818675,0.059846091651,0.052109742238,0.048585981803,0.0525349942620001,0.047162364543,0.055796313458,0.0504937031149999,0.045002848707] + # length = 2400
                                   [0.0648504935540001,0.054639644376,0.048869781322,0.05409972043,0.05000800556,0.049978460878,0.049057906455,0.049410628573,0.059527728361,0.043497242066,0.0497520698190001,0.052132590417,0.047916814706,0.050399951891,0.0471918844560001,0.046284556287,0.056662951639,0.055797531853,0.054443264327,0.0533396117920001]   # length = 4800
             ).astype(float)}

# modifying deviation from ultrametricity
g_original_all = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.0280701948074,0.0284665533238,0.0277918744686,0.0302173338564,0.0291638526198,0.0333670028798,0.0276712855466,0.0287014800751,0.0314753802416,0.0282098407188,0.0274862173473,0.0292684776963,0.0275858343415,0.0262269140665,0.0313759569632,0.0281008369503,0.0299091821043,0.0307087171474,0.0293649671045,0.0265593511075] + # gamma = 2.95181735298926
                                   [0.029280854503,0.0303339131647,0.0312736774262,0.0299482059267,0.0329865040511,0.0264479264357,0.0290350368792,0.0290737419978,0.032482052885,0.0306838854756,0.0263460558566,0.0279783333488,0.0276478216242,0.0342120186708,0.0321482342748,0.0315294191539,0.0276021969377,0.0296355229081,0.0285572878841,0.0305920085461] +   # gamma = 5.90363470597852
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +  # gamma = 29.518173529892621
                                   [0.0280909773791,0.0312403299266,0.0274101714725,0.0281174628637,0.0300945005087,0.0300174278269,0.0310501598931,0.0297742128717,0.0296604050025,0.0293974803834,0.028466062885,0.0294803240838,0.026384515052,0.0323299257273,0.0287017995153,0.0305639623561,0.0303971561635,0.0270553267319,0.0298093738308,0.0308214798005] +   # gamma = 147.590867649463
                                   [0.0272507080501,0.0299544786577,0.0281671481198,0.0300424858233,0.0293197091582,0.0288135325369,0.0293190994721,0.0297874992075,0.0299515392188,0.0312853943542,0.03005306282,0.0286202266779,0.0267981010643,0.0285518474584,0.0264209441491,0.032087107093,0.0301027220877,0.0266851889331,0.0321933012674,0.0281772935787] +    # gamma = 295.181735298926
                                   [0.0288622557464,0.0296434935604,0.031475222977,0.0296893563844,0.029047548373,0.0307598997306,0.0287052113716,0.0291831772636,0.0319472604556,0.0261854270557,0.0283743597612,0.0301917145229,0.0295370529574,0.028937946753,0.0316708761991,0.0302472260211,0.0328173503124,0.0263799165898,0.0321262806894,0.0297042566438]      # gamma = infinity
             ).astype(float)}
g_original_pen = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.047847795103,0.0490706888062,0.04683684923598,0.0498345240569,0.0488843343512,0.0566761822044001,0.0464639159023,0.0483746195718399,0.053624694774,0.0482372426051,0.04519320741876,0.0499233681265,0.04513053304744,0.0433619120130999,0.05183733504631,0.0474565241727,0.0505965969865,0.0517378233366,0.0480798409243,0.0433731867937001] + # gamma = 2.95181735298926
                                   [0.0491390392052,0.050751112582,0.0519970569752,0.0496817420922,0.0554474452410001,0.0425785840965001,0.0487916970954,0.0480963708709,0.0549828196564,0.0517448555557,0.043919287778,0.04807431624226,0.0471353931779,0.0588363342247,0.053496380025,0.05373070247139,0.0468168874256,0.0489177532522,0.048320349499,0.0516350665238] +   # gamma = 5.90363470597852
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +  # gamma = 29.518173529892621
                                   [0.0462126182937,0.0529320337351,0.0456582128788001,0.0468057675946,0.05008968854,0.0506349497447,0.0522842290605,0.0500000280481,0.0510371260424,0.049477903278,0.0479493668479999,0.049507298963,0.043459457884,0.0557229033284001,0.0475127633373079,0.0522982684945,0.0509746619084,0.04493808060871,0.05123669206535,0.0519384759456] +   # gamma = 147.590867649463
                                   [0.0448077786413999,0.0505609357149999,0.0466924478965,0.0501490793690001,0.0498854992592,0.04722974282,0.0498354879667,0.0496682869213,0.0501146352212,0.0520257878399001,0.050465805805,0.0475466693023,0.04469299512318,0.0480058612534,0.0437478602904,0.0549858440033001,0.0509817142137,0.0440266389576,0.0541337340433,0.0465258941519] +    # gamma = 295.181735298926
                                   [0.0480829251836001,0.0503840442894,0.0538357005955999,0.0496730459156,0.048579809284,0.0517835385454,0.04869663224586,0.0492770149502,0.052777339636,0.0437249780118,0.0470812770366,0.04920911469686,0.049263411293,0.0484794010682,0.0534170278654,0.049179513121,0.0562423789014,0.0426882087384,0.053763492155,0.0496372738096]      # gamma = infinity
             ).astype(float)}
g_fasttree_all = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.028206649441,0.0303651699834,0.0284817734869,0.0302263967199,0.029236468005,0.0333243258302,0.0286332079733,0.0295536767143,0.0304640660407,0.0282639086702,0.0265031036492,0.0292356904905,0.0297203090723,0.0271871728198,0.03404610639,0.02795429746,0.0303843672702,0.0320602449369,0.029419008665,0.026401038837] +         # gamma = 2.95181735298926
                                   [0.0290174935979,0.0315162790807,0.0320238928419,0.0318711685814,0.0326685249709,0.0263888652307,0.0307734708114,0.0285318774847,0.0344731670787,0.0325826301175,0.0275697194955,0.0296906469147,0.0282244065113,0.0347700742343,0.0325362678624,0.0321053037008,0.0291207374935,0.0301593654603,0.0306426048251,0.0315708579283] + # gamma = 5.90363470597852
                                   [0.0328280374927,0.0293589119216,0.0293702403287,0.0292681320346,0.0304669867301,0.0293316668095,0.0321295772533,0.0263854120724,0.0283967136126,0.03225246587,0.0319497768996,0.0374410630995,0.0308409901689,0.0339875604079,0.0297108082644,0.0315950468596,0.0294834989233,0.028531067488,0.0302582171395,0.0339871709363] +    # gamma = 29.518173529892621
                                   [0.0285786823656,0.029999282585,0.0271523010872,0.0290905016772,0.030900339453,0.0313987818409,0.0309090868847,0.0291549242543,0.0304304268284,0.0297604087416,0.027762007561,0.0292458889463,0.0275966596498,0.0346690859674,0.0277324745721,0.0305942735281,0.0321898302787,0.0273355032764,0.0310148259112,0.0319091694526] +    # gamma = 147.590867649463
                                   [0.0275962998199,0.0299907045304,0.0288667218238,0.0324498326919,0.0307286897087,0.0311709246846,0.0317269768524,0.0306352181405,0.0289119169553,0.0308084702914,0.0298125478065,0.0294149525592,0.028804715643,0.0278963034323,0.028436582158,0.0326186669206,0.0299076475065,0.0268707305239,0.0326544777609,0.0288929308927] +   # gamma = 295.181735298926
                                   [0.0312357401703,0.0301406521636,0.0320185049578,0.0283382956334,0.0291644728323,0.0312038974227,0.028866041395,0.0294389286642,0.0324771578258,0.0259699268277,0.0293557383527,0.0319032626632,0.0296372389367,0.0293530949363,0.0321356588537,0.0309043840873,0.033667038491,0.0257766281958,0.0324633288627,0.0310201537093]     # gamma = infinity
             ).astype(float)}
g_fasttree_pen = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.0473206057070001,0.051355746433,0.047349535151,0.049211349979,0.048351365429,0.0555132243529999,0.047001697518,0.049036020118,0.050954073391,0.047410792844,0.0426058308849999,0.048827386045,0.0478974264849999,0.0443193087709999,0.055175378202,0.0462703830460001,0.050423653312,0.0526840020919999,0.0470166644329999,0.042052555048] +         # gamma = 2.95181735298926
                                   [0.047696478912,0.0518609734309999,0.05224246159,0.052167535676,0.05399813333,0.0416654804019999,0.051119110632,0.046420551725,0.0572509941749999,0.0541830401550001,0.045228932885,0.0501798576209999,0.046924919363,0.0586503943009999,0.053053895395,0.053458200506,0.0484421492939999,0.048907350151,0.050898962454,0.052286566816] + # gamma = 5.90363470597852
                                   [0.05429832944,0.048022279512,0.0478333330219999,0.0481881549409999,0.050224322631,0.047267546798,0.0541395826969999,0.042425100062,0.044854692312,0.0535634681539999,0.053526008508,0.0616557804509999,0.05031051607,0.057325405126,0.048228245456,0.052373883944,0.049134988781,0.04678109667,0.049150004384,0.055940799892] +    # gamma = 29.518173529892621
                                   [0.046375329601,0.0500735512679999,0.044625230514,0.047436469667,0.0503879834239999,0.052491208006,0.051521483386,0.048203832513,0.051806597185,0.0494405122840001,0.0458574317889999,0.048583273166,0.044997743261,0.058772382271,0.0450708186569999,0.051480152365,0.053200982282,0.0451167046849999,0.052602568896,0.052990319813] +    # gamma = 147.590867649463
                                   [0.04490474211,0.049626384197,0.0474120960859999,0.0531848553529999,0.051577198061,0.0499443246590001,0.052715178942,0.050159530525,0.047723710792,0.050174033003,0.049458733329,0.048219145691,0.0475870905749999,0.0461805510019999,0.046402412914,0.055001545891,0.049994810443,0.0438121000659999,0.05401788415,0.047141673448] +   # gamma = 295.181735298926
                                   [0.051543219062,0.0508473271249999,0.054002124916,0.046366067259,0.047957600083,0.051842823695,0.048282872417,0.049057012935,0.052646518762,0.043138957594,0.0480040087060001,0.051308399181,0.04870289807,0.048707636292,0.0535625287090001,0.049328516951,0.0564902953249999,0.0414079355849999,0.0537048024319999,0.051029139692]     # gamma = infinity
             ).astype(float)}
g_raxml_all    = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.0272999139625,0.0278193252017,0.0295909164039,0.0303400808308,0.0313242696202,0.0344880772959,0.0303139876324,0.0289185182706,0.0292073635268,0.0273914879854,0.0260464962402,0.0296828491479,0.0282169108937,0.0285802175166,0.0336677859495,0.0276153080127,0.0308845237743,0.0289105140442,0.0301064681206,0.0264006116492] + # gamma = 2.95181735298926
                                   [0.0282510921439,0.0311554853315,0.0361590380746,0.0320835708883,0.0341143700911,0.025244847487,0.0294449346722,0.0281947336124,0.0354035171557,0.0323192616791,0.0278440414164,0.0309780622002,0.0307376938287,0.0349418783849,0.0334295978483,0.0335181002799,0.0302300141224,0.028222133049,0.0296850026892,0.0304346948101] +   # gamma = 5.90363470597852
                                   [0.0320627849303,0.029357181472,0.0305326707884,0.0289740640911,0.0323534289368,0.0299067751542,0.0316808413939,0.0259196208263,0.0290405317412,0.0336676563179,0.03080075762,0.0362685412896,0.0298654321997,0.0343790777392,0.0312268586191,0.0300231913117,0.029390497616,0.0287303930869,0.031261099007,0.0355477334875] +      # gamma = 29.518173529892621
                                   [0.0287254042968,0.0352981454064,0.0278408894449,0.0297604641243,0.0330383826962,0.0317318119936,0.0318559113243,0.0288167036426,0.0307569190561,0.0296778692971,0.0276176651827,0.0285865528874,0.027943431186,0.0349548406979,0.0280118047979,0.0329745001743,0.0308727156797,0.0278252244054,0.0325415090871,0.0316417074694] +  # gamma = 147.590867649463
                                   [0.0286868628488,0.0315960922028,0.0306536635905,0.0314255104595,0.0292647297472,0.0308316706661,0.0300311819886,0.0291450689394,0.029322167052,0.0310678103497,0.033166630753,0.0312398943379,0.0306312987302,0.0283715569896,0.0289647642885,0.0325125929681,0.0317840486632,0.0273688396194,0.0310834972455,0.0290043848989] +   # gamma = 295.181735298926
                                   [0.0297905406495,0.0297926885531,0.0310456639675,0.0292360438103,0.030906206148,0.0316868174359,0.0271826633118,0.0293205996752,0.0341585365465,0.0260266548975,0.0305648626862,0.0348771131633,0.0300130622027,0.0296655917931,0.0351733186787,0.0336740287291,0.0330326358376,0.0270087095931,0.0328645561543,0.0298564597618]    # gamma = infinity
             ).astype(float)}
g_raxml_pen    = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.0460392070299999,0.0473675161699999,0.0494383329038999,0.04950380461,0.0518304942849999,0.0576680198599999,0.0501406611199999,0.047999698679,0.0490747095199999,0.0461459157199999,0.0421623375599999,0.0499009505199998,0.0457553234899999,0.04662178669,0.05475383857,0.0457419482899999,0.0515319699699999,0.0476454856900001,0.04839973193,0.0421818258399999] + # gamma = 2.95181735298926
                                   [0.0466034887199999,0.0514258466899999,0.0589979147399999,0.05283693626,0.056586076277,0.0399752517699999,0.049180011247,0.0461716972,0.0589682217519998,0.0538541339399999,0.0459198917799998,0.0526837898399999,0.0511031324099999,0.0590821233299999,0.0547355085369999,0.05617797512,0.0505770625999999,0.04596203894,0.0493931601199999,0.0506766762399999] +   # gamma = 5.90363470597852
                                   [0.053244245845,0.048381250994,0.04991983727,0.0479605690499998,0.0534337896699999,0.0483772793259999,0.0535554350399999,0.0418456882699999,0.0461932962399999,0.0561950290199998,0.0519095218399999,0.0600406398299999,0.04905802711,0.0581779192899999,0.05086339094,0.04985123391,0.0489749013199999,0.04717251422,0.0508396067799999,0.0587191549399999] +      # gamma = 29.518173529892621
                                   [0.04682172228,0.0590191371999999,0.0455272481399999,0.04867778759,0.0543908731399999,0.0531292604399999,0.0530843453499999,0.04789547853,0.0524650331399999,0.04943174471,0.04579707557,0.0475493427499999,0.04566141004,0.05951363385,0.0459297195899999,0.0556569871899998,0.05113711455,0.0461055238879999,0.0553482110099999,0.0525829265499999] +  # gamma = 147.590867649463
                                   [0.04683748199,0.0523769069599999,0.0506208799999999,0.05151236285,0.0493612921399999,0.0495915053499999,0.05007979607,0.0478882429899999,0.04865379812,0.0509612019699999,0.0551546344599999,0.0513668045599999,0.0507232425289999,0.0470946240399999,0.0474144130379999,0.0550830997299999,0.05324815738,0.04481280412,0.0515544304999999,0.0474818943099999] +   # gamma = 295.181735298926
                                   [0.0493246859899998,0.0504308603799999,0.05251188058,0.04800368889,0.0510819128299999,0.05266468132,0.04563197211,0.04894548511,0.05550077566,0.0431735437799999,0.0495565612899999,0.0563088695799999,0.04958959484,0.0493577525149999,0.05881513258,0.0539094007499998,0.0558241519999999,0.0436655917299999,0.0544858564693,0.04924881497]    # gamma = infinity
             ).astype(float)}

# modifying number of leaves n
n_original_all = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.020114513122449,0.0282375166122449,0.0324337973673469,0.0245172063877551,0.0272950497959184,0.0182739310857143,0.031247507755102,0.0166393724,0.0142833532020408,0.0247072789795918,0.0258129089244898,0.018356357755102,0.0131669945795918,0.0255691832040816,0.027385754877551,0.0253224735632653,0.0358971905102041,0.0196018665306123,0.0223928715510204,0.0207579493877551] + # n = 25
                                   [0.0281822563535354,0.0249302464444444,0.0185664287272727,0.019794771280202,0.0208868234121212,0.0324351795707071,0.0272324534848485,0.0212673383232323,0.0307259986444444,0.020528165749495,0.035553143050505,0.0171052534646465,0.0221377571414141,0.0166433419929293,0.0284115719393939,0.0185920318363636,0.0242513561488889,0.0226686068888889,0.0277032341181818,0.029563458020202] + # n = 50
                                   [0.0314271817845691,0.0222715918815631,0.0273166991831663,0.0267974380880962,0.0320437982822044,0.0301108936166333,0.0338455150537074,0.0334317392090181,0.0277053563196393,0.0299262177226453,0.0278846217088176,0.0276271553733467,0.0282154498759519,0.0242107999016032,0.0275824743378757,0.0372359979565331,0.026469993254509,0.0243580946238477,0.0235819443811623,0.0270539898186373] + # n = 250
                                   [0.0268903810326727,0.0289909661786787,0.0285900760423924,0.0299103890907107,0.0301316245434735,0.0314573442898899,0.0267713733594394,0.0243580081553353,0.0282360886826827,0.029817036197948,0.0268893285264265,0.0300029735058759,0.0277448057643643,0.0295502928638138,0.0239562203488488,0.0306684240435836,0.0278215477664665,0.0338761925374375,0.0287258141455756,0.0342682857913313] + # n = 500
                                   [0.0324368929046953,0.0297296903215287,0.0288485932844023,0.0283625675390746,0.0305399759105603,0.0287495336242122,0.0312924089441971,0.0258828176824413,0.0283369150002902,0.0310587031687593,0.0315481480197843,0.0357377345189494,0.0296620093877344,0.0324900928252826,0.0296365747935468,0.0309474224846422,0.0299091439224611,0.0287504569735618,0.0295955130798749,0.0333243779190245] + # n = 1000
                                   [0.029804730180818,0.0339909934196298,0.029221178559845,0.0306056398597547,0.0298404842101676,0.0301289494502584,0.0301482117786747,0.029449311420035,0.0281864882584404,0.0293664688229888,0.0313763147796249,0.0319077864935608,0.0304258225485296,0.0296281719679469,0.0285285409944286,0.0295553494020995,0.0311244517573368,0.0319072909271843,0.028581808462141,0.0290951544788622] + # n = 2000
                                   [0.0311180800067248,0.0300024751221865,0.0308117398559182,0.0282798964217165,0.0303598142932538,0.0293467214593004,0.0290997864609652,0.0304589499437267,0.0299086103309932,0.0296741386627711,0.0294265176843542,0.0288645085114139,0.0315036209925478,0.0296484900495003,0.0313096299818889,0.0302944292409426,0.0282564912099637,0.0290726313061203,0.0284439773351556,0.030122244439181] + # n = 4000
                                   []
             ).astype(float)}
n_original_pen = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.02569645936,0.0478134912,0.055308738,0.0372680168,0.0480773464,0.0310617824,0.051849652,0.0287447324,0.0217298632,0.04181882688,0.0444300232,0.0311405584,0.01908664048,0.0420674876,0.0454945436,0.04480348224,0.0576735136,0.0320069272,0.03653724696,0.0326541606] + # n = 25
                                   [0.04886677568,0.0417591272,0.0295064358,0.030163248,0.03593318952,0.05667239462,0.04331403976,0.035676336,0.050018986,0.0336281236,0.0568515828,0.0263005454,0.0378793966,0.028093335008,0.0499015742,0.02996614656,0.0412057352,0.0381419484,0.04437566586,0.05124316424] + # n = 50
                                   [0.051082167532,0.037559273292,0.044810196232,0.0459586522924,0.052699972424,0.0506881763056,0.057910226896,0.056638689652,0.047228758448,0.050046380136,0.0454981722248,0.045135282232,0.045975093548,0.03776076925,0.0459965802,0.06162186316,0.04533461362,0.04020816994,0.035940451084,0.0453422321596] + # n = 250
                                   [0.0438554490432,0.0484593672236,0.04811403015652,0.0477001979542,0.051101324506,0.0528745152644,0.043518149686,0.0403896871624,0.046125980752,0.05042957173238,0.0445334615784,0.0515811867904,0.0458806804597999,0.048793526264,0.0396695302416,0.051084892317,0.045123546776,0.057698421358,0.046676803594,0.059133135552] + # n = 500
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] + # n = 1000
                                   [0.049920447125951,0.05741121539105,0.04874674701725,0.0510197147785501,0.050212831602965,0.05106475012815,0.0498896667482,0.0492734197295999,0.0455010030729501,0.0488856667527001,0.0530470361920501,0.0539098531491,0.05040756553788,0.04987671762373,0.0470095210132749,0.04952738272545,0.053212651643105,0.0527441091379,0.047591025686326,0.04740327087425] + # n = 2000
                                   [0.051780715898175,0.050333532810625,0.05123933852385,0.047005249894665,0.0504773183046,0.049323117262795,0.0485634174299499,0.0509670169409,0.0496561398103808,0.0498784275686498,0.0487182599059499,0.0475175461491925,0.0528754133460599,0.0492442087455,0.0522204024415499,0.0508202250875,0.0467932520919349,0.0479788870880001,0.0469937635393149,0.0503718759604049] + # n = 4000
                                   []
             ).astype(float)}
n_fasttree_all = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.0233745483333333,0.0273060726041667,0.0317721760833333,0.028502518,0.0263274307291667,0.0184276874583333,0.0320039618958333,0.0178133110625,0.0157099047916667,0.0265688020833333,0.0267318777291667,0.0212206104255319,0.0146349744893617,0.02617527725,0.0306885778541667,0.0266296922978723,0.0358940066666667,0.022726237875,0.0256513555208333,0.0221866755416667] + # n = 25
                                   [0.0281676436530612,0.0254552176530612,0.0191979806701031,0.0196730986734694,0.022259651744898,0.0354194762474227,0.028767794244898,0.0215476430714286,0.0318545490612245,0.0225959454795918,0.0376215660204082,0.0178580965670103,0.0241877655714286,0.0163992340918367,0.0300468630103093,0.020782743257732,0.0259216792244898,0.0225202144693878,0.0280230574081633,0.0297018474639175] + # n = 50
                                   [0.0316189756506025,0.0233271082747475,0.026671079717742,0.0286318845090543,0.0324517859435484,0.0325347263076924,0.0350022700823293,0.0367362937971887,0.0281513133239437,0.0306144204698796,0.0265411283855422,0.0271815168313254,0.0280753871408451,0.025246746155242,0.0294522290544355,0.0379574386807229,0.0271919005180723,0.0262918703830646,0.023760351937751,0.0283610665873984] + # n = 250
                                   [0.0284433878524097,0.0292533996478305,0.0294008150472837,0.0312827854176707,0.0327657963654619,0.0328304054002006,0.0289150960542169,0.0247166315763053,0.0287486643919599,0.0300701117517588,0.0275851495251004,0.0303989554914745,0.0287550631586346,0.0308515064122368,0.0242924298640484,0.0308398419102823,0.0286444930251257,0.0355644759075377,0.0292522134252759,0.035500508887663] + # n = 500
                                   [0.0328280374927317,0.0293589119215685,0.0293702403286572,0.0292681320346211,0.030466986730095,0.0293316668095476,0.0321295772532597,0.0263854120723617,0.0283967136126442,0.0322524658699798,0.0319497768995983,0.0374410630995473,0.0308409901688507,0.0339875604079276,0.0297108082644254,0.031595046859649,0.0294834989233465,0.0285310674879638,0.0302582171394881,0.0339871709362769] + # n = 1000
                                   [0.0287949638897519,0.033865358268623,0.0293511305776832,0.0303746958455754,0.0305822227207725,0.0312375723856749,0.0302718423826851,0.0313358118105394,0.0277823953910095,0.0302943157276147,0.0316449893592575,0.032558402485084,0.0311598962937342,0.0291815790248058,0.0288865162605421,0.0298826274306496,0.0312212882748934,0.03159996665773,0.0307818758360491,0.0287457500398696] + # n = 2000
                                   [0.0332693129357993,0.0309851160877897,0.031487777168004,0.0292112947029569,0.0317195216030054,0.0292481624092222,0.0299222648962666,0.0307969559164473,0.0303953201527571,0.0301930969159148,0.0309177719626143,0.0287792221877662,0.0304464811934112,0.0298663193420592,0.0318301444147993,0.0311361162631514,0.030038433313974,0.0310331749701678,0.0289587680253358,0.0307967130588087] + # n = 4000
                                   []
             ).astype(float)}
n_fasttree_pen = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.0285117402,0.0432555014,0.0523802506,0.04425146344,0.044908527,0.0303519652,0.0516357862,0.0305120236,0.025585656,0.0445684598,0.044894929,0.0334471268,0.0206226368,0.0432279912,0.0482435476,0.0447795108,0.0571169644,0.0362208978,0.0406431612,0.0339088912] + # n = 25
                                   [0.048858628,0.04146309652,0.02889803572,0.0287624214,0.039526131,0.0596723751,0.0448787108,0.03530396854,0.051874472,0.0364430286,0.0585876118,0.0272594847,0.0410016478,0.0271406824,0.0524645091,0.031595792,0.0433283051,0.0376672082,0.0438185873,0.04982472532] + # n = 50
                                   [0.05012484664,0.03857805678,0.042632845608,0.0481719283,0.052433250484,0.05367840312,0.059146558868,0.06124024428,0.04726689984,0.0503819399,0.04203227892,0.04391608506,0.045108584532,0.03837822888,0.048128064404,0.061903641724,0.045819965344,0.04278256484,0.034965198564,0.046160038204] + # n = 250
                                   [0.0458203080700001,0.048158396912,0.048207659806,0.048700870064,0.054664655786,0.05423195821,0.046692675446,0.04056544533,0.045871431054,0.049651646552,0.045085629952,0.051419293646,0.04686611147,0.05038131329,0.03962526683,0.050253702572,0.045896172692,0.059694061336,0.0462799119960001,0.060056469494] + # n = 500
                                   [0.05429832944,0.048022279512,0.0478333330219999,0.0481881549409999,0.050224322631,0.047267546798,0.0541395826969999,0.042425100062,0.044854692312,0.0535634681539999,0.053526008508,0.0616557804509999,0.05031051607,0.057325405126,0.048228245456,0.052373883944,0.049134988781,0.04678109667,0.049150004384,0.055940799892] + # n = 1000
                                   [0.047579467618,0.0561317521624999,0.0482255822314999,0.049829864935,0.0507462287094999,0.052307400848,0.049207347535,0.0516079527815,0.0442494224589999,0.0498306835004999,0.0527763352650001,0.0541871565475,0.0510307863104998,0.0485992068004999,0.0468507290345,0.0494913491535,0.052652590338,0.051609897258,0.0506190930909999,0.0459591402865] + # n = 2000
                                   [0.05449674682625,0.0512845059575,0.051652054541,0.048042818768,0.0521391976169999,0.0484387352655002,0.0491396497842501,0.0508956261724997,0.0495424812105002,0.05005608114975,0.0503611736455,0.0464974943172499,0.0504019902607502,0.0487285248662502,0.0522107944417502,0.05136476302775,0.0489013686404999,0.0503256248637499,0.0471050510657501,0.0506480875415001] + # n = 4000
                                   []
             ).astype(float)}
n_raxml_all    = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.0219553964583333,0.0269157369375,0.0309749872916667,0.0274934170833333,0.025427755,0.018056303125,0.0309439125,0.0172896410416667,0.0153246697916667,0.0258452045833333,0.0259052608333333,0.0200885047916667,0.0139800047916667,0.0257335727083333,0.0300594058333333,0.024912129375,0.03507912625,0.0218891051041667,0.0239071527083333,0.0210748241666667] + # n = 25
                                   [0.0272518800510204,0.0248584281632653,0.0185089797040816,0.0192529816326531,0.0216576482653061,0.0343067016326531,0.028261981122449,0.0208960308673469,0.0314770525918367,0.021933442,0.0364863681734694,0.0172608278571429,0.0235127111122449,0.0160549079591837,0.0288657525510204,0.0198634807142857,0.0255343562244898,0.0219523541836735,0.0278500434693878,0.0281050243877551] + # n = 50
                                   [0.0311065472489959,0.0219301010421686,0.0264378431325301,0.0281480976345381,0.030970870891767,0.0315062598654618,0.0346289034538152,0.034136322002008,0.027476073453012,0.0305088998694779,0.026425222315261,0.026513622130522,0.0271218364477911,0.0247586598815261,0.02839865887751,0.037554372159237,0.0264236345602409,0.0253940382208835,0.0230843996696787,0.0274610507188755] + # n = 250
                                   [0.0281761887825652,0.02797462397996,0.0279384448907816,0.0309638768947897,0.0352738194669339,0.0347498513937876,0.0273375731251503,0.023953606008016,0.0289228686032064,0.0290199889882767,0.0273099960100201,0.0310792796773548,0.0291759919577155,0.0300810941533067,0.0239864926042084,0.0308130182695391,0.0276920279681964,0.035036500497996,0.0292474925260521,0.0336899165472946] + # n = 500
                                   [0.0320654093688687,0.0293608898333332,0.0306155525155153,0.0290114863128126,0.0322277396986484,0.0298996693278276,0.0316510347552551,0.0258910904384382,0.0290961980825824,0.0336931973513511,0.0308104804874873,0.0362573293714062,0.0298420245304303,0.0343822937397395,0.0312179976266265,0.0299978719729228,0.0293000458434433,0.0287133288679177,0.031191462196196,0.0354851074375373] + # n = 1000
                                   [0.029611785946723,0.032500111278614,0.0302900771549271,0.0328828782838916,0.0295024514961477,0.0358612120568531,0.0322003887182337,0.031469795548524,0.0286292860941468,0.0306191598628811,0.0320728245815204,0.0348256164101549,0.03103553957069,0.0290457565382438,0.0290497716329662,0.0291390288733363,0.0310572945985491,0.0324719402294145,0.0292538605541768,0.0318153340277635] + # n = 2000
                                   [0.0349049141412849,0.0331515935978367,0.0316259864791195,0.0304181650093895,0.0393757585829578,0.0319514094478216,0.030508925878044,0.0303836365336844,0.0331968261654035,0.0319674559695545,0.0309195509233065,0.0329767642376841,0.0330940607299696,0.0310403459430067,0.0340188469766814,0.0354525349946482,0.0350902590365926,0.0295926388399084,0.0310580081393219,0.032063261223243] + # n = 4000
                                   []
             ).astype(float)}
n_raxml_pen    = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.0266865048,0.042695676,0.0515505644,0.0426165788,0.043109254,0.0297387532,0.0497141432,0.0292676644,0.0248791984,0.0424852224,0.0434164352,0.0322274148,0.0201191956,0.0425042136,0.0472372324,0.0432227984,0.05574148,0.0348461072,0.0381087604,0.0320996452] + # n = 25
                                   [0.0470266422,0.0404704224,0.0281256186,0.0281537286,0.038486746,0.0583874444,0.0440399388,0.0342169496,0.0514959148,0.0353336076,0.0566512594,0.0265934574,0.0399672424,0.0266236096,0.05104068,0.0306674188,0.042444085,0.0365477694,0.0435501366,0.0476545594] + # n = 50
                                   [0.0492569816,0.0365057458,0.04277245024,0.0476015718,0.0503528356,0.05233952696,0.0585434602799999,0.05694759352,0.04623171412,0.0501684318,0.04189481956,0.04294681496,0.0439097336,0.03787301428,0.04660715964,0.06128072624,0.0446022718,0.04143049532,0.03396650752,0.04536945476] + # n = 250
                                   [0.04545618912,0.0463485967,0.04605973329,0.04842051662,0.0589831613600001,0.0576237812000001,0.0442132298999999,0.0393362068,0.04652129052,0.0481274127800001,0.044871986,0.05265396094,0.04773468704,0.04925100882,0.03938735284,0.0506831026,0.0445158999,0.05905671114,0.04630718848,0.0571752587000001] + # n = 500
                                   [0.053244245845,0.048381250994,0.04991983727,0.0479605690499998,0.0534337896699999,0.0483772793259999,0.0535554350399999,0.0418456882699999,0.0461932962399999,0.0561950290199998,0.0519095218399999,0.0600406398299999,0.04905802711,0.0581779192899999,0.05086339094,0.04985123391,0.0489749013199999,0.04717251422,0.0508396067799999,0.0587191549399999] + # n = 1000
                                   [0.0491229220999998,0.0540788973599998,0.0498572523349998,0.0540647587899998,0.0492163337149998,0.0602101462349999,0.0526198577099998,0.0520418840899999,0.0458183000409998,0.0506258642249999,0.0536894392699998,0.0581078118299998,0.0510268532849998,0.0486130726899999,0.0472709352349998,0.0484303831249998,0.0525867217749999,0.0532027829249999,0.0483095837749998,0.0510705194549998] + # n = 2000
                                   [0.0574366317364998,0.0550493369399999,0.0520701127009999,0.0501356538249998,0.0649350990001249,0.0531087593574998,0.0502549120549997,0.0503868703374999,0.0542708660949998,0.0532208695574998,0.0506011346874997,0.0535166394549997,0.0549343305099999,0.0508233483753174,0.0559817639112499,0.0586867968199997,0.0574062899999998,0.0481624381932498,0.0507216938644997,0.0529728945004999] + # n = 4000
                                   []
             ).astype(float)}

# modifying model of sequence evolution
m_raxml_all    = {'m':['JC69']*20+['K80']*20+['HKY85']*20+['GTRCAT']*20+['GTRGAMMA']*20,
              'avgbranch':np.array([0.0314482768633633,0.0296024978263262,0.0297926895880878,0.0286565800295293,0.031574693674174,0.0299476350255253,0.0310344320470469,0.0251743669434984,0.0287465362292291,0.0332445214499498,0.0290170195815814,0.035261587807307,0.0304748267387386,0.0341822875257255,0.0315287234719718,0.0285228863743742,0.0276479783288286,0.0298233189234232,0.0308850399147045,0.0347433706627626] + # m = JC69
                                   [0.0320250720075574,0.0301409033458958,0.0300885191095094,0.0293369978173172,0.0322606354996495,0.0303926842117115,0.0317634185570069,0.0256634132282281,0.0292205994412911,0.0342779471545544,0.0296998328410909,0.036321435824339,0.0312722910240238,0.0349776800445442,0.0324732348910408,0.0294966647424923,0.0279658929779779,0.0306600988466964,0.0313518966859357,0.0351495510673672] + # m = K80
                                   [0.0322223605490489,0.0296050789755604,0.0299880607627627,0.0292897813543542,0.0322905341011009,0.0300636374403902,0.0305681738208206,0.0257911016046045,0.0294846392767767,0.0339882379515013,0.0296660058043042,0.0364152547927926,0.0311256788068066,0.0347987622468467,0.0326124278808807,0.0293337828293292,0.0300654543258758,0.0308439318595093,0.0315193370905904,0.0351634228453452] + # m = HKY85
                                   [0.0320018063998997,0.029576718648148,0.0305683732002,0.0290197434784783,0.0323976679463462,0.0298749589919918,0.0316604213908907,0.0258150022512511,0.0289496715190189,0.0337536242928926,0.0309195545115113,0.0364673582540037,0.029763965118118,0.0343602687287286,0.0312391438945443,0.0300620487979978,0.0294535375880879,0.0285984339486985,0.0311793977277276,0.0354596055798796] + # m = GTRCAT
                                   [0.0320654093688687,0.0293608898333332,0.0306155525155153,0.0290114863128126,0.0322277396986484,0.0298996693278276,0.0316510347552551,0.0258910904384382,0.0290961980825824,0.0336931973513511,0.0308104804874873,0.0362573293714062,0.0298420245304303,0.0343822937397395,0.0312179976266265,0.0299978719729228,0.0293000458434433,0.0287133288679177,0.031191462196196,0.0354851074375373] # m = GTRGAMMA
             ).astype(float)}
m_raxml_pen    = {'m':['JC69']*20+['K80']*20+['HKY85']*20+['GTRCAT']*20+['GTRGAMMA']*20,
              'avgbranch':np.array([0.05185471796,0.04840281007,0.0482727713399999,0.0470294688299999,0.0520037761399999,0.0482156235199999,0.0521650070099999,0.04045143256,0.0454909194899999,0.0551515832499999,0.0484908019599999,0.05797786321,0.04978379318,0.0574883417599999,0.0511415670899999,0.04716688358,0.0459084740599999,0.0486936102599999,0.0500675161599999,0.0570982032599999] + # m = JC69
                                   [0.0531500782699999,0.0496040532899999,0.0490451157,0.0484822005699999,0.05354977668,0.0491916593579999,0.05378205074,0.04148095054,0.04638135128,0.0572415787499999,0.0499854835999999,0.0602146674899998,0.0513962289799998,0.0591889645099998,0.0529189782299999,0.04907669439,0.0467438122,0.0504044372199999,0.0510419141599999,0.0581113951599999] + # m = K80
                                   [0.0535040776,0.0487326264,0.04893639361,0.0483984968599999,0.0535840078499999,0.0486282445589999,0.0516721883099999,0.04167443926,0.04678754558,0.0567435526299999,0.04996983045,0.06034389137,0.0511406619099999,0.0589046062,0.0530690673699999,0.0488438196699999,0.05023159332,0.0506781967599999,0.0514023644299999,0.0581378711999999] + # m = HKY85
                                   [0.053172090843,0.0487083008849999,0.0498164780799999,0.0479418431799999,0.0537065229599999,0.048344404815,0.05356191126,0.0417136300599999,0.04594742029,0.0562902536299999,0.0520954645599999,0.0604033055320998,0.04891104672,0.05813004361,0.0508926172599998,0.0500418995,0.0491949301699999,0.04698836094,0.05082933991,0.0586636794499999] + # m = GTRCAT
                                   [0.053244245845,0.048381250994,0.04991983727,0.0479605690499998,0.0534337896699999,0.0483772793259999,0.0535554350399999,0.0418456882699999,0.0461932962399999,0.0561950290199998,0.0519095218399999,0.0600406398299999,0.04905802711,0.0581779192899999,0.05086339094,0.04985123391,0.0489749013199999,0.04717251422,0.0508396067799999,0.0587191549399999] # m = GTRGAMMA
             ).astype(float)}

# plot average branch length vs. r (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
df = {'r':{},'avgbranch':{},'category':{}}
for i in range(len(r_original_all['avgbranch'])):
    #currNum = len(df['r'])
    #df['r'][currNum] = r_original_all['r'][i]
    #df['avgbranch'][currNum] = r_original_all['avgbranch'][i]
    #df['category'][currNum] = 'simulated_all'
    currNum = len(df['r'])
    df['r'][currNum] = r_fasttree_all['r'][i]
    df['avgbranch'][currNum] = r_fasttree_all['avgbranch'][i]
    df['category'][currNum] = 'fasttree_all'
    currNum = len(df['r'])
    df['r'][currNum] = r_raxml_all['r'][i]
    df['avgbranch'][currNum] = r_raxml_all['avgbranch'][i]
    df['category'][currNum] = 'raxml_all'
    #currNum = len(df['r'])
    #df['r'][currNum] = r_original_pen['r'][i]
    #df['avgbranch'][currNum] = r_original_pen['avgbranch'][i]
    #df['category'][currNum] = 'simulated_pen'
    currNum = len(df['r'])
    df['r'][currNum] = r_fasttree_pen['r'][i]
    df['avgbranch'][currNum] = r_fasttree_pen['avgbranch'][i]
    df['category'][currNum] = 'fasttree_pen'
    currNum = len(df['r'])
    df['r'][currNum] = r_raxml_pen['r'][i]
    df['avgbranch'][currNum] = r_raxml_pen['avgbranch'][i]
    df['category'][currNum] = 'raxml_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='r',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(r_original_all['avgbranch']),20):
    #plt.scatter([int(i/20)-0.33],[avg(r_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.29],[avg(r_fasttree_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.10],[avg(r_raxml_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    #plt.scatter([int(i/20)+0.06],[avg(r_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.10],[avg(r_fasttree_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.29],[avg(r_raxml_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.0584839]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.0561525]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.0501241]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.0389230]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.0298239]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $\log_{10}{r}$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_r_const-exp-branch-length.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. r (with constant lambda = lambdaA + lambdaB)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
df = {'r':{},'avgbranch':{},'category':{}}
for i in range(len(r2_original_all['avgbranch'])):
    #currNum = len(df['r'])
    #df['r'][currNum] = r2_original_all['r'][i]
    #df['avgbranch'][currNum] = r2_original_all['avgbranch'][i]
    #df['category'][currNum] = 'simulated_all'
    currNum = len(df['r'])
    df['r'][currNum] = r2_fasttree_all['r'][i]
    df['avgbranch'][currNum] = r2_fasttree_all['avgbranch'][i]
    df['category'][currNum] = 'fasttree_all'
    currNum = len(df['r'])
    df['r'][currNum] = r2_raxml_all['r'][i]
    df['avgbranch'][currNum] = r2_raxml_all['avgbranch'][i]
    df['category'][currNum] = 'raxml_all'
    #currNum = len(df['r'])
    #df['r'][currNum] = r2_original_pen['r'][i]
    #df['avgbranch'][currNum] = r2_original_pen['avgbranch'][i]
    #df['category'][currNum] = 'simulated_pen'
    currNum = len(df['r'])
    df['r'][currNum] = r2_fasttree_pen['r'][i]
    df['avgbranch'][currNum] = r2_fasttree_pen['avgbranch'][i]
    df['category'][currNum] = 'fasttree_pen'
    currNum = len(df['r'])
    df['r'][currNum] = r2_raxml_pen['r'][i]
    df['avgbranch'][currNum] = r2_raxml_pen['avgbranch'][i]
    df['category'][currNum] = 'raxml_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='r',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(r2_original_all['avgbranch']),20):
    #plt.scatter([int(i/20)-0.33],[avg(r2_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.29],[avg(r2_fasttree_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.10],[avg(r2_raxml_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    #plt.scatter([int(i/20)+0.06],[avg(r2_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.10],[avg(r2_fasttree_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.29],[avg(r2_raxml_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+7.55,np.asarray([0.0059057]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0102715]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0934709]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+3.55,np.asarray([0.2953153]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.5791063]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.1759874]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.0501241]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.0134053]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.0059057]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,81,10)])
plt.yticks(axisY); plt.ylim(0,0.8)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(\lambda = \lambda_A + \lambda_B = 169\right)$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $\log_{10}{r}\ \left(\lambda=\lambda_A+\lambda_B=169\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_r_const-lambda.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. lambda
fig = plt.figure()
x = np.array([33.866,84.664,169.328,338.655,846.638])
df = {'lambda':{},'avgbranch':{},'category':{}}
for i in range(len(l_original_all['avgbranch'])):
    #currNum = len(df['lambda'])
    #df['lambda'][currNum] = l_original_all['lambda'][i]
    #df['avgbranch'][currNum] = l_original_all['avgbranch'][i]
    #df['category'][currNum] = 'simulated_all'
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_fasttree_all['lambda'][i]
    df['avgbranch'][currNum] = l_fasttree_all['avgbranch'][i]
    df['category'][currNum] = 'fasttree_all'
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_raxml_all['lambda'][i]
    df['avgbranch'][currNum] = l_raxml_all['avgbranch'][i]
    df['category'][currNum] = 'raxml_all'
    #currNum = len(df['lambda'])
    #df['lambda'][currNum] = l_original_pen['lambda'][i]
    #df['avgbranch'][currNum] = l_original_pen['avgbranch'][i]
    #df['category'][currNum] = 'simulated_pen'
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_fasttree_pen['lambda'][i]
    df['avgbranch'][currNum] = l_fasttree_pen['avgbranch'][i]
    df['category'][currNum] = 'fasttree_pen'
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_raxml_pen['lambda'][i]
    df['avgbranch'][currNum] = l_raxml_pen['avgbranch'][i]
    df['category'][currNum] = 'raxml_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='lambda',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(l_original_all['avgbranch']),20):
    #plt.scatter([int(i/20)-0.33],[avg(l_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.29],[avg(l_fasttree_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.10],[avg(l_raxml_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    #plt.scatter([int(i/20)+0.06],[avg(l_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.10],[avg(l_fasttree_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.29],[avg(l_raxml_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.149117108605]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0596475479543]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.029823773977]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0149119310212]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.00596476888588]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.2506207]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.1002483]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.0501241]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.0250621]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.0100248]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,31,10)])
plt.yticks(axisY); plt.ylim(0,0.3)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\lambda = \lambda_A + \lambda_B$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $\lambda$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_lambda.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. length
fig = plt.figure()
x = np.array([50,100,200,300,600,1200,2400,4800])
df = {'length':{},'avgbranch':{},'category':{}}
for i in range(len(k_original_all['avgbranch'])):
    #currNum = len(df['length'])
    #df['length'][currNum] = k_original_all['length'][i]
    #df['avgbranch'][currNum] = k_original_all['avgbranch'][i]
    #df['category'][currNum] = 'simulated_all'
    currNum = len(df['length'])
    df['length'][currNum] = k_fasttree_all['length'][i]
    df['avgbranch'][currNum] = k_fasttree_all['avgbranch'][i]
    df['category'][currNum] = 'fasttree_all'
    currNum = len(df['length'])
    df['length'][currNum] = k_raxml_all['length'][i]
    df['avgbranch'][currNum] = k_raxml_all['avgbranch'][i]
    df['category'][currNum] = 'raxml_all'
    #currNum = len(df['length'])
    #df['length'][currNum] = k_original_pen['length'][i]
    #df['avgbranch'][currNum] = k_original_pen['avgbranch'][i]
    #df['category'][currNum] = 'simulated_pen'
    currNum = len(df['length'])
    df['length'][currNum] = k_fasttree_pen['length'][i]
    df['avgbranch'][currNum] = k_fasttree_pen['avgbranch'][i]
    df['category'][currNum] = 'fasttree_pen'
    currNum = len(df['length'])
    df['length'][currNum] = k_raxml_pen['length'][i]
    df['avgbranch'][currNum] = k_raxml_pen['avgbranch'][i]
    df['category'][currNum] = 'raxml_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='length',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(k_original_all['avgbranch']),20):
    #plt.scatter([int(i/20)-0.33],[avg(k_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.29],[avg(k_fasttree_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.10],[avg(k_raxml_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    #plt.scatter([int(i/20)+0.06],[avg(k_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.10],[avg(k_fasttree_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.29],[avg(k_raxml_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+8.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+9.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+10.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+8.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+9.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+10.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel('Sequence Length',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title('Average Branch Length vs. Sequence Length',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_length.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. gamma rate
fig = plt.figure()
x = np.array([2.952,5.904,29.518,147.591,295.182,float('inf')])
df = {'gammarate':{},'avgbranch':{},'category':{}}
for i in range(len(g_original_all['avgbranch'])):
    #currNum = len(df['gammarate'])
    #df['gammarate'][currNum] = g_original_all['gammarate'][i]
    #df['avgbranch'][currNum] = g_original_all['avgbranch'][i]
    #df['category'][currNum] = 'simulated_all'
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_fasttree_all['gammarate'][i]
    df['avgbranch'][currNum] = g_fasttree_all['avgbranch'][i]
    df['category'][currNum] = 'fasttree_all'
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_raxml_all['gammarate'][i]
    df['avgbranch'][currNum] = g_raxml_all['avgbranch'][i]
    df['category'][currNum] = 'raxml_all'
    #currNum = len(df['gammarate'])
    #df['gammarate'][currNum] = g_original_pen['gammarate'][i]
    #df['avgbranch'][currNum] = g_original_pen['avgbranch'][i]
    #df['category'][currNum] = 'simulated_pen'
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_fasttree_pen['gammarate'][i]
    df['avgbranch'][currNum] = g_fasttree_pen['avgbranch'][i]
    df['category'][currNum] = 'fasttree_pen'
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_raxml_pen['gammarate'][i]
    df['avgbranch'][currNum] = g_raxml_pen['avgbranch'][i]
    df['category'][currNum] = 'raxml_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='gammarate',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(g_original_all['avgbranch']),20):
    #plt.scatter([int(i/20)-0.33],[avg(g_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.29],[avg(g_fasttree_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.10],[avg(g_raxml_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    #plt.scatter([int(i/20)+0.06],[avg(g_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.10],[avg(g_fasttree_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.29],[avg(g_raxml_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+8.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+8.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'Gamma Distribution Rate $\left(\alpha\right)$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title('Average Branch Length vs. Ultrametricity',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_gammarate.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. n
fig = plt.figure()
x = np.array([25,50,250,500,1000,2000,4000])
df = {'n':{},'avgbranch':{},'category':{}}
for i in range(len(n_original_all['avgbranch'])):
    #currNum = len(df['n'])
    #df['n'][currNum] = n_original_all['n'][i]
    #df['avgbranch'][currNum] = n_original_all['avgbranch'][i]
    #df['category'][currNum] = 'simulated_all'
    currNum = len(df['n'])
    df['n'][currNum] = n_fasttree_all['n'][i]
    df['avgbranch'][currNum] = n_fasttree_all['avgbranch'][i]
    df['category'][currNum] = 'fasttree_all'
    currNum = len(df['n'])
    df['n'][currNum] = n_raxml_all['n'][i]
    df['avgbranch'][currNum] = n_raxml_all['avgbranch'][i]
    df['category'][currNum] = 'raxml_all'
    #currNum = len(df['n'])
    #df['n'][currNum] = n_original_pen['n'][i]
    #df['avgbranch'][currNum] = n_original_pen['avgbranch'][i]
    #df['category'][currNum] = 'simulated_pen'
    currNum = len(df['n'])
    df['n'][currNum] = n_fasttree_pen['n'][i]
    df['avgbranch'][currNum] = n_fasttree_pen['avgbranch'][i]
    df['category'][currNum] = 'fasttree_pen'
    currNum = len(df['n'])
    df['n'][currNum] = n_raxml_pen['n'][i]
    df['avgbranch'][currNum] = n_raxml_pen['avgbranch'][i]
    df['category'][currNum] = 'raxml_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='n',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(n_original_all['avgbranch']),20):
    #plt.scatter([int(i/20)-0.33],[avg(n_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.29],[avg(n_fasttree_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)-0.10],[avg(n_raxml_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    #plt.scatter([int(i/20)+0.06],[avg(n_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.10],[avg(n_fasttree_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.29],[avg(n_raxml_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-39,-34)])
plt.plot(x+3.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+8.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+9.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-39,-34)])
plt.plot(x+3.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+8.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+9.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$n$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $n$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_n.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. model of sequence evolution
handles = [Patch(color=pal['theoretical_all'],label='Theoretical (All)'),Patch(color=pal['raxml_all'],label='Raxml (All)'),Patch(color=pal['theoretical_pen'],label='Conjectured (Pendant)'),Patch(color=pal['raxml_pen'],label='RAxML (Pendant)'),Patch(color=meancolor,label='Mean')]
fig = plt.figure()
df = {'m':{},'avgbranch':{},'category':{}}
for i in range(len(m_raxml_all['avgbranch'])):
    currNum = len(df['m'])
    df['m'][currNum] = m_raxml_all['m'][i]
    df['avgbranch'][currNum] = m_raxml_all['avgbranch'][i]
    df['category'][currNum] = 'raxml_all'
    currNum = len(df['m'])
    df['m'][currNum] = m_raxml_pen['m'][i]
    df['avgbranch'][currNum] = m_raxml_pen['avgbranch'][i]
    df['category'][currNum] = 'raxml_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='m',y='avgbranch',hue='category',data=df,palette=pal,inner=None)
for i in range(0,len(m_raxml_all['avgbranch']),20):
    plt.scatter([int(i/20)-0.2],[avg(m_raxml_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.2],[avg(m_raxml_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-39,-34)])
plt.plot(x+3.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+8.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+9.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-39,-34)])
plt.plot(x+3.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+8.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+9.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel('DNA Evolution Model',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. DNA Evolution Model',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_model.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()