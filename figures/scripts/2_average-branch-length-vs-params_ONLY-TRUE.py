#! /usr/bin/env python3
'''
Niema Moshiri 2016

Generate plots of average branch length vs. various parameters (ONLY TRUE TREES)
'''
# imports
from matplotlib import rcParams
from matplotlib.patches import Patch
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# settings
sns.set_style("ticks")
rcParams['font.family'] = 'serif'
pal = {'theoretical_all':'#000000', 'theoretical_pen':'#A0A0A0', 'simulated_all':'#00FF00', 'simulated_pen':'#AAFFAA', 'fasttree_all':'#FF0000', 'fasttree_pen':'#FFAAAA', 'raxml_all':'#0000FF', 'raxml_pen':'#AAAAFF'}
meancolor='#0000FF'
meansize=20
handles = [Patch(color=pal['theoretical_all'],label='Theoretical (All)'),Patch(color=pal['simulated_all'],label='Simulated (All)'),Patch(color=pal['theoretical_pen'],label='Conjectured (Pendant)'),Patch(color=pal['simulated_pen'],label='Simulated (Pendant)'),Patch(color=meancolor,label='Mean')]

# expected pendant branch length
def exp_pen_bl(la,lb):
    r = float(la)/float(lb)
    return (r**0.5)/((1+2*(r**0.5)-r)*la)

# average
def avg(x):
    return sum(x)/float(len(x))

# DATASETS
# modifying r = lambdaA/lambdaB (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
r_original_all = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.0267173088177,0.0261440606527,0.0312439923838,0.0323414121369,0.0284412304162,0.0221902476671,0.0332732948459,0.0226990515461,0.0322243882024,0.0266119261977,0.0244588228148,0.0317945312511,0.0284623983945,0.0274336980022,0.0294185465291,0.0251340426802,0.0361775313532,0.0378493489401,0.0283413235062,0.0255517224613] + # r = 0.0001
                                   [0.0288172453829,0.0315400414579,0.0295240432778,0.0314335257526,0.0343411206552,0.0278711604309,0.0284841657065,0.0361782655956,0.0272720510435,0.0302386959695,0.0332791081614,0.0296476943958,0.0336052533775,0.0288903880247,0.0266085546863,0.0305035900252,0.0260006600931,0.0353427556564,0.0334477664964,0.0324730285238] + # r = 0.001
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +  # r = 0.01
                                   [0.0299481742691,0.0289619265772,0.0296858964798,0.0297792291545,0.0290083407157,0.031170217537,0.0292953427293,0.0295663785745,0.0295398968843,0.0289082105581,0.0308991197082,0.0286197107639,0.0291878001923,0.0301480809545,0.0289924890617,0.0315681614106,0.0291487309335,0.0291714524352,0.0279512663003,0.029028363695] +   # r = 0.1
                                   [0.0301758545112,0.0283734237391,0.0292391515714,0.0298961038617,0.0292665173444,0.0299198089995,0.0294413732906,0.0287958391176,0.0305076937245,0.030277653103,0.0309607757197,0.0295143582298,0.0285685168413,0.030862266786,0.0313784886087,0.0290061688089,0.0308840269252,0.02954865896,0.0290013878204,0.0314258420558]       # r = 1
             ).astype(float)}
r_original_pen = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.05211371021875,0.0512297228303,0.061797446863,0.0633513695013,0.0558467766767,0.0429430474049,0.0654491528655,0.0444522703401,0.063532247061,0.0518279400333999,0.04785571508136,0.0627527366239,0.05585616795182,0.053917658368,0.057945068252,0.0490126884975,0.07121076825188,0.0745786006010999,0.0556578329178001,0.049892897893] + # r = 0.0001
                                   [0.0540156572161,0.0594743150151,0.0564965532841,0.0593807591684,0.0651779863969,0.052034541759,0.0529811443897,0.0691929607322999,0.0512580490676,0.0567328918511999,0.0628850676783,0.0558861319819,0.06403699584543,0.0547811990241,0.0494660221439999,0.05748380627007,0.0484152664254,0.0675701164849901,0.0635102113208,0.0608867089249] + # r = 0.001
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +  # r = 0.01
                                   [0.0369001356831,0.0351373801105,0.0367995133576001,0.0373990550002,0.0367945518176,0.0405898976469,0.0382727307663,0.037607011242,0.037570699165,0.036201468953745,0.03914934570063,0.0360982855081,0.037667183159,0.037609239605,0.0370391519312,0.04020511913064,0.0385091681041,0.037187987679,0.0355679845582,0.03443311435736] +   # r = 0.1
                                   [0.028884366642,0.0286623900136,0.028669512086,0.0301880764450521,0.0280100686923,0.0295818764956,0.0300524267384,0.02782771570489,0.0289318597909,0.0303210168274,0.0302515229524,0.0302996009504,0.0272456630893,0.03242192537459,0.0315863684157,0.0289330938172,0.0321053473041,0.0299850085924,0.0297205269745,0.0316251289161]       # r = 1
             ).astype(float)}

# modifying r = lambdaA/lambdaB (with constant lambda = lambdaA + lambdaB)
r2_original_all = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.235508623662,0.262010890762,0.26777858773,0.241735202482,0.317321260001,0.295131341426,0.231501419898,0.232604632401,0.282924404669,0.318855169806,0.275903260058,0.252841392577,0.214269304973,0.215280794679,0.299891549679,0.383802517711,0.280469785689,0.199292398496,0.197418658194,0.220236326541] +                                       # r = 0.0001
                                   [0.0771874103174,0.093522571013,0.0944345091822,0.0886075855878,0.0942926395073,0.0846837181773,0.0878442822435,0.0872843633653,0.0990605514199,0.0894565331086,0.104336800808,0.0850699683727,0.0824760998189,0.0958794515592,0.0813781099597,0.0991601749303,0.0862946707689,0.0943619042295,0.0895996381695,0.0789658810706] +                    # r = 0.001
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +                   # r = 0.01
                                   [0.0104230927432,0.0100345745525,0.0103151664639,0.00994326536942,0.00959895138881,0.00940962754297,0.00993734146685,0.0104469917093,0.00939680513363,0.00982917305324,0.0101244762123,0.0111928415007,0.00977384548981,0.0106629374697,0.0103899990171,0.0105269104061,0.00982281005085,0.0105245305712,0.0108628938025,0.0102633901509] +          # r = 0.1
                                   [0.00574271027405,0.00615527046848,0.00587626103644,0.00580408327046,0.00582344507897,0.0059932817163,0.00577139965317,0.0055095373957,0.00586534091989,0.00576687528432,0.00591879122331,0.005796973702,0.00596858785722,0.00607603351526,0.00590287194715,0.00594363947666,0.00590856277427,0.00575930241676,0.00588576984628,0.0063292753831]     # r = 1
              ).astype(float)}
r2_original_pen = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'avgbranch':np.array([0.459348669437,0.5153038103444,0.522107204048,0.47404159432,0.622439142061,0.5776956222216,0.454255302463,0.456792121949,0.552930335108,0.6271853410902,0.543092090623,0.494970308988,0.419463102763,0.42080746492,0.58708424732,0.755948307239999,0.553281735949,0.38679403665,0.386364030903,0.431505017545] +                                       # r = 0.0001
                                   [0.144773034963,0.1754932775334,0.179204975890001,0.1671068241917,0.179310766923,0.161447921808,0.164535198436,0.1637993372327,0.187927327201,0.169884498461,0.1986930765674,0.160093622409,0.1543821285686,0.17895843189993,0.152321664007,0.188821239181,0.160886693421,0.178467951287,0.168521782658,0.147569457856] +                    # r = 0.001
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +                   # r = 0.01
                                   [0.013676545115,0.0125066878306,0.01284881394178,0.01232337265248,0.01206060372795,0.0117345483031,0.01255388975966,0.013516588900278,0.01178834185124,0.01198778753368,0.0131696568037,0.0138917945361,0.0118666528199,0.0131258351838,0.0134663089141,0.01307902445003,0.0123739490849,0.0130068843126,0.0136999503989,0.01308127444976] +          # r = 0.1
                                   [0.0056582866565,0.00603082341276,0.00587361800650002,0.00576840011426401,0.00580617676210001,0.0060649661242,0.00589304199779,0.00547689869019,0.0060351969569,0.0057115932326,0.00600956822908,0.00564103863829001,0.00604813090129001,0.00612134589108,0.00601708198678009,0.00583531481656,0.005989111953,0.00569121171421,0.00583329652408501,0.00644172504573]     # r = 1
              ).astype(float)}

# modifying lambda = lambdaA + lambdaB
l_original_all = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.161344217969,0.13914039572,0.141880578472,0.152121461118,0.14854863721,0.153995679248,0.137604724294,0.13695170033,0.132730890029,0.15804463179,0.153967318291,0.162398566883,0.146383732671,0.135834140848,0.14213131163,0.14570627092,0.130295452985,0.142674896807,0.128650072528,0.148344543078] +                                               # lambda = 33.86550309051126
                                   [0.0575394257479,0.0565515976237,0.0655486845047,0.0602840013708,0.0634513965612,0.0578730072628,0.057906309832,0.054910833606,0.050116414039,0.0553045125509,0.0652008516828,0.0557670546682,0.0565274212505,0.0549595425016,0.0560328950153,0.0618731330533,0.0663397872985,0.059944109731,0.0526933912266,0.0532540226046] +                         # lambda = 84.66375772627816
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +                      # lambda = 169.32751545255631
                                   [0.0152403603366,0.014969397447,0.0159206639142,0.0174719817445,0.0155243566165,0.0159844901146,0.0144759136345,0.0134115442032,0.0142469572875,0.0149791445624,0.0130799891608,0.0152068090801,0.0138217839539,0.0144693128477,0.0144079050459,0.0149786258522,0.0145023765406,0.0142388539955,0.0144987533606,0.0140120301359] +                      # lambda = 338.65503090511262
                                   [0.00615739444225,0.00600433292579,0.00585292974031,0.00640174217878,0.00577163058783,0.00552211831022,0.00564774525726,0.00672511081415,0.00614197255059,0.00607276573989,0.00586703404507,0.00597194979227,0.00595905264059,0.00600993592936,0.00582957055436,0.00667616168129,0.00619190359535,0.00581191444748,0.005915794599,0.0061569606114]      # lambda = 846.63757726278155
             ).astype(float)}
l_original_pen = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'avgbranch':np.array([0.2759533175188,0.2306429744264,0.236774608375,0.250155676183,0.248258306479,0.255836963836,0.226817070628,0.224334398284,0.220990889926,0.27061414603116,0.2523477479745,0.273864996273999,0.246108276762,0.226223466202,0.23967570198,0.241992457224,0.219834282585,0.23559770804985,0.209787213593,0.24730867029024] +                                               # lambda = 33.86550309051126
                                   [0.0965569208382999,0.0967033252558,0.110644241016,0.10059365922,0.1070973548683,0.0952472724450001,0.0961405823836,0.0906541736402,0.0843091702231001,0.0915717238301,0.112834958584,0.0921977778699001,0.0938282362530999,0.090593838843,0.0909637258970999,0.10390981733315,0.112183875984,0.101185811853,0.0887108956711099,0.0880947724664] +                         # lambda = 84.66375772627816
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +                      # lambda = 169.32751545255631
                                   [0.0257229337037,0.0255286663836,0.0265500841376,0.0300388862004,0.0260335247114,0.027121592784623,0.0238752708393,0.0227644530981,0.0236125457331,0.0250316725779,0.0214781147088,0.02586916617946,0.0225990122696,0.0242480211587,0.02354290851786,0.0247995702807,0.0240609147836,0.0238105296315,0.0247443312486,0.0228136054703] +                      # lambda = 338.65503090511262
                                   [0.0103184619891,0.01015787671194,0.0097357957648,0.01094530475379,0.00979960901092999,0.00920926010389,0.00965930485558001,0.0114887217019,0.01031627460386,0.010261071188,0.00973768678319999,0.0102150663898,0.01009174788589,0.0101006564519,0.00971150131459999,0.01112593514886,0.0105132658901,0.00961194084718799,0.0099624898722,0.01032199873488]      # lambda = 846.63757726278155
             ).astype(float)}

# modifying sequence length
k_original_all = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0284931012228,0.0307748834925,0.0301411062467,0.0297436066337,0.0275891512421,0.0290649108389,0.028609414352,0.0274162274925,0.0301476036583,0.0298047602971,0.0284793325808,0.029963215125,0.028837352485,0.0283873892907,0.0303243081214,0.029293205105,0.0327153929395,0.0308518385369,0.0295864403528,0.0309191005386] +     # length = 50
                                   [0.0270778195409,0.0299130834174,0.0318979519992,0.027488412488,0.0306707536898,0.029308765722,0.0270248179271,0.0320555445784,0.0290692530556,0.0284979346389,0.0304438910376,0.0285303894213,0.0304476715115,0.0296161534923,0.0298740411178,0.0302357508632,0.0299607478262,0.0312880496374,0.028793328111,0.0277394173861] +    # length = 100
                                   [0.030419808986,0.0292859000354,0.0310592580287,0.0305805704108,0.0299089491082,0.0312026029657,0.0260914805414,0.0287223750579,0.0291930395234,0.0272580200153,0.0285046210828,0.0311744982884,0.026534703066,0.0321906401393,0.0287807500189,0.0334438177267,0.0281491468137,0.0301456375809,0.0297098225001,0.0291462222521] +   # length = 200
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +  # length = 300
                                   [0.029283946609,0.0284552208998,0.032091702207,0.0324600041667,0.0298169988045,0.0280473146183,0.0293726211966,0.0253982362318,0.0301109800056,0.0291868270968,0.0309414558942,0.0284216696536,0.0288120749584,0.0297963721996,0.031115545752,0.0302906478586,0.0291922768528,0.0289384177662,0.0318018394156,0.032831803984] +     # length = 600
                                   [0.0307311734289,0.0274205580791,0.028939800434,0.0269496451926,0.0281499320659,0.0317128459077,0.0297070788178,0.030370397764,0.0291161747811,0.0311845171899,0.0321532069617,0.0312733422706,0.0299351432161,0.0314959300496,0.0289359713235,0.0266325981277,0.0305939451407,0.0295542418277,0.0321537827674,0.031363970106] +    # length = 1200
                                   [0.0305307291262,0.030958528327,0.0271240187209,0.0263394339541,0.0293952290617,0.0294565255968,0.028540901613,0.0285658958113,0.0331315126629,0.0286675557815,0.0301055205125,0.0260360732925,0.0331989887384,0.0294023497631,0.0283741173256,0.0300299546643,0.0266228839302,0.0322598449667,0.0290677901752,0.0265800123561] +   # length = 2400
                                   [0.0360521753512,0.0311628567019,0.0285442886311,0.0308576014031,0.0295918225096,0.0284400644944,0.0287484391075,0.0285830290755,0.0336441365022,0.0252272138443,0.0274378138284,0.0302030387858,0.0276376135806,0.0290055417255,0.026796159065,0.0273370539296,0.0314225508202,0.0309531563926,0.0311517827872,0.0301353300603]    # length = 4800
             ).astype(float)}
k_original_pen = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'avgbranch':np.array([0.0479437496560001,0.0512661959222,0.0494611259979,0.049277232285,0.045035111209,0.04959253325411,0.0468709947674999,0.044871199523,0.049874273359,0.0498882515238,0.04705790846129,0.0507625453425,0.0483937895041,0.046429062909,0.0505471355663,0.048544757677,0.0558738991706,0.050669543249,0.0505406330905,0.0516853922016001] +     # length = 50
                                   [0.0448047240069999,0.0496283882909,0.0545552579837,0.0462791016855,0.0507082516541999,0.0483459964603,0.0449644133097311,0.0537442032419999,0.0491551591059999,0.0465091046101,0.0513345884951,0.0476220883513001,0.0504105157920999,0.0498537322116,0.0510295290817,0.0497503473294,0.0503447354617999,0.0521468016511,0.0485079183691,0.04632999232542] +    # length = 100
                                   [0.0518057612864499,0.0489542566841,0.0515725201872,0.05096105661866,0.0499165776376,0.0530509878793,0.0438107949136,0.0473194472892,0.04903568759468,0.044675504247,0.0472813869631999,0.0520938085095,0.0433249801138,0.0540253349023,0.048627439764,0.0564744447403,0.0461370856924,0.0513751928659,0.0499526900514,0.0480285213158391] +   # length = 200
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +  # length = 300
                                   [0.050013357726,0.0485191534401,0.0546728109345101,0.0555407475533,0.0489881355258001,0.0473735541968,0.0482234738849999,0.041235972022,0.0508462165536,0.04803482713003,0.0523379864346,0.048226248948,0.04738472388881,0.048482727139,0.0525825653152,0.05075505186261,0.0472217367904999,0.04847026479446,0.053857589343,0.0560397099714] +     # length = 600
                                   [0.052044693534,0.0463014784947999,0.048075206605,0.044582711972,0.0477106674122961,0.05248380801104,0.049079792365,0.0505461628055,0.0483177054710001,0.0522602035696,0.0543370820511,0.0529021544902999,0.0491171222751,0.0527711825564,0.0469515897054,0.0446182403574999,0.051423319696,0.0486150847421099,0.0540948980557,0.05145041577933] +    # length = 1200
                                   [0.0520654039522001,0.0510890503800001,0.0452663111438,0.0430852832056,0.0497779631724,0.049490562123,0.0476479009352,0.0471818527890001,0.05558512026358,0.0485637680353,0.0505186204162,0.0435752499631,0.0565969169390999,0.0502279118891,0.0473550821353,0.0506650969836,0.04510232576898,0.055976147188,0.04839626762375,0.044009181433] +   # length = 2400
                                   [0.0618704593439,0.0518446366706999,0.0465729448919,0.0528075649595,0.0486794961057,0.0479412708333999,0.0470603089336,0.0479606754729001,0.0572558369715001,0.0419834888294001,0.0469144456683,0.05044422251197,0.0457798593198,0.0492470603092,0.0440886244498,0.0452071323883,0.0534129507347,0.0530935541810001,0.0517847882606999,0.051098874839]    # length = 4800
             ).astype(float)}

# modifying deviation from ultrametricity
g_original_all = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.0280701948074,0.0284665533238,0.0277918744686,0.0302173338564,0.0291638526198,0.0333670028798,0.0276712855466,0.0287014800751,0.0314753802416,0.0282098407188,0.0274862173473,0.0292684776963,0.0275858343415,0.0262269140665,0.0313759569632,0.0281008369503,0.0299091821043,0.0307087171474,0.0293649671045,0.0265593511075] + # gamma = 2.95181735298926
                                   [0.029280854503,0.0303339131647,0.0312736774262,0.0299482059267,0.0329865040511,0.0264479264357,0.0290350368792,0.0290737419978,0.032482052885,0.0306838854756,0.0263460558566,0.0279783333488,0.0276478216242,0.0342120186708,0.0321482342748,0.0315294191539,0.0276021969377,0.0296355229081,0.0285572878841,0.0305920085461] +   # gamma = 5.90363470597852
                                   [0.0324368929047,0.0297296903215,0.0288485932844,0.0283625675391,0.0305399759106,0.0287495336242,0.0312924089442,0.0258828176824,0.0283369150003,0.0310587031688,0.0315481480198,0.0357377345189,0.0296620093877,0.0324900928253,0.0296365747935,0.0309474224846,0.0299091439225,0.0287504569736,0.0295955130799,0.033324377919] +  # gamma = 29.518173529892621
                                   [0.0280909773791,0.0312403299266,0.0274101714725,0.0281174628637,0.0300945005087,0.0300174278269,0.0310501598931,0.0297742128717,0.0296604050025,0.0293974803834,0.028466062885,0.0294803240838,0.026384515052,0.0323299257273,0.0287017995153,0.0305639623561,0.0303971561635,0.0270553267319,0.0298093738308,0.0308214798005] +   # gamma = 147.590867649463
                                   [0.0272507080501,0.0299544786577,0.0281671481198,0.0300424858233,0.0293197091582,0.0288135325369,0.0293190994721,0.0297874992075,0.0299515392188,0.0312853943542,0.03005306282,0.0286202266779,0.0267981010643,0.0285518474584,0.0264209441491,0.032087107093,0.0301027220877,0.0266851889331,0.0321933012674,0.0281772935787] +    # gamma = 295.181735298926
                                   [0.0288622557464,0.0296434935604,0.031475222977,0.0296893563844,0.029047548373,0.0307598997306,0.0287052113716,0.0291831772636,0.0319472604556,0.0261854270557,0.0283743597612,0.0301917145229,0.0295370529574,0.028937946753,0.0316708761991,0.0302472260211,0.0328173503124,0.0263799165898,0.0321262806894,0.0297042566438]      # gamma = infinity
             ).astype(float)}
g_original_pen = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'avgbranch':np.array([0.047847795103,0.0490706888062,0.04683684923598,0.0498345240569,0.0488843343512,0.0566761822044001,0.0464639159023,0.0483746195718399,0.053624694774,0.0482372426051,0.04519320741876,0.0499233681265,0.04513053304744,0.0433619120130999,0.05183733504631,0.0474565241727,0.0505965969865,0.0517378233366,0.0480798409243,0.0433731867937001] + # gamma = 2.95181735298926
                                   [0.0491390392052,0.050751112582,0.0519970569752,0.0496817420922,0.0554474452410001,0.0425785840965001,0.0487916970954,0.0480963708709,0.0549828196564,0.0517448555557,0.043919287778,0.04807431624226,0.0471353931779,0.0588363342247,0.053496380025,0.05373070247139,0.0468168874256,0.0489177532522,0.048320349499,0.0516350665238] +   # gamma = 5.90363470597852
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] +  # gamma = 29.518173529892621
                                   [0.0462126182937,0.0529320337351,0.0456582128788001,0.0468057675946,0.05008968854,0.0506349497447,0.0522842290605,0.0500000280481,0.0510371260424,0.049477903278,0.0479493668479999,0.049507298963,0.043459457884,0.0557229033284001,0.0475127633373079,0.0522982684945,0.0509746619084,0.04493808060871,0.05123669206535,0.0519384759456] +   # gamma = 147.590867649463
                                   [0.0448077786413999,0.0505609357149999,0.0466924478965,0.0501490793690001,0.0498854992592,0.04722974282,0.0498354879667,0.0496682869213,0.0501146352212,0.0520257878399001,0.050465805805,0.0475466693023,0.04469299512318,0.0480058612534,0.0437478602904,0.0549858440033001,0.0509817142137,0.0440266389576,0.0541337340433,0.0465258941519] +    # gamma = 295.181735298926
                                   [0.0480829251836001,0.0503840442894,0.0538357005955999,0.0496730459156,0.048579809284,0.0517835385454,0.04869663224586,0.0492770149502,0.052777339636,0.0437249780118,0.0470812770366,0.04920911469686,0.049263411293,0.0484794010682,0.0534170278654,0.049179513121,0.0562423789014,0.0426882087384,0.053763492155,0.0496372738096]      # gamma = infinity
             ).astype(float)}

# modifying number of leaves n
n_original_all = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.020114513122449,0.0282375166122449,0.0324337973673469,0.0245172063877551,0.0272950497959184,0.0182739310857143,0.031247507755102,0.0166393724,0.0142833532020408,0.0247072789795918,0.0258129089244898,0.018356357755102,0.0131669945795918,0.0255691832040816,0.027385754877551,0.0253224735632653,0.0358971905102041,0.0196018665306123,0.0223928715510204,0.0207579493877551] + # n = 25
                                   [0.0281822563535354,0.0249302464444444,0.0185664287272727,0.019794771280202,0.0208868234121212,0.0324351795707071,0.0272324534848485,0.0212673383232323,0.0307259986444444,0.020528165749495,0.035553143050505,0.0171052534646465,0.0221377571414141,0.0166433419929293,0.0284115719393939,0.0185920318363636,0.0242513561488889,0.0226686068888889,0.0277032341181818,0.029563458020202] + # n = 50
                                   [0.0314271817845691,0.0222715918815631,0.0273166991831663,0.0267974380880962,0.0320437982822044,0.0301108936166333,0.0338455150537074,0.0334317392090181,0.0277053563196393,0.0299262177226453,0.0278846217088176,0.0276271553733467,0.0282154498759519,0.0242107999016032,0.0275824743378757,0.0372359979565331,0.026469993254509,0.0243580946238477,0.0235819443811623,0.0270539898186373] + # n = 250
                                   [0.0268903810326727,0.0289909661786787,0.0285900760423924,0.0299103890907107,0.0301316245434735,0.0314573442898899,0.0267713733594394,0.0243580081553353,0.0282360886826827,0.029817036197948,0.0268893285264265,0.0300029735058759,0.0277448057643643,0.0295502928638138,0.0239562203488488,0.0306684240435836,0.0278215477664665,0.0338761925374375,0.0287258141455756,0.0342682857913313] + # n = 500
                                   [0.0324368929046953,0.0297296903215287,0.0288485932844023,0.0283625675390746,0.0305399759105603,0.0287495336242122,0.0312924089441971,0.0258828176824413,0.0283369150002902,0.0310587031687593,0.0315481480197843,0.0357377345189494,0.0296620093877344,0.0324900928252826,0.0296365747935468,0.0309474224846422,0.0299091439224611,0.0287504569735618,0.0295955130798749,0.0333243779190245] + # n = 1000
                                   [0.029804730180818,0.0339909934196298,0.029221178559845,0.0306056398597547,0.0298404842101676,0.0301289494502584,0.0301482117786747,0.029449311420035,0.0281864882584404,0.0293664688229888,0.0313763147796249,0.0319077864935608,0.0304258225485296,0.0296281719679469,0.0285285409944286,0.0295553494020995,0.0311244517573368,0.0319072909271843,0.028581808462141,0.0290951544788622] + # n = 2000
                                   [0.0311180800067248,0.0300024751221865,0.0308117398559182,0.0282798964217165,0.0303598142932538,0.0293467214593004,0.0290997864609652,0.0304589499437267,0.0299086103309932,0.0296741386627711,0.0294265176843542,0.0288645085114139,0.0315036209925478,0.0296484900495003,0.0313096299818889,0.0302944292409426,0.0282564912099637,0.0290726313061203,0.0284439773351556,0.030122244439181] + # n = 4000
                                   []
             ).astype(float)}
n_original_pen = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'avgbranch':np.array([0.02569645936,0.0478134912,0.055308738,0.0372680168,0.0480773464,0.0310617824,0.051849652,0.0287447324,0.0217298632,0.04181882688,0.0444300232,0.0311405584,0.01908664048,0.0420674876,0.0454945436,0.04480348224,0.0576735136,0.0320069272,0.03653724696,0.0326541606] + # n = 25
                                   [0.04886677568,0.0417591272,0.0295064358,0.030163248,0.03593318952,0.05667239462,0.04331403976,0.035676336,0.050018986,0.0336281236,0.0568515828,0.0263005454,0.0378793966,0.028093335008,0.0499015742,0.02996614656,0.0412057352,0.0381419484,0.04437566586,0.05124316424] + # n = 50
                                   [0.051082167532,0.037559273292,0.044810196232,0.0459586522924,0.052699972424,0.0506881763056,0.057910226896,0.056638689652,0.047228758448,0.050046380136,0.0454981722248,0.045135282232,0.045975093548,0.03776076925,0.0459965802,0.06162186316,0.04533461362,0.04020816994,0.035940451084,0.0453422321596] + # n = 250
                                   [0.0438554490432,0.0484593672236,0.04811403015652,0.0477001979542,0.051101324506,0.0528745152644,0.043518149686,0.0403896871624,0.046125980752,0.05042957173238,0.0445334615784,0.0515811867904,0.0458806804597999,0.048793526264,0.0396695302416,0.051084892317,0.045123546776,0.057698421358,0.046676803594,0.059133135552] + # n = 500
                                   [0.054535951574,0.049555332245,0.0479049161356,0.0472623505316001,0.0510811875846,0.0472539221421001,0.0536389278309099,0.0422586666341,0.0454898116453,0.05258177772979,0.0537887074779999,0.060414100249,0.04909265413686,0.0553610336059999,0.0486882849941,0.0522882162929999,0.0506369394969999,0.0479567180705,0.04916231158884,0.05566594314884] + # n = 1000
                                   [0.049920447125951,0.05741121539105,0.04874674701725,0.0510197147785501,0.050212831602965,0.05106475012815,0.0498896667482,0.0492734197295999,0.0455010030729501,0.0488856667527001,0.0530470361920501,0.0539098531491,0.05040756553788,0.04987671762373,0.0470095210132749,0.04952738272545,0.053212651643105,0.0527441091379,0.047591025686326,0.04740327087425] + # n = 2000
                                   [0.051780715898175,0.050333532810625,0.05123933852385,0.047005249894665,0.0504773183046,0.049323117262795,0.0485634174299499,0.0509670169409,0.0496561398103808,0.0498784275686498,0.0487182599059499,0.0475175461491925,0.0528754133460599,0.0492442087455,0.0522204024415499,0.0508202250875,0.0467932520919349,0.0479788870880001,0.0469937635393149,0.0503718759604049] + # n = 4000
                                   []
             ).astype(float)}

# plot average branch length vs. r (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
df = {'r':{},'avgbranch':{},'category':{}}
for i in range(len(r_original_all['avgbranch'])):
    currNum = len(df['r'])
    df['r'][currNum] = r_original_all['r'][i]
    df['avgbranch'][currNum] = r_original_all['avgbranch'][i]
    df['category'][currNum] = 'simulated_all'
    currNum = len(df['r'])
    df['r'][currNum] = r_original_pen['r'][i]
    df['avgbranch'][currNum] = r_original_pen['avgbranch'][i]
    df['category'][currNum] = 'simulated_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='r',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(r_original_all['avgbranch']),20):
    plt.scatter([int(i/20)-0.2],[avg(r_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.2],[avg(r_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.0584839]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.0561525]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.0501241]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.0389230]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.0298239]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(E(l_b)=0.298\right)$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $\log_{10}{r}\ \left(E(l_b)=0.298\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_r_const-exp-branch-length.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. r (with constant lambda = lambdaA + lambdaB)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
df = {'r':{},'avgbranch':{},'category':{}}
for i in range(len(r2_original_all['avgbranch'])):
    currNum = len(df['r'])
    df['r'][currNum] = r2_original_all['r'][i]
    df['avgbranch'][currNum] = r2_original_all['avgbranch'][i]
    df['category'][currNum] = 'simulated_all'
    currNum = len(df['r'])
    df['r'][currNum] = r2_original_pen['r'][i]
    df['avgbranch'][currNum] = r2_original_pen['avgbranch'][i]
    df['category'][currNum] = 'simulated_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='r',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(r2_original_all['avgbranch']),20):
    plt.scatter([int(i/20)-0.2],[avg(r2_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.2],[avg(r2_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+7.55,np.asarray([0.0059057]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0102715]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0934709]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+3.55,np.asarray([0.2953153]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.5791063]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.1759874]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.0501241]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.0134053]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.0059057]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,81,10)])
plt.yticks(axisY); plt.ylim(0,0.8)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(\lambda = \lambda_A + \lambda_B = 169\right)$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $\log_{10}{r}\ \left(\lambda=\lambda_A+\lambda_B=169\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_r_const-lambda.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. lambda
fig = plt.figure()
x = np.array([33.866,84.664,169.328,338.655,846.638])
df = {'lambda':{},'avgbranch':{},'category':{}}
for i in range(len(l_original_all['avgbranch'])):
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_original_all['lambda'][i]
    df['avgbranch'][currNum] = l_original_all['avgbranch'][i]
    df['category'][currNum] = 'simulated_all'
    currNum = len(df['lambda'])
    df['lambda'][currNum] = l_original_pen['lambda'][i]
    df['avgbranch'][currNum] = l_original_pen['avgbranch'][i]
    df['category'][currNum] = 'simulated_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='lambda',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(l_original_all['avgbranch']),20):
    plt.scatter([int(i/20)-0.2],[avg(l_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.2],[avg(l_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.149117108605]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0596475479543]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.029823773977]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0149119310212]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.00596476888588]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.2506207]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.1002483]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.0501241]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.0250621]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.0100248]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,31,10)])
plt.yticks(axisY); plt.ylim(0,0.3)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\lambda = \lambda_A + \lambda_B$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $\lambda$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_lambda.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. length
fig = plt.figure()
x = np.array([50,100,200,300,600,1200,2400,4800])
df = {'length':{},'avgbranch':{},'category':{}}
for i in range(len(k_original_all['avgbranch'])):
    currNum = len(df['length'])
    df['length'][currNum] = k_original_all['length'][i]
    df['avgbranch'][currNum] = k_original_all['avgbranch'][i]
    df['category'][currNum] = 'simulated_all'
    currNum = len(df['length'])
    df['length'][currNum] = k_original_pen['length'][i]
    df['avgbranch'][currNum] = k_original_pen['avgbranch'][i]
    df['category'][currNum] = 'simulated_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='length',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(k_original_all['avgbranch']),20):
    plt.scatter([int(i/20)-0.2],[avg(k_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.2],[avg(k_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+8.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+9.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+10.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+8.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+9.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+10.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel('Sequence Length',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title('Average Branch Length vs. Sequence Length',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_length.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. gamma rate
fig = plt.figure()
x = np.array([2.952,5.904,29.518,147.591,295.182,float('inf')])
df = {'gammarate':{},'avgbranch':{},'category':{}}
for i in range(len(g_original_all['avgbranch'])):
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_original_all['gammarate'][i]
    df['avgbranch'][currNum] = g_original_all['avgbranch'][i]
    df['category'][currNum] = 'simulated_all'
    currNum = len(df['gammarate'])
    df['gammarate'][currNum] = g_original_pen['gammarate'][i]
    df['avgbranch'][currNum] = g_original_pen['avgbranch'][i]
    df['category'][currNum] = 'simulated_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='gammarate',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(g_original_all['avgbranch']),20):
    plt.scatter([int(i/20)-0.2],[avg(g_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.2],[avg(g_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+8.55,np.asarray([0.0298238593208140]*6),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-40,-34)])
plt.plot(x+3.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+8.95,np.asarray([0.05012413331229246]*6),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'Gamma Distribution Rate $\left(\alpha\right)$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title('Average Branch Length vs. Ultrametricity',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_gammarate.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot average branch length vs. n
fig = plt.figure()
x = np.array([25,50,250,500,1000,2000,4000])
df = {'n':{},'avgbranch':{},'category':{}}
for i in range(len(n_original_all['avgbranch'])):
    currNum = len(df['n'])
    df['n'][currNum] = n_original_all['n'][i]
    df['avgbranch'][currNum] = n_original_all['avgbranch'][i]
    df['category'][currNum] = 'simulated_all'
    currNum = len(df['n'])
    df['n'][currNum] = n_original_pen['n'][i]
    df['avgbranch'][currNum] = n_original_pen['avgbranch'][i]
    df['category'][currNum] = 'simulated_pen'
df = pd.DataFrame(df)
ax = sns.violinplot(x='n',y='avgbranch',hue='category',data=df,order=x,palette=pal,inner=None)
for i in range(0,len(n_original_all['avgbranch']),20):
    plt.scatter([int(i/20)-0.2],[avg(n_original_all['avgbranch'][i:i+20])],c=meancolor,s=meansize)
    plt.scatter([int(i/20)+0.2],[avg(n_original_pen['avgbranch'][i:i+20])],c=meancolor,s=meansize)
x = np.asarray([i/10.0 for i in range(-39,-34)])
plt.plot(x+3.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+4.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+5.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+6.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+7.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+8.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
plt.plot(x+9.5,np.asarray([0.0298238593208140]*5),linestyle='--',color=pal['theoretical_all'])
x = np.asarray([i/10.0 for i in range(-39,-34)])
plt.plot(x+3.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+4.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+5.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+6.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+7.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+8.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
plt.plot(x+9.9,np.asarray([0.05012413331229246]*5),linestyle='--',color=pal['theoretical_pen'])
axisY = np.asarray([i/100.0 for i in range(0,11,2)])
plt.yticks(axisY); plt.ylim(0,0.1)
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$n$',fontsize=14)
sns.plt.ylabel('Average Branch Length',fontsize=14)
sns.plt.title(r'Average Branch Length vs. $n$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('avg-branch-length_vs_n.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()