#! /usr/bin/env python3
'''
Niema Moshiri 2016

Generate plots of variance vs. various parameters
'''
# imports
from matplotlib import rcParams
from matplotlib.collections import PolyCollection
from matplotlib.patches import Patch
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# settings
sns.set_style("ticks")
rcParams['font.family'] = 'serif'
pal = {'var_bl':'#0000FF'}
handles = [Patch(color=pal['var_bl'],label='Branch Length Variance')]

# set alpha transparency for axes
def setAlpha(ax,a):
    for art in ax.get_children():
        if isinstance(art, PolyCollection):
            art.set_alpha(a)

# DATASETS
# modifying r = lambdaA/lambdaB (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
r_bl_var = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
            'var_bl':np.array([0.00207953771451176,0.00190034866961136,0.00223254989623759,0.00325972506098889,0.00218022470500101,0.00152862135127214,0.00259849269455309,0.00127503240325813,0.00257951371004508,0.00240819804049084,0.00178073344577471,0.00224399989390189,0.00231593684021141,0.00157838457289732,0.0021753916860603,0.00160763353569905,0.00351385214928255,0.00406156391398292,0.00197135286849899,0.00170846332712998] + # r = 0.0001
                           [0.00205302354431645,0.00244156516171012,0.00189020074460784,0.00308878546294033,0.00295190906378281,0.00193153934269172,0.00247614646292691,0.00408738340451713,0.00187519930394335,0.00259297596840693,0.00351706133034814,0.00189177019160492,0.00300347898168077,0.00226686022824388,0.00168708274221724,0.002994372861709,0.00185382376062039,0.00356531058412287,0.00270252826106449,0.00283478411120851] + # r = 0.001
                           [0.00233746026352402,0.0018770581127352,0.00179533772649977,0.0018935180759086,0.00219292489949806,0.00197460704003244,0.00228677730130069,0.00150641847572724,0.00220044556726869,0.00243042255635685,0.00243751028619301,0.0037242715464221,0.00225378973585473,0.00253323149548405,0.00252965100411244,0.00238404194896335,0.00206051105203529,0.00243994481902074,0.00188825656217357,0.00279516861345636] + # r = 0.01
                           [0.00152195055939375,0.00136894648892244,0.00135087761481782,0.00132824663594636,0.00142296338526348,0.00155889692435841,0.00131229697464906,0.00143263099657908,0.00136874594460162,0.00119975531372966,0.00134980982268189,0.00129016125538146,0.00138524943776255,0.00136624711656331,0.00131767694350467,0.00159046270778561,0.00127773320985606,0.00142100565720735,0.00115505151177579,0.00152539236754379] + # r = 0.1
                           [0.00100021193320957,0.000868685469749328,0.000872237766620502,0.000956786576211283,0.000972935909984219,0.000921174384605138,0.000967854165836447,0.00089835662818974,0.00101126578740964,0.00098181053478131,0.00104987421121261,0.000797937220656912,0.000906129417502646,0.00102325916369459,0.00106448440256526,0.000846274282852854,0.0010773303276796,0.000897520039671396,0.000863631163644471,0.00101288839225137] + # r = 1
                           [])}

# modifying r = lambdaA/lambdaB (with constant lambda = lambdaA + lambdaB)
r2_bl_var = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
             'var_bl':np.array([0.144087399763687,0.150402960226743,0.214959271676672,0.140322194903937,0.229381891394106,0.230252913197765,0.123453452641916,0.135557435066785,0.181225509376379,0.307232799931548,0.197794859719113,0.160172530274453,0.120246321462733,0.100049350602765,0.270641407157954,0.450847688785284,0.182789618831076,0.0918561823365435,0.0931598671473921,0.111448710592483] + # r = 0.0001
                            [0.015978941473604,0.0273668106057196,0.022224914184124,0.0190033653787531,0.0237644117954185,0.0152534731151461,0.0224262481845247,0.0222676996152792,0.0263223095669539,0.0177135028221919,0.0252845069189461,0.016751072365707,0.0177909610751417,0.0272623623889148,0.0171146205460676,0.0254189329033474,0.0213515349563989,0.0202895207212743,0.022254451433205,0.0156746653565431] + # r = 0.001
                            [0.00233746026352402,0.0018770581127352,0.00179533772649977,0.0018935180759086,0.00219292489949806,0.00197460704003244,0.00228677730130069,0.00150641847572724,0.00220044556726869,0.00243042255635685,0.00243751028619301,0.0037242715464221,0.00225378973585473,0.00253323149548405,0.00252965100411244,0.00238404194896335,0.00206051105203529,0.00243994481902074,0.00188825656217357,0.00279516861345636] + # r = 0.01
                            [0.000178234503259233,0.000164226259272776,0.000155848968513621,0.000156929446719637,0.000137943940080359,0.000142299119670586,0.000161000525248575,0.000193902804524202,0.000142966702301474,0.000160161214395481,0.000178849761428837,0.000212406317506164,0.000135142222455141,0.000181960102330697,0.00017146176057505,0.000186802876495375,0.000157158535594529,0.000192282298064243,0.000205111189838011,0.000175254494690852] + # r = 0.1
                            [3.53960140179802e-05,4.29265010679949e-05,3.2777969727254e-05,3.66059894745593e-05,3.66206096463275e-05,3.71624130572999e-05,3.50875166728172e-05,3.01208189995314e-05,3.42271806294506e-05,3.46889777540718e-05,3.87970475339412e-05,3.69163670538003e-05,3.49196020636184e-05,3.77157303354667e-05,3.84110414973131e-05,3.97577939490493e-05,3.67853368534171e-05,3.41275980796644e-05,3.77237756190863e-05,4.25207737536521e-05] + # r = 1
                            [])}

# modifying lambda = lambdaA + lambdaB
l_bl_var = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
            'var_bl':np.array([0.0790561533169556,0.0453362445601833,0.0453568687978617,0.0581180772361749,0.0490503403019768,0.0605239658533023,0.0469166282084525,0.0495308548367091,0.0429013134520943,0.0623693131389267,0.063404231921449,0.0604454047257483,0.0513019059361393,0.0416961250304587,0.0438338416335036,0.0479640971163377,0.0396660018622247,0.0478861164301047,0.0380273894447557,0.0541558668997504] + # lambda = 33.86550309051126
                           [0.00811370992296715,0.0067189458870022,0.0105162036278486,0.0087707409359286,0.00970259134203444,0.00775448338350988,0.0078038814241513,0.00674637314549521,0.00531322507874271,0.00709121896511353,0.00889780817798097,0.00763940192676077,0.00684201281199245,0.00702178309031329,0.00773796791359914,0.00945666699645431,0.0108990391487649,0.00802381241654272,0.0060250479101643,0.00721492623784642] + # lambda = 84.66375772627816
                           [0.00233746026352402,0.0018770581127352,0.00179533772649977,0.0018935180759086,0.00219292489949806,0.00197460704003244,0.00228677730130069,0.00150641847572724,0.00220044556726869,0.00243042255635685,0.00243751028619301,0.0037242715464221,0.00225378973585473,0.00253323149548405,0.00252965100411244,0.00238404194896335,0.00206051105203529,0.00243994481902074,0.00188825656217357,0.00279516861345636] + # lambda = 169.32751545255631
                           [0.000650483442928075,0.000506178813803454,0.000579699906989052,0.000805701374357854,0.000555001120946126,0.000590459384187889,0.000491623874885628,0.000396464991674684,0.000412503100764831,0.000625077226559875,0.000437013645396332,0.000488547324718468,0.000476422351030336,0.000461629044829483,0.000505690501280768,0.000643401712032268,0.000492569172976265,0.000493048831244814,0.00052422609925685,0.000517155845167243] + # lambda = 338.65503090511262
                           [9.27546361739632e-05,8.44354275541088e-05,8.71966763264131e-05,9.99648935556019e-05,8.45468904341336e-05,6.55246874311454e-05,7.69312310912285e-05,0.00012205394481348,8.46268655478853e-05,9.55404439148693e-05,7.77174113125641e-05,7.61382681064286e-05,7.65862052055394e-05,7.95253438679616e-05,7.99697380352714e-05,9.98721373890087e-05,9.44179586694693e-05,8.28899693313157e-05,8.51150087021624e-05,9.62916729675281e-05] + # lambda = 846.63757726278155
                           [])}

# modifying sequence length
k_bl_var = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
            'var_bl':np.array([0.00189952606779379,0.00210445909528708,0.00245892032337231,0.00204544492850943,0.00171113805518155,0.00189755732636526,0.00204423700906913,0.00185708070668799,0.00217392884381999,0.00199496815783479,0.00182439470251728,0.00212949944012328,0.00188875953351693,0.00184228597872439,0.00202406309578845,0.00179803630029407,0.00281662836083762,0.00253226539344661,0.00197776083651484,0.00253229462583655] + # length = 50
                           [0.00166046742711637,0.00206261622003783,0.0026819247397424,0.00167169318267788,0.00216040304854121,0.00200570444604319,0.00163836032582481,0.00234008463908371,0.0020150077893356,0.002177598811026,0.00202661306922096,0.00226258852327269,0.00213924522418423,0.00186086774411486,0.0021435850797453,0.00209277182744006,0.00215759098579855,0.00233432446650188,0.00188452124099743,0.00155197818947947] + # length = 100
                           [0.00229197209365726,0.00217853044056246,0.00244092803250844,0.00204696237152379,0.00202374475887205,0.00216259030105139,0.00158995388245747,0.00194120321535941,0.00198045197907295,0.00180407987478238,0.00207149279911233,0.00224610376220337,0.00145147865083874,0.00276866605886159,0.00206620244915145,0.00279658305716323,0.00172346275639001,0.00220328714669713,0.00206430687820198,0.00211070841783824] + # length = 200
                           [0.00233746026352402,0.0018770581127352,0.00179533772649977,0.0018935180759086,0.00219292489949806,0.00197460704003244,0.00228677730130069,0.00150641847572724,0.00220044556726869,0.00243042255635685,0.00243751028619301,0.0037242715464221,0.00225378973585473,0.00253323149548405,0.00252965100411244,0.00238404194896335,0.00206051105203529,0.00243994481902074,0.00188825656217357,0.00279516861345636] + # length = 300
                           [0.00170463044932693,0.00184049664382714,0.00234058038784784,0.00235067012790436,0.00217032300061423,0.00172033665215368,0.00203506970848355,0.00152790159780276,0.00212280933468969,0.00204366200802315,0.00217624350039978,0.00162380228891506,0.00207384454184033,0.00240260687926476,0.0022710641143593,0.00201249013914743,0.00208615022226158,0.00205362765123634,0.00228296669378676,0.00273854621111909] + # length = 600
                           [0.00215865792330332,0.00151981825402523,0.00186139449904129,0.00156284698188217,0.00175807248310972,0.00281263028161894,0.0023497533105334,0.00242581697835383,0.00193183691485513,0.00232655632680072,0.00245275065706689,0.00220584133717035,0.00263206785467064,0.00252925022255498,0.00181633752051841,0.00151551737664366,0.0023200641875939,0.00190254775765912,0.00266077777248122,0.00258246659877874] + # length = 1200
                           [0.00243791646515111,0.00244076544418962,0.00174291107261256,0.00156781956730789,0.00184199517298697,0.00182399137605955,0.00179298828662932,0.00211030797915303,0.00307350763346943,0.00163880232912107,0.00197908055745366,0.00136328837141192,0.00296445383086572,0.00207599669794741,0.0019122462080573,0.00215640139157542,0.00145871157604393,0.00225592287439534,0.00200155242332804,0.0015830560964617] + # length = 2400
                           [0.00296045484874121,0.00225909383580769,0.00201663943002663,0.00222818863357636,0.00214498556591181,0.0018265817485746,0.00204386285026821,0.00175512461916314,0.00297998785877262,0.00150542622321501,0.0016233348506729,0.00194362853552196,0.00173697663281308,0.0021177498260251,0.00168179521973264,0.00170409750845965,0.00224990163904891,0.00233991446443765,0.00243764109954427,0.00203286652930811] + # length = 4800
                           [])}

# modifying deviation from ultrametricity
g_bl_var = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
            'var_bl':np.array([0.00246573386531349,0.00292330396708639,0.00232163605041324,0.00364259409568395,0.0031735823500144,0.00345089040412646,0.00258097560069928,0.00321189944671449,0.003047096578769,0.00253440046521705,0.00278684013897536,0.00248082020191144,0.00251988242534062,0.00195893316793059,0.00318225916115109,0.00237456030378993,0.0027924573528177,0.00325714479957452,0.00273673420502175,0.00213424059019812] + # gamma = 2.95181735298926
                           [0.00241623838382741,0.00281069819929288,0.00267965555334717,0.00273271678031672,0.00333568912064319,0.00228137729088648,0.00238418896921057,0.00242112301953679,0.0030414816472886,0.0027172796012601,0.0018309905130412,0.00192763179820335,0.00176174633211015,0.00369431196616035,0.00275562280798986,0.00282417757915083,0.00225910126128909,0.00263984903604693,0.00219137084382576,0.00264346654143999] + # gamma = 5.90363470597852
                           [0.00233746026352402,0.0018770581127352,0.00179533772649977,0.0018935180759086,0.00219292489949806,0.00197460704003244,0.00228677730130069,0.00150641847572724,0.00220044556726869,0.00243042255635685,0.00243751028619301,0.0037242715464221,0.00225378973585473,0.00253323149548405,0.00252965100411244,0.00238404194896335,0.00206051105203529,0.00243994481902074,0.00188825656217357,0.00279516861345636] + # gamma = 29.518173529892621
                           [0.00201745465520716,0.00199681714908353,0.00155313149146319,0.00181804133505081,0.00190857092691787,0.00194585075928738,0.0020994790850117,0.00206773430150908,0.00167407576199775,0.00189083371643607,0.00166672828662319,0.00193561231098038,0.00150437282186424,0.00227588990401117,0.00183550283396309,0.00201291654091238,0.00235768145849735,0.00149245538861709,0.00199003940571115,0.00206603599935618] + # gamma = 147.590867649463
                           [0.00163502899972983,0.00182705043864512,0.0016730887670907,0.00190408118283605,0.00185390682329251,0.00192140703970767,0.00181225717454599,0.00207982194846951,0.00204891664611475,0.00219392478127308,0.00185596203776527,0.00187670809732455,0.00153363166568617,0.00182682381982061,0.00147582751550395,0.00217824195485243,0.00252431975669331,0.0015750512019102,0.0024498126050631,0.00177577816473294] + # gamma = 295.181735298926
                           [0.00192276887034339,0.00184238887611414,0.0020149791922102,0.00196283161096587,0.00172429295834755,0.00192884315935828,0.00153502612289657,0.00183834989259791,0.00249699698825012,0.00148494595705909,0.00148065630597995,0.00228780434295765,0.00185584412790911,0.00204458250920286,0.00227822618604994,0.00226294425235995,0.00281421959898163,0.00154258041569089,0.00236876664094789,0.00203018023584536] + # gamma = infinity
                           [])}

# modifying n
n_bl_var = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
            'var_bl':np.array([0.000868531589014915,0.00113611321972011,0.00163474520826918,0.000800123014247292,0.00097528410827679,0.00029988469026986,0.00137655995042725,0.000445315792473718,0.000227629486784795,0.00107356545716495,0.00095954828354168,0.000461180126765227,0.000377105910538052,0.00114774273719678,0.00122276863834017,0.000971308014443172,0.00187503709878185,0.000502906944423896,0.000568235554495038,0.000762054315559034] + # n = 25
                           [0.00138211684272662,0.000948070851684257,0.000399169728831643,0.00090506517824264,0.000665705544066382,0.00234879095912677,0.0012079097627489,0.000723932509478782,0.00166394487447497,0.000621333732984278,0.00210421881366234,0.000454656853637307,0.00106826035472959,0.000415640822972106,0.00151476609427095,0.000481199524477495,0.000852639747789786,0.000727660460893873,0.00160298937653767,0.00138700023487493] + # n = 50
                           [0.00257981958902517,0.00107590339858155,0.001713362506584,0.00146303112247515,0.0027273210047863,0.00209779893728399,0.00291218925186867,0.00230345324781534,0.00153159808366616,0.00194163446295249,0.00178861634649568,0.00195854794963817,0.00169176246209076,0.00121141111743173,0.00149184208061136,0.00398467522815985,0.00167577289512043,0.00149938389979355,0.00121310781656607,0.00180573740522978] + # n = 250
                           [0.00148518124986183,0.00218050425682648,0.00184585400875435,0.00255337827527651,0.00177883294659915,0.00213077999221891,0.00148529190635582,0.00137383426920228,0.00171869844273503,0.00205225122497949,0.00164203984601872,0.0017643979442332,0.00186388112425651,0.00174149165383952,0.00131970521146319,0.00222573587057716,0.00210541908010901,0.00293681060187532,0.0025067603637558,0.00287051531544984] + # n = 500
                           [0.00233746026352402,0.0018770581127352,0.00179533772649977,0.0018935180759086,0.00219292489949806,0.00197460704003244,0.00228677730130069,0.00150641847572724,0.00220044556726869,0.00243042255635685,0.00243751028619301,0.0037242715464221,0.00225378973585473,0.00253323149548405,0.00252965100411244,0.00238404194896335,0.00206051105203529,0.00243994481902074,0.00188825656217357,0.00279516861345636] + # n = 1000
                           [0.00203777531528981,0.00299928776407623,0.0021204712713439,0.00230715090164491,0.00219884573951838,0.00199753297226309,0.00243504882202235,0.00203478919376832,0.00191865840957291,0.00208151616601431,0.0024121608115516,0.00255087836961201,0.00238367243746922,0.00201385096194282,0.00196517358608463,0.00211969790164469,0.0022868800001148,0.00268538270630308,0.00174300490849091,0.002153905122965] + # n = 2000
                           [0.00258429596519464,0.00213839412544213,0.00233370638065609,0.00193592608297768,0.00229842695327844,0.00196502806208868,0.00202955413319616,0.00210094135847988,0.00224815345788885,0.00198057425272078,0.00204869233369572,0.00203627616931429,0.00243436269563072,0.0021489653783522,0.00241501693601801,0.002275547890071,0.00197271527879301,0.00211502549452988,0.00191878280499387,0.00219953169815787] + # n = 4000
                           [])}

# plot Branch Length Variance vs. r (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
axisY = np.asarray([0.,0.001,0.002,0.003,0.004,0.005,0.006])
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
ax = sns.violinplot(x='r',y='var_bl',data=pd.DataFrame(r_bl_var),order=x,color=pal['var_bl'],scale='width',width=0.3,inner=None)
setAlpha(ax,0.7)
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(E(l_b)=0.298\right)$',fontsize=14)
sns.plt.ylabel(r'Branch Length Variance',fontsize=14)
sns.plt.title(r'Branch Length Variance vs. $\log_{10}{r}\ \left(E(l_b)=0.298\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('bl-var_vs_r_const-exp-branch-length_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Branch Length Variance vs. r (with constant lambda = lambdaA + lambdaB)
axisY = np.asarray([0.,0.1,0.2,0.3,0.4,0.5])
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
ax = sns.violinplot(x='r',y='var_bl',data=pd.DataFrame(r2_bl_var),order=x,color=pal['var_bl'],scale='width',width=0.3,inner=None)
setAlpha(ax,0.7)
x = np.linspace(-4,0,100)
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(\lambda = \lambda_A + \lambda_B = 169\right)$',fontsize=14)
sns.plt.ylabel(r'Branch Length Variance',fontsize=14)
sns.plt.title(r'Branch Length Variance vs. $\log_{10}{r}\ \left(\lambda=\lambda_A+\lambda_B=169\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('bl-var_vs_r_const-lambda_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Branch Length Variance vs. lambda
axisY = np.asarray([0.,0.02,0.04,0.06,0.08,0.1])
fig = plt.figure()
x = np.array([33.866,84.664,169.328,338.655,846.638])
ax = sns.violinplot(x='lambda',y='var_bl',data=pd.DataFrame(l_bl_var),order=x,color=pal['var_bl'],scale='width',width=0.3,inner=None)
setAlpha(ax,0.7)
x = np.linspace(-100,1000,1100)
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\lambda = \lambda_A + \lambda_B$',fontsize=14)
sns.plt.ylabel(r'Branch Length Variance',fontsize=14)
sns.plt.title(r'Branch Length Variance vs. $\lambda$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('bl-var_vs_lambda_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Branch Length Variance vs. length
axisY = np.asarray([0.,0.001,0.002,0.003,0.004,0.005])
fig = plt.figure()
x = np.array([50,100,200,300,600,1200,2400,4800])
ax = sns.violinplot(x='length',y='var_bl',data=pd.DataFrame(k_bl_var),order=x,color=pal['var_bl'],scale='width',width=0.3,inner=None)
setAlpha(ax,0.7)
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel('Sequence Length',fontsize=14)
sns.plt.ylabel(r'Branch Length Variance',fontsize=14)
sns.plt.title('Branch Length Variance vs. Sequence Length',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('bl-var_vs_length_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Branch Length Variance vs. gamma rate
axisY = np.asarray([0.,0.001,0.002,0.003,0.004,0.005])
fig = plt.figure()
x = np.array([2.952,5.904,29.518,147.591,295.182,float('inf')])
ax = sns.violinplot(x='gammarate',y='var_bl',data=pd.DataFrame(g_bl_var),order=x,color=pal['var_bl'],scale='width',width=0.3,inner=None)
setAlpha(ax,0.7)
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'Gamma Distribution Rate $\left(\alpha\right)$',fontsize=14)
sns.plt.ylabel(r'Branch Length Variance',fontsize=14)
sns.plt.title('Branch Length Variance vs. Ultrametricity',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('bl-var_vs_gammarate_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Branch Length Variance vs. n
axisY = np.asarray([0.,0.001,0.002,0.003,0.004,0.005])
fig = plt.figure()
x = np.array([25,50,250,500,1000,2000,4000])
ax = sns.violinplot(x='n',y='var_bl',data=pd.DataFrame(n_bl_var),order=x,color=pal['var_bl'],scale='width',width=0.3,inner=None)
setAlpha(ax,0.7)
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$n$',fontsize=14)
sns.plt.ylabel(r'Branch Length Variance',fontsize=14)
sns.plt.title('Branch Length Variance vs. $n$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('bl-var_vs_n_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()