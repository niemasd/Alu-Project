#! /usr/bin/env python3
'''
Niema Moshiri 2016

Generate plots of fraction of cherries vs. various parameters
'''
# imports
from matplotlib import rcParams
from matplotlib.collections import PolyCollection
from matplotlib.patches import Patch
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# settings
sns.set_style("ticks")
rcParams['font.family'] = 'serif'
pal = {'simulated':'#597DBE', 'fasttree':'#FF9980', 'raxml':'#A2B7C3', 'theoretical':'#000000', 'fasttree_fix90':'#D41A1C', 'raxml_fix90':'#377EE8', 'raxml_fix80':'#4DAF4A'}
#handles = [Patch(color=pal['theoretical'],label='Theoretical'),Patch(color=pal['fasttree'],label='FastTree'),Patch(color=pal['fasttree_fix90'],label='FastTree (Corrected, 90%)'),Patch(color=pal['raxml'],label='RAxML'),Patch(color=pal['raxml_fix80'],label='RAxML (Corrected, 80%)'),Patch(color=pal['raxml_fix90'],label='RAxML (Corrected, 90%)')]
handles = [Patch(color=pal['theoretical'],label='Theoretical'),Patch(color=pal['fasttree'],label='FastTree'),Patch(color=pal['fasttree_fix90'],label='FastTree (Corrected, 90%)'),Patch(color=pal['raxml'],label='RAxML'),Patch(color=pal['raxml_fix90'],label='RAxML (Corrected, 90%)')]
axisY = np.asarray([-5,-4,-3,-2,-1,0,1])

# Expected Number of Cherries as a Function of r
def cherries_vs_r(r):
    return (r**0.5)/(1+r+r**0.5)

# Estimated r from number of cherries
def r_vs_cherries(c):
    if isinstance(c,np.ndarray):
        for i in range(len(c)):
            if c[i] > 1./3.:
                c[i] = 1./3.
    return ((1-c-((c+1)*(1-3*c))**0.5)/(2*c))**2

# set alpha transparency for axes
def setAlpha(ax,a):
    for art in ax.get_children():
        if isinstance(art, PolyCollection):
            art.set_alpha(a)

# DATASETS
# modifying r = lambdaA/lambdaB (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
r_original = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([14,12,7,10,10,12,8,10,8,12,14,7,13,9,8,8,10,9,9,11] +                              # r = 0.0001
                                  [33,28,26,30,25,31,33,28,32,29,28,29,25,27,30,31,32,27,27,27] +                     # r = 0.001
                                  [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] +                    # r = 0.01
                                  [230,238,226,233,225,219,216,219,225,221,217,224,223,219,222,219,213,225,225,229] + # r = 0.1
                                  [331,326,336,340,348,333,345,326,336,328,319,336,326,327,330,332,335,331,320,329]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
r_fasttree = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([300,308,315,304,323,307,319,312,329,312,306,316,300,321,310,308,314,309,304,311] + # r = 0.0001
                                  [261,263,271,257,262,278,270,269,268,256,278,280,270,249,266,274,252,280,273,274] + # r = 0.001
                                  [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # r = 0.01
                                  [243,262,246,252,258,241,242,237,247,251,251,240,250,244,240,250,242,243,250,255] + # r = 0.1
                                  [326,325,328,338,348,327,343,325,341,329,320,334,327,327,330,324,333,332,314,329]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
r_fasttree_fix90 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                    'cherries':np.log10(r_vs_cherries(np.array([0.052,0.048,0.059,0.057,0.053,0.055,0.045,0.049,0.054,0.071,0.044,0.048,0.065,0.051,0.045,0.047,0.057,0.061,0.046,0.064] + # r = 0.0001
                                        [0.056,0.053,0.044,0.054,0.054,0.064,0.057,0.056,0.068,0.052,0.066,0.046,0.057,0.053,0.048,0.063,0.055,0.059,0.051,0.05] +  # r = 0.001
                                        [0.089,0.097,0.098,0.091,0.088,0.092,0.088,0.085,0.101,0.1,0.09,0.089,0.093,0.096,0.099,0.086,0.089,0.092,0.097,0.096] +    # r = 0.01
                                        [0.201,0.207,0.204,0.203,0.209,0.19,0.198,0.194,0.202,0.198,0.202,0.203,0.202,0.206,0.185,0.191,0.199,0.198,0.202,0.208] +  # r = 0.1
                                        [0.29,0.285,0.273,0.297,0.306,0.278,0.288,0.287,0.286,0.279,0.273,0.284,0.284,0.273,0.291,0.277,0.291,0.288,0.27,0.276]     # r = 1
                   ).astype(float)))}
r_fasttree_fix95 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                    'cherries':np.log10(r_vs_cherries(np.array([0.026,0.026,0.026,0.031,0.024,0.026,0.021,0.027,0.025,0.033,0.03,0.025,0.036,0.021,0.026,0.028,0.025,0.026,0.026,0.032] +  # r = 0.0001
                                        [0.038,0.034,0.026,0.036,0.034,0.036,0.034,0.038,0.043,0.033,0.041,0.029,0.033,0.033,0.035,0.039,0.039,0.036,0.03,0.032] +  # r = 0.001
                                        [0.074,0.077,0.084,0.078,0.078,0.082,0.077,0.075,0.08,0.085,0.076,0.078,0.081,0.084,0.089,0.075,0.073,0.081,0.084,0.083] +  # r = 0.01
                                        [0.185,0.19,0.183,0.193,0.187,0.174,0.178,0.173,0.186,0.178,0.183,0.18,0.178,0.182,0.173,0.176,0.176,0.183,0.18,0.191] +    # r = 0.1
                                        [0.266,0.251,0.242,0.269,0.27,0.256,0.251,0.263,0.257,0.251,0.252,0.251,0.254,0.245,0.257,0.256,0.258,0.267,0.25,0.257]     # r = 1
                   ).astype(float)))}
r_raxml    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([328,339,333,322,330,325,326,329,339,324,339,342,327,325,337,344,329,343,332,334] + # r = 0.0001
                                  [275,273,274,281,283,282,284,285,290,270,289,290,281,277,264,287,259,286,287,278] + # r = 0.001
                                  [199,215,210,215,211,228,215,192,209,208,219,225,197,206,211,212,209,209,217,200] + # r = 0.01
                                  [243,264,248,253,258,242,241,243,247,251,252,242,255,242,248,248,240,243,256,263] + # r = 0.1
                                  [331,322,330,336,346,326,343,327,338,328,320,332,326,327,332,324,335,330,317,331]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
r_raxml_fix80 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                 'cherries':np.log10(r_vs_cherries(np.array([0.056,0.059,0.063,0.062,0.052,0.057,0.059,0.04,0.067,0.05,0.069,0.061,0.059,0.054,0.06,0.064,0.046,0.061,0.059,0.057] +    # r = 0.0001
                                     [0.059,0.048,0.051,0.049,0.05,0.051,0.049,0.05,0.047,0.042,0.048,0.049,0.05,0.053,0.058,0.058,0.041,0.053,0.047,0.048] +    # r = 0.001
                                     [0.084,0.093,0.102,0.093,0.092,0.091,0.102,0.096,0.094,0.096,0.093,0.1,0.089,0.092,0.103,0.095,0.092,0.099,0.104,0.097] +   # r = 0.01
                                     [0.208,0.218,0.217,0.216,0.216,0.197,0.212,0.207,0.211,0.211,0.212,0.213,0.212,0.211,0.197,0.199,0.206,0.213,0.209,0.216] + # r = 0.1
                                     [0.309,0.297,0.297,0.312,0.321,0.299,0.317,0.299,0.311,0.305,0.292,0.305,0.302,0.294,0.309,0.295,0.311,0.302,0.289,0.302]   # r = 1
                ).astype(float)))}
r_raxml_fix90 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                 'cherries':np.log10(r_vs_cherries(np.array([0.01,0.01,0.01,0.01,0.01,0.012,0.008,0.007,0.011,0.012,0.016,0.005,0.012,0.009,0.01,0.008,0.01,0.006,0.01,0.011] +         # r = 0.0001
                                     [0.031,0.024,0.022,0.028,0.023,0.029,0.028,0.027,0.028,0.028,0.026,0.026,0.024,0.026,0.027,0.026,0.027,0.027,0.022,0.026] + # r = 0.001
                                     [0.077,0.087,0.085,0.078,0.077,0.08,0.083,0.08,0.084,0.089,0.08,0.079,0.082,0.08,0.09,0.078,0.081,0.085,0.089,0.082] +      # r = 0.01
                                     [0.199,0.206,0.204,0.201,0.202,0.19,0.197,0.196,0.201,0.198,0.2,0.201,0.201,0.203,0.182,0.188,0.194,0.198,0.199,0.201] +    # r = 0.1
                                     [0.29,0.281,0.274,0.3,0.302,0.275,0.286,0.281,0.286,0.279,0.274,0.283,0.287,0.269,0.288,0.277,0.289,0.287,0.268,0.276]      # r = 1
                ).astype(float)))}
r_raxml_fix95 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                 'cherries':np.log10(r_vs_cherries(np.array([0.006,0.006,0.004,0.008,0.006,0.008,0.005,0.006,0.005,0.01,0.006,0.003,0.006,0.006,0.003,0.007,0.007,0.004,0.005,0.007] +  # r = 0.0001
                                     [0.022,0.02,0.018,0.02,0.018,0.022,0.023,0.017,0.021,0.024,0.018,0.02,0.02,0.022,0.022,0.021,0.025,0.02,0.019,0.02] +       # r = 0.001
                                     [0.071,0.072,0.075,0.07,0.068,0.075,0.07,0.068,0.069,0.081,0.071,0.074,0.072,0.068,0.079,0.065,0.07,0.075,0.078,0.077] +    # r = 0.01
                                     [0.183,0.187,0.186,0.192,0.185,0.174,0.174,0.173,0.184,0.175,0.183,0.178,0.177,0.185,0.168,0.171,0.174,0.185,0.185,0.184] + # r = 0.1
                                     [0.265,0.252,0.242,0.269,0.269,0.256,0.257,0.263,0.255,0.252,0.256,0.255,0.253,0.245,0.259,0.256,0.255,0.265,0.25,0.257]    # r = 1
                ).astype(float)))}
r_fasttree_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.00259112,0.00167373,0.00125273,0.00211274,0.00153397,0.00221708,0.00127848,0.00146812,0.00106884,0.00205367,0.0017137,0.00111848,0.00140597,0.00132294,0.00122357,0.00180502,0.00134897,0.00106581,0.00146013,0.00178702] +# r = 0.0001
                                                      [0.0027005,0.00231558,0.00149568,0.00260693,0.00202584,0.0026354,0.00325965,0.00188967,0.00264273,0.00240021,0.00222768,0.00235425,0.00171695,0.0020636,0.00298759,0.00235696,0.00307641,0.00197012,0.00197477,0.00250449] + # r = 0.001
                                                      [0.0122579,0.0140104,0.0147327,0.0129625,0.0127697,0.0166014,0.00966062,0.0170136,0.0205515,0.0116561,0.0104276,0.0129337,0.0144581,0.00953683,0.0153007,0.01193,0.0111577,0.0136173,0.0151836,0.0130099] + # r = 0.01
                                                      [0.151919,0.175476,0.148687,0.146993,0.129048,0.108831,0.105748,0.125227,0.133087,0.145826,0.129651,0.143007,0.107577,0.142741,0.121937,0.119136,0.0934888,0.12372,0.129202,0.201572] + # r = 0.1
                                                      [1,0.667569,1,0.700721,1,1,0.702307,1,1,1,1,0.630382,1,0.468371,1,1,0.511356,1,0.704684,0.817548] + # r = 1
                                                      []
                                                      ))}
r_raxml_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.000870785,0.000721476,0.000543969,0.000812787,0.000767027,0.00115985,0.000708702,0.000788084,0.000663358,0.0008593,0.000763153,0.000542042,0.000716182,0.000671087,0.00062377,0.000828667,0.000577192,0.000572545,0.000705479,0.000833441] +# r = 0.0001
                                                      [0.00218258,0.00190193,0.00115899,0.00174507,0.00140276,0.00219349,0.00252501,0.00123777,0.0019915,0.00182022,0.00169188,0.00182905,0.00125066,0.00152518,0.00239899,0.00187002,0.00240785,0.00116542,0.00154912,0.00196829] + # r = 0.001
                                                      [0.0116796,0.0128327,0.0145352,0.0123368,0.0118993,0.0158731,0.00913205,0.0160686,0.0194957,0.0110458,0.00967891,0.0120827,0.0132024,0.00912984,0.0146636,0.0115625,0.0107406,0.0133031,0.014599,0.0121914] + # r = 0.01
                                                      [0.152309,0.17417,0.14719,0.146065,0.128731,0.10839,0.106013,0.124227,0.130832,0.144351,0.129936,0.141635,0.106686,0.142508,0.12038,0.118949,0.093411,0.123444,0.128082,0.198322] + # r = 0.1
                                                      [1,0.666462,1,0.703312,1,1,0.694874,1,1,1,1,0.627475,1,0.466592,1,0.931215,0.500904,1,0.689571,0.8059] + # r = 1
                                                      []
                                                      ))}
r_fasttree_bl_bootlier_log = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.000579443,0.000468135,0.000524007,0.000778373,0.00086377,0.000924685,0.000577939,0.000470969,0.000595789,0.000634817,0.000499853,0.000721455,0.000556947,0.000527034,0.000467004,0.00063195,0.000491676,0.00048544,0.000531504,0.000567296] +# r = 0.0001
                                                      [0.00117553,0.0013109,0.0010006,0.000986167,0.000972245,0.0013659,0.00150924,0.000815785,0.00135059,0.00139687,0.000902207,0.00107433,0.000835443,0.000908148,0.0014028,0.0011544,0.00143852,0.000689055,0.000992403,0.00156526] + # r = 0.001
                                                      [0.00886929,0.00960094,0.00993662,0.00944752,0.0102536,0.0118833,0.00595553,0.0120525,0.0147908,0.00832097,0.0073311,0.00849477,0.00918819,0.00560626,0.00915525,0.0082181,0.00766799,0.010339,0.0103675,0.00921321] + # r = 0.01
                                                      [0.120093,0.144806,0.116162,0.120649,0.102868,0.0922744,0.0875431,0.103696,0.117972,0.12424,0.112772,0.113383,0.0836447,0.125204,0.0963314,0.100426,0.0749968,0.107154,0.108284,0.151401] + # r = 0.1
                                                      [1,0.487299,1,0.488308,1,1,0.479504,1,1,0.62621,1,0.540101,1,0.37807,0.627363,0.593535,0.382606,0.618475,0.4782,0.56948] + # r = 1
                                                      []
                                                      ))}
r_raxml_bl_bootlier_log = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.000886974,0.000736106,0.000556551,0.000828384,0.000782145,0.00117876,0.000723192,0.000803425,0.000677344,0.000875372,0.00077823,0.000554602,0.000730754,0.000685161,0.000637304,0.000844428,0.000590177,0.000585475,0.000719934,0.000849251] +# r = 0.0001
                                                      [0.00220944,0.0019268,0.0011779,0.00176877,0.00142376,0.00222043,0.00255419,0.00125737,0.00201702,0.00184448,0.00171518,0.00185338,0.00127037,0.00154717,0.00242733,0.00189465,0.00243625,0.00118439,0.0015713,0.00199364] + # r = 0.001
                                                      [0.0117528,0.0129104,0.0146195,0.0124127,0.0119733,0.0159625,0.00919471,0.0161587,0.0195983,0.0111165,0.00974389,0.0121575,0.0132816,0.00919249,0.0147484,0.0116352,0.01081,0.0133828,0.0146836,0.0122667] + # r = 0.01
                                                      [0.152831,0.174766,0.147696,0.146567,0.129177,0.108771,0.106387,0.124659,0.131284,0.144847,0.130386,0.142123,0.107062,0.142998,0.120799,0.119364,0.093746,0.123873,0.128525,0.199004] + # r = 0.1
                                                      [1,0.670879,1,0.708509,1,1,0.699875,1,1,1,1,0.631236,1,0.468649,1,0.970257,0.503235,1,0.694455,0.814888] + # r = 1
                                                      []
                                                      ))}

''' # VALUES FROM ORIGINAL RAXML TREES
r_raxml    = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([323,334,327,320,323,323,325,325,332,314,330,334,317,320,335,334,320,332,316,326] + # r = 0.0001
                                  [261,257,262,261,249,258,265,269,272,241,273,274,264,258,243,274,237,264,271,266] + # r = 0.001
                                  [193,190,199,193,197,196,209,190,190,199,205,218,192,199,185,197,203,203,198,189] + # r = 0.01
                                  [240,256,244,250,253,239,242,238,242,240,241,237,250,236,244,244,235,237,254,256] + # r = 0.1
                                  [329,319,327,332,348,325,343,320,338,322,317,329,323,326,329,322,335,329,312,328]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
'''

# modifying r = lambdaA/lambdaB (with constant lambda = lambdaA + lambdaB)
r2_original = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([12,8,9,9,10,11,11,11,10,10,9,11,11,11,9,9,7,14,11,9] +                             # r = 0.0001
                                  [36,36,36,30,26,25,34,32,31,30,26,30,32,33,33,25,35,29,36,32] +                     # r = 0.001
                                  [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] +                    # r = 0.01
                                  [220,232,233,225,232,221,221,223,224,230,234,218,230,218,227,227,227,231,223,219] + # r = 0.1
                                  [336,319,341,338,325,323,328,324,327,338,336,330,319,336,333,338,332,334,347,331]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
r2_fasttree = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([292,295,285,275,309,289,306,297,298,285,296,298,290,286,291,296,296,282,277,278] + # r = 0.0001
                                  [238,248,238,257,245,232,264,239,252,252,243,223,241,232,225,243,235,244,231,228] + # r = 0.001
                                  [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # r = 0.01
                                  [253,261,268,268,242,247,230,249,243,256,251,245,260,256,265,254,252,257,261,244] + # r = 0.1
                                  [313,303,308,314,303,307,307,290,300,313,295,303,304,306,303,310,288,300,324,310]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
r2_fasttree_fix90 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                     'cherries':np.log10(r_vs_cherries(np.array([0.017,0.013,0.023,0.023,0.028,0.024,0.03,0.025,0.02,0.022,0.027,0.023,0.023,0.023,0.021,0.023,0.016,0.025,0.023,0.021] +  # r = 0.0001
                                         [0.045,0.043,0.05,0.041,0.038,0.039,0.043,0.044,0.042,0.041,0.033,0.042,0.044,0.042,0.044,0.035,0.043,0.036,0.048,0.04] +  # r = 0.001
                                         [0.089,0.097,0.098,0.091,0.088,0.092,0.088,0.085,0.101,0.1,0.09,0.089,0.093,0.096,0.099,0.086,0.089,0.092,0.097,0.096] +   # r = 0.01
                                         [0.185,0.18,0.186,0.189,0.174,0.172,0.185,0.175,0.189,0.188,0.183,0.185,0.189,0.178,0.175,0.181,0.177,0.185,0.177,0.179] + # r = 0.1
                                         [0.228,0.222,0.225,0.225,0.227,0.215,0.23,0.237,0.221,0.225,0.219,0.218,0.231,0.228,0.227,0.23,0.212,0.227,0.239,0.223]    # r = 1
                    ).astype(float)))}
r2_fasttree_fix95 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                     'cherries':np.log10(r_vs_cherries(np.array([0.011,0.008,0.013,0.011,0.013,0.014,0.015,0.012,0.011,0.01,0.015,0.014,0.014,0.013,0.01,0.011,0.01,0.017,0.014,0.011] +   # r = 0.0001
                                         [0.036,0.034,0.034,0.031,0.025,0.024,0.032,0.033,0.034,0.032,0.029,0.031,0.032,0.031,0.036,0.024,0.033,0.03,0.036,0.033] + # r = 0.001
                                         [0.074,0.077,0.084,0.078,0.078,0.082,0.077,0.075,0.08,0.085,0.076,0.078,0.081,0.084,0.089,0.075,0.073,0.081,0.084,0.083] + # r = 0.01
                                         [0.149,0.148,0.161,0.144,0.144,0.142,0.155,0.144,0.156,0.158,0.143,0.154,0.159,0.147,0.132,0.155,0.143,0.15,0.141,0.141] + # r = 0.1
                                         [0.18,0.193,0.172,0.186,0.174,0.182,0.185,0.193,0.176,0.188,0.176,0.184,0.187,0.187,0.181,0.178,0.181,0.186,0.195,0.178]   # r = 1
                    ).astype(float)))}
r2_raxml   = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([288,278,262,280,286,269,288,278,276,280,289,275,276,271,285,275,289,269,265,269] + # r = 0.0001
                                  [234,244,233,244,242,235,238,237,236,244,233,217,251,236,239,243,230,236,224,220] + # r = 0.001
                                  [199,215,210,215,211,228,215,192,209,208,219,225,197,206,211,212,209,209,217,200] + # r = 0.01
                                  [258,266,273,274,259,258,254,260,256,272,259,258,273,260,262,264,263,271,265,264] + # r = 0.1
                                  [331,321,323,327,323,319,324,316,319,335,320,324,322,325,327,331,316,331,338,326]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
r2_raxml_fix80 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                  'cherries':np.log10(r_vs_cherries(np.array([0.075,0.086,0.077,0.082,0.097,0.072,0.074,0.067,0.085,0.082,0.086,0.066,0.059,0.059,0.085,0.077,0.078,0.061,0.066,0.061] + # r = 0.0001
                                      [0.055,0.061,0.064,0.058,0.054,0.063,0.068,0.057,0.059,0.054,0.055,0.054,0.053,0.066,0.061,0.055,0.054,0.053,0.058,0.049] + # r = 0.001
                                      [0.084,0.093,0.102,0.093,0.092,0.091,0.102,0.096,0.094,0.096,0.093,0.1,0.089,0.092,0.103,0.095,0.092,0.099,0.104,0.097] +   # r = 0.01
                                      [0.194,0.196,0.197,0.191,0.199,0.188,0.199,0.198,0.192,0.209,0.199,0.193,0.206,0.193,0.197,0.196,0.194,0.194,0.191,0.202] + # r = 0.1
                                      [0.256,0.243,0.25,0.245,0.241,0.24,0.245,0.25,0.244,0.25,0.237,0.242,0.239,0.247,0.248,0.249,0.239,0.255,0.26,0.239]        # r = 1
                 ).astype(float)))}
r2_raxml_fix90 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                  'cherries':np.log10(r_vs_cherries(np.array([0.016,0.018,0.018,0.017,0.02,0.018,0.02,0.013,0.011,0.026,0.018,0.014,0.015,0.014,0.019,0.021,0.018,0.018,0.013,0.015] +   # r = 0.0001
                                      [0.037,0.033,0.033,0.03,0.027,0.028,0.032,0.032,0.032,0.031,0.028,0.03,0.03,0.033,0.033,0.024,0.034,0.026,0.037,0.032] +    # r = 0.001
                                      [0.077,0.087,0.085,0.078,0.077,0.08,0.083,0.08,0.084,0.089,0.08,0.079,0.082,0.08,0.09,0.078,0.081,0.085,0.089,0.082] +      # r = 0.01
                                      [0.168,0.16,0.166,0.164,0.157,0.156,0.165,0.161,0.162,0.172,0.164,0.17,0.173,0.159,0.16,0.163,0.163,0.171,0.164,0.167] +    # r = 0.1
                                      [0.184,0.184,0.194,0.181,0.186,0.185,0.177,0.19,0.188,0.192,0.186,0.186,0.181,0.192,0.188,0.19,0.174,0.187,0.194,0.189]     # r = 1
                 ).astype(float)))}
r2_raxml_fix95 = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                  'cherries':np.log10(r_vs_cherries(np.array([0.011,0.007,0.008,0.009,0.012,0.011,0.009,0.01,0.01,0.008,0.007,0.011,0.011,0.012,0.009,0.012,0.009,0.013,0.01,0.009] +    # r = 0.0001
                                      [0.033,0.033,0.029,0.028,0.022,0.02,0.029,0.031,0.029,0.028,0.025,0.028,0.027,0.028,0.03,0.022,0.03,0.026,0.033,0.03] +     # r = 0.001
                                      [0.071,0.072,0.075,0.07,0.068,0.075,0.07,0.068,0.069,0.081,0.071,0.074,0.072,0.068,0.079,0.065,0.07,0.075,0.078,0.077] +    # r = 0.01
                                      [0.123,0.121,0.137,0.128,0.116,0.125,0.122,0.115,0.126,0.131,0.121,0.132,0.133,0.121,0.119,0.135,0.114,0.126,0.124,0.126] + # r = 0.1
                                      [0.112,0.128,0.125,0.127,0.12,0.131,0.12,0.115,0.12,0.131,0.122,0.123,0.125,0.124,0.133,0.122,0.128,0.127,0.127,0.125]      # r = 1
                 ).astype(float)))}
r2_fasttree_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.00243969,0.00220311,0.00309257,0.00217179,0.00300056,0.00326384,0.00214554,0.00211122,0.00284401,0.00397541,0.00280597,0.00238146,0.00190641,0.00162167,0.00293471,0.005795,0.00229674,0.00189202,0.00181873,0.00193158] +# r = 0.0001
                                                      [0.002481,0.00286043,0.00197105,0.00219666,0.00194924,0.00157953,0.00288942,0.00260789,0.00211669,0.00185037,0.00195815,0.00214998,0.0027016,0.00308162,0.00242884,0.00194003,0.00299548,0.00231593,0.00245448,0.00280262] + # r = 0.001
                                                      [0.0122579,0.0140104,0.0147327,0.0129625,0.0127697,0.0166014,0.00966062,0.0170136,0.0205515,0.0116561,0.0104276,0.0129337,0.0144581,0.00953683,0.0153007,0.01193,0.0111577,0.0136173,0.0151836,0.0130099] + # r = 0.01
                                                      [0.1119,0.154428,0.145553,0.155258,0.131635,0.151121,0.149798,0.125633,0.170716,0.188352,0.125712,0.180573,0.199526,0.159263,0.116347,0.158983,0.162494,0.162863,0.135715,0.131589] + # r = 0.1
                                                      [1,1,1,1,0.860621,1,0.845822,1,1,1,0.633468,1,1,0.73893,1,1,1,1,1,1] + # r = 1
                                                      []
                                                      ))}
r2_raxml_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.00185575,0.00132657,0.00293458,0.00160861,0.00203998,0.00204604,0.00139835,0.00127956,0.00175538,0.00269108,0.00204559,0.00150601,0.00139718,0.00107835,0.00201859,0.0042152,0.00151108,0.00131407,0.000968635,0.00113553] +# r = 0.0001
                                                      [0.00221302,0.00227727,0.00172784,0.00179337,0.00150544,0.0013075,0.0024372,0.00210367,0.00166852,0.00149409,0.0015295,0.00188723,0.00234201,0.00259157,0.00214788,0.00150588,0.00224847,0.00167816,0.00192867,0.00208798] + # r = 0.001
                                                      [0.0116796,0.0128327,0.0145352,0.0123368,0.0118993,0.0158731,0.00913205,0.0160686,0.0194957,0.0110458,0.00967891,0.0120827,0.0132024,0.00912984,0.0146636,0.0115625,0.0107406,0.0133031,0.014599,0.0121914] + # r = 0.01
                                                      [0.107718,0.146927,0.142885,0.149697,0.123453,0.146388,0.138057,0.120092,0.163352,0.181324,0.117281,0.168861,0.188292,0.152836,0.111786,0.149683,0.154575,0.155888,0.133798,0.122451] + # r = 0.1
                                                      [1,1,1,1,0.668276,0.740817,0.68201,1,0.765413,1,0.53226,1,1,0.626744,0.778987,1,0.860018,0.835358,1,0.837288] + # r = 1
                                                      []
                                                      ))}
r2_fasttree_bl_bootlier_log = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.00218993,0.00199291,0.00259181,0.00198901,0.00278022,0.00284022,0.00196378,0.00188099,0.0025123,0.00357082,0.00265382,0.00224287,0.00178459,0.00155445,0.00268677,0.00546889,0.00210785,0.00151608,0.00169991,0.00157494] +# r = 0.0001
                                                      [0.00188476,0.00223929,0.00154051,0.00183555,0.00163575,0.00136377,0.00232114,0.00189103,0.00181205,0.00126708,0.00144088,0.00167328,0.00235031,0.00249102,0.0018656,0.00158198,0.00250312,0.00179384,0.00223638,0.00210791] + # r = 0.001
                                                      [0.00886929,0.00960094,0.00993662,0.00944752,0.0102536,0.0118833,0.00595553,0.0120525,0.0147908,0.00832097,0.0073311,0.00849477,0.00918819,0.00560626,0.00915525,0.0082181,0.00766799,0.010339,0.0103675,0.00921321] + # r = 0.01
                                                      [0.056755,0.0853771,0.0833796,0.0838775,0.0720461,0.0849831,0.0701686,0.0743912,0.0836643,0.106955,0.0682313,0.104955,0.104282,0.0926168,0.0710098,0.0861773,0.0849176,0.0915734,0.0817226,0.0691067] + # r = 0.1
                                                      [0.23973,0.288814,0.293236,0.259888,0.236479,0.251767,0.194906,0.230534,0.230054,0.322802,0.175364,0.286477,0.232572,0.192447,0.245868,0.264666,0.22667,0.26044,0.265142,0.250246] + # r = 1
                                                      []
                                                      ))}
r2_raxml_bl_bootlier_log = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'cherries':np.log10(np.array([0.00183144,0.00134693,0.00296638,0.00180268,0.00206584,0.00207195,0.00141931,0.00129953,0.00177916,0.00272134,0.00186924,0.00152785,0.00129497,0.00120622,0.0020443,0.00425443,0.00153296,0.00133433,0.000985783,0.00115423] +# r = 0.0001
                                                      [0.0022401,0.00230479,0.00175141,0.00181743,0.00152727,0.0013277,0.0024658,0.00212998,0.00169164,0.00151583,0.00155153,0.00191199,0.00236997,0.00262119,0.0021745,0.00152771,0.00227579,0.00170135,0.00195373,0.00211419] + # r = 0.001
                                                      [0.0117528,0.0129104,0.0146195,0.0124127,0.0119733,0.0159625,0.00919471,0.0161587,0.0195983,0.0111165,0.00974389,0.0121575,0.0132816,0.00919249,0.0147484,0.0116352,0.01081,0.0133828,0.0146836,0.0122667] + # r = 0.01
                                                      [0.108098,0.147432,0.143376,0.150211,0.123882,0.146891,0.138532,0.12051,0.163911,0.181945,0.11769,0.16944,0.188938,0.153361,0.112178,0.150197,0.155105,0.156422,0.13426,0.122877] + # r = 0.1
                                                      [1,1,1,1,0.672728,0.747039,0.686734,1,0.772491,1,0.534875,1,1,0.630494,0.786623,1,0.873493,0.846379,1,0.848471] + # r = 1
                                                      []
                                                      ))}

''' # VALUES FROM ORIGINAL RAXML TREES
r2_raxml   = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'cherries':np.log10(r_vs_cherries(np.array([272,261,246,264,278,248,263,273,250,258,285,259,273,255,267,260,276,243,247,257] + # r = 0.0001
                                  [223,220,224,239,225,226,225,222,219,238,220,214,236,218,221,223,213,218,215,210] + # r = 0.001
                                  [193,190,199,193,197,196,209,190,190,199,205,218,192,199,185,197,203,203,198,189] + # r = 0.01
                                  [243,253,260,262,249,246,253,244,250,265,252,245,255,254,253,254,247,259,252,250] + # r = 0.1
                                  [329,314,322,323,320,314,319,314,312,329,317,317,313,315,318,321,310,326,332,312]   # r = 1
             ).astype(float)/1000))} # divide by number of leaves to get percentage
'''

# modifying lambda = lambdaA + lambdaB
l_original = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'cherries':np.log10(r_vs_cherries(np.array([88,88,91,98,86,90,98,106,96,83,96,83,87,98,98,95,85,96,101,92] +                   # lambda = 33.86550309051126
                                  [97,85,92,87,84,94,96,97,88,93,80,98,95,91,100,91,87,87,90,98] +                    # lambda = 84.66375772627816
                                  [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] +                    # lambda = 169.32751545255631
                                  [91,89,90,82,94,79,81,89,92,91,90,93,95,92,96,94,91,90,86,94] +                     # lambda = 338.65503090511262
                                  [88,89,89,87,89,87,89,86,85,87,94,84,83,85,84,87,86,84,83,89]                       # lambda = 846.63757726278155
             ).astype(float)/1000))} # divide by number of leaves to get percentage
l_fasttree = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'cherries':np.log10(r_vs_cherries(np.array([215,190,198,191,196,190,204,211,189,184,181,202,189,190,183,199,170,182,189,182] + # lambda = 33.86550309051126
                                  [195,211,200,203,204,205,184,189,182,197,194,198,191,200,190,192,193,200,187,195] + # lambda = 84.66375772627816
                                  [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # lambda = 169.32751545255631
                                  [234,223,227,222,232,231,218,225,227,229,223,209,226,237,240,237,227,220,227,221] + # lambda = 338.65503090511262
                                  [233,229,217,222,225,219,217,227,222,219,246,213,233,246,209,210,232,240,218,231]   # lambda = 846.63757726278155
             ).astype(float)/1000))} # divide by number of leaves to get percentage
l_fasttree_fix90 = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                    'cherries':np.log10(r_vs_cherries(np.array([0.089,0.09,0.093,0.097,0.087,0.092,0.096,0.104,0.095,0.08,0.099,0.083,0.088,0.096,0.099,0.094,0.086,0.096,0.099,0.092] +   # lambda = 33.86550309051126
                                        [0.092,0.083,0.09,0.089,0.086,0.098,0.099,0.101,0.09,0.094,0.081,0.098,0.092,0.093,0.1,0.089,0.086,0.088,0.088,0.098] +     # lambda = 84.66375772627816
                                        [0.089,0.097,0.098,0.091,0.088,0.092,0.088,0.085,0.101,0.1,0.09,0.089,0.093,0.096,0.099,0.086,0.089,0.092,0.097,0.096] +    # lambda = 169.32751545255631
                                        [0.096,0.106,0.099,0.086,0.098,0.095,0.089,0.091,0.102,0.092,0.099,0.094,0.099,0.105,0.101,0.103,0.098,0.094,0.095,0.105] + # lambda = 338.65503090511262
                                        [0.112,0.112,0.117,0.102,0.116,0.107,0.116,0.101,0.112,0.103,0.097,0.105,0.111,0.105,0.099,0.117,0.095,0.105,0.105,0.115]   # lambda = 846.63757726278155
                   ).astype(float)))}
l_fasttree_fix95 = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                    'cherries':np.log10(r_vs_cherries(np.array([0.085,0.085,0.089,0.093,0.086,0.087,0.096,0.101,0.093,0.08,0.096,0.08,0.085,0.092,0.094,0.093,0.083,0.093,0.095,0.088] +   # lambda = 33.86550309051126
                                        [0.085,0.075,0.083,0.081,0.082,0.094,0.091,0.085,0.082,0.087,0.072,0.088,0.086,0.088,0.094,0.081,0.081,0.083,0.083,0.089] + # lambda = 84.66375772627816
                                        [0.074,0.077,0.084,0.078,0.078,0.082,0.077,0.075,0.08,0.085,0.076,0.078,0.081,0.084,0.089,0.075,0.073,0.081,0.084,0.083] +  # lambda = 169.32751545255631
                                        [0.072,0.083,0.074,0.068,0.084,0.078,0.074,0.071,0.088,0.079,0.071,0.078,0.083,0.079,0.081,0.079,0.079,0.075,0.068,0.089] + # lambda = 338.65503090511262
                                        [0.093,0.102,0.102,0.089,0.103,0.093,0.092,0.086,0.089,0.095,0.089,0.086,0.099,0.095,0.086,0.102,0.083,0.089,0.097,0.102]   # lambda = 846.63757726278155
                   ).astype(float)))}
l_raxml    = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'cherries':np.log10(r_vs_cherries(np.array([202,187,195,191,182,183,194,205,183,184,183,196,182,182,178,197,164,178,186,178] + # lambda = 33.86550309051126
                                  [193,206,193,189,197,192,182,193,175,194,193,197,195,199,184,193,189,190,185,187] + # lambda = 84.66375772627816
                                  [199,215,210,215,211,228,215,192,209,208,219,225,197,206,211,212,209,209,217,200] + # lambda = 169.32751545255631
                                  [250,247,263,229,248,258,226,237,236,239,233,238,243,252,246,246,241,227,242,240] + # lambda = 338.65503090511262
                                  [274,274,279,273,289,267,272,267,273,271,279,259,263,280,275,265,273,285,279,295]   # lambda = 846.63757726278155
             ).astype(float)/1000))} # divide by number of leaves to get percentage
l_raxml_fix80 = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                 'cherries':np.log10(r_vs_cherries(np.array([0.105,0.1,0.098,0.106,0.101,0.104,0.111,0.11,0.1,0.098,0.11,0.103,0.096,0.104,0.105,0.106,0.098,0.104,0.102,0.106] +       # lambda = 33.86550309051126
                                     [0.099,0.088,0.098,0.094,0.092,0.1,0.098,0.103,0.09,0.102,0.095,0.102,0.104,0.103,0.109,0.093,0.094,0.094,0.094,0.105] +    # lambda = 84.66375772627816
                                     [0.084,0.093,0.102,0.093,0.092,0.091,0.102,0.096,0.094,0.096,0.093,0.1,0.089,0.092,0.103,0.095,0.092,0.099,0.104,0.097] +   # lambda = 169.32751545255631
                                     [0.095,0.088,0.094,0.087,0.095,0.088,0.079,0.093,0.095,0.086,0.093,0.097,0.096,0.099,0.096,0.091,0.092,0.089,0.086,0.1] +   # lambda = 338.65503090511262
                                     [0.083,0.088,0.081,0.088,0.085,0.082,0.081,0.083,0.084,0.082,0.086,0.08,0.081,0.085,0.079,0.085,0.083,0.08,0.082,0.087]     # lambda = 846.63757726278155
                ).astype(float)))}
l_raxml_fix90 = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                 'cherries':np.log10(r_vs_cherries(np.array([0.085,0.089,0.089,0.095,0.086,0.089,0.096,0.102,0.093,0.081,0.096,0.083,0.085,0.095,0.098,0.093,0.084,0.095,0.097,0.092] + # lambda = 33.86550309051126
                                     [0.09,0.08,0.084,0.086,0.082,0.092,0.092,0.092,0.084,0.09,0.075,0.094,0.087,0.09,0.095,0.087,0.084,0.084,0.084,0.093] +     # lambda = 84.66375772627816
                                     [0.077,0.087,0.085,0.078,0.077,0.08,0.083,0.08,0.084,0.089,0.08,0.079,0.082,0.08,0.09,0.078,0.081,0.085,0.089,0.082] +      # lambda = 169.32751545255631
                                     [0.073,0.068,0.073,0.065,0.074,0.063,0.065,0.074,0.075,0.074,0.063,0.084,0.079,0.077,0.08,0.072,0.079,0.072,0.068,0.079] +  # lambda = 338.65503090511262
                                     [0.056,0.047,0.054,0.051,0.05,0.048,0.049,0.05,0.055,0.049,0.058,0.04,0.046,0.061,0.049,0.06,0.054,0.051,0.046,0.057]       # lambda = 846.63757726278155
                ).astype(float)))}
l_raxml_fix95 = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                 'cherries':np.log10(r_vs_cherries(np.array([0.083,0.083,0.088,0.09,0.085,0.085,0.095,0.102,0.091,0.079,0.095,0.08,0.084,0.092,0.094,0.092,0.082,0.091,0.094,0.087] +   # lambda = 33.86550309051126
                                     [0.082,0.074,0.081,0.079,0.077,0.088,0.088,0.085,0.078,0.087,0.068,0.087,0.084,0.087,0.093,0.08,0.078,0.081,0.081,0.085] +  # lambda = 84.66375772627816
                                     [0.071,0.072,0.075,0.07,0.068,0.075,0.07,0.068,0.069,0.081,0.071,0.074,0.072,0.068,0.079,0.065,0.07,0.075,0.078,0.077] +    # lambda = 169.32751545255631
                                     [0.047,0.056,0.06,0.047,0.061,0.047,0.049,0.05,0.065,0.059,0.05,0.06,0.061,0.054,0.059,0.055,0.065,0.052,0.05,0.066] +      # lambda = 338.65503090511262
                                     [0.03,0.027,0.036,0.028,0.025,0.027,0.024,0.03,0.026,0.031,0.038,0.023,0.026,0.039,0.036,0.042,0.029,0.028,0.03,0.033]      # lambda = 846.63757726278155
                ).astype(float)))}
l_fasttree_bl = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                 'cherries':np.log10(np.array([0.0120516,0.0158,0.0147479,0.0173901,0.0150184,0.0157791,0.0171816,0.0180579,0.0143785,0.0110717,0.0187192,0.013164,0.0145259,0.0152681,0.012073,0.0161176,0.0123912,0.0163398,0.0176516,0.0152609] +   # lambda = 33.86550309051126
                                     [0.0121021,0.00946928,0.0113081,0.0132259,0.0119619,0.0152158,0.0134191,0.0148024,0.0111964,0.0139221,0.00860438,0.0145687,0.0145632,0.0161802,0.0181722,0.0122117,0.0111503,0.0113378,0.011169,0.0150552] +  # lambda = 84.66375772627816
                                     [0.0122579,0.0140104,0.0147327,0.0129625,0.0127697,0.0166014,0.00966062,0.0170136,0.0205515,0.0116561,0.0104276,0.0129337,0.0144581,0.00953683,0.0153007,0.01193,0.0111577,0.0136173,0.0151836,0.0130099] +    # lambda = 169.32751545255631
                                     [0.0121162,0.0110273,0.0140669,0.0106744,0.0136182,0.0106018,0.0169918,0.0126882,0.0163903,0.0148205,0.0191373,0.0112142,0.0179406,0.0131293,0.0180688,0.0154466,0.0164913,0.0163135,0.0113111,0.0203699] +      # lambda = 338.65503090511262
                                     [0.020285,0.0175386,0.0282338,0.016918,0.0199041,0.0219235,0.0209558,0.0141997,0.0186491,0.0214897,0.0207528,0.0159977,0.0178944,0.0207508,0.0226515,0.0195752,0.0182026,0.0227461,0.024289,0.0194464]      # lambda = 846.63757726278155
                ).astype(float))}
l_raxml_bl = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                 'cherries':np.log10(np.array([0.0113864,0.0145343,0.0137272,0.0170479,0.0141306,0.0141814,0.0154513,0.0169736,0.0137584,0.0109028,0.019331,0.0128141,0.0127819,0.0140409,0.0114314,0.0155412,0.011516,0.0155445,0.0165628,0.0145607] +   # lambda = 33.86550309051126
                                     [0.0113919,0.00913125,0.0107799,0.0127229,0.0115249,0.014769,0.0133383,0.0144146,0.0109348,0.0131476,0.00821475,0.0139934,0.0139321,0.0157925,0.0175885,0.0115945,0.0109861,0.010966,0.0108227,0.0148753] +  # lambda = 84.66375772627816
                                     [0.0116796,0.0128327,0.0145352,0.0123368,0.0118993,0.0158731,0.00913205,0.0160686,0.0194957,0.0110458,0.00967891,0.0120827,0.0132024,0.00912984,0.0146636,0.0115625,0.0107406,0.0133031,0.014599,0.0121914] +    # lambda = 169.32751545255631
                                     [0.0107344,0.00954578,0.0125439,0.00921421,0.0115096,0.00933032,0.0148642,0.0111706,0.0153214,0.0138004,0.0165201,0.0101954,0.0163487,0.0111589,0.0167907,0.0141905,0.0149074,0.0134243,0.0102134,0.0186013] +      # lambda = 338.65503090511262
                                     [0.0136574,0.0119322,0.0173741,0.0107716,0.0112042,0.0141499,0.0112881,0.00947459,0.0135185,0.0125378,0.0143822,0.00997774,0.0130447,0.015203,0.0137375,0.0134534,0.0115266,0.0149826,0.0146441,0.0117188]      # lambda = 846.63757726278155
                ).astype(float))}
l_fasttree_bl_bootlier_log = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                 'cherries':np.log10(np.array([0.0113892,0.0171703,0.0139095,0.0165465,0.0139184,0.0161524,0.0157961,0.0163451,0.0128275,0.0101705,0.017638,0.0120052,0.0141082,0.0138204,0.0111206,0.0154926,0.0115695,0.0151763,0.016056,0.0138992] +   # lambda = 33.86550309051126
                                     [0.00967639,0.00810767,0.00931306,0.0106503,0.0100315,0.0128713,0.0114101,0.0121049,0.00901939,0.0108886,0.00760783,0.0130042,0.0123663,0.0134802,0.0148883,0.00990662,0.00924002,0.00967347,0.00945364,0.0128862] +  # lambda = 84.66375772627816
                                     [0.00886929,0.00960094,0.00993662,0.00944752,0.0102536,0.0118833,0.00595553,0.0120525,0.0147908,0.00832097,0.0073311,0.00849477,0.00918819,0.00560626,0.00915525,0.0082181,0.00766799,0.010339,0.0103675,0.00921321] +    # lambda = 169.32751545255631
                                     [0.00622091,0.00396423,0.00753202,0.00444371,0.00571078,0.00440126,0.00798684,0.00532396,0.00851725,0.00776227,0.00867113,0.006334,0.00832874,0.00475451,0.00993497,0.00810237,0.00798916,0.00656629,0.00606445,0.0107929] +      # lambda = 338.65503090511262
                                     [0.00334694,0.00258651,0.0028921,0.00231326,0.00129103,0.00337898,0.00224496,0.00176958,0.00370705,0.00222756,0.00480515,0.00198652,0.00241916,0.00430343,0.00340292,0.00224618,0.0027279,0.00362606,0.00306494,0.00156441]      # lambda = 846.63757726278155
                ).astype(float))}
l_raxml_bl_bootlier_log = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                 'cherries':np.log10(np.array([0.0114584,0.0146186,0.0138085,0.0171416,0.0142134,0.0142644,0.015539,0.017067,0.0138397,0.0109729,0.019433,0.0128918,0.0128594,0.0125178,0.0115036,0.0156293,0.0115885,0.0156327,0.0166547,0.0146451] +   # lambda = 33.86550309051126
                                     [0.011464,0.00919391,0.0108494,0.0128002,0.0115975,0.0148542,0.0134982,0.0144985,0.011005,0.0132266,0.00827341,0.0140757,0.0140142,0.0158816,0.0176842,0.0116674,0.0110565,0.0110363,0.0108925,0.014961] +  # lambda = 84.66375772627816
                                     [0.0117528,0.0129104,0.0146195,0.0124127,0.0119733,0.0159625,0.00919471,0.0161587,0.0195983,0.0111165,0.00974389,0.0121575,0.0132816,0.00919249,0.0147484,0.0116352,0.01081,0.0133828,0.0146836,0.0122667] +    # lambda = 169.32751545255631
                                     [0.0108037,0.0096102,0.0126205,0.00927722,0.0115821,0.00939382,0.0149498,0.0112418,0.0154087,0.013882,0.0166119,0.0102626,0.0164398,0.01123,0.0168835,0.0142735,0.0149932,0.0135044,0.0102806,0.0187006] +      # lambda = 338.65503090511262
                                     [0.0137384,0.0120065,0.017469,0.0108412,0.0112755,0.0142328,0.0113597,0.00953871,0.013599,0.0126144,0.0144659,0.010044,0.0131233,0.0152898,0.0138188,0.0135336,0.0115992,0.0150686,0.0147288,0.0117922]      # lambda = 846.63757726278155
                ).astype(float))}

''' # VALUES FROM ORIGINAL RAXML TREES
l_raxml    = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'cherries':np.log10(r_vs_cherries(np.array([200,186,190,185,183,183,194,208,190,184,180,185,182,184,177,194,170,182,181,180] + # lambda = 33.86550309051126
                                  [195,204,191,184,190,192,184,186,174,185,188,194,195,195,186,189,188,198,172,194] + # lambda = 84.66375772627816
                                  [193,190,199,193,197,196,209,190,190,199,205,218,192,199,185,197,203,203,198,189] + # lambda = 169.32751545255631
                                  [241,235,236,216,223,237,199,226,216,211,208,226,224,236,223,239,225,209,221,221] + # lambda = 338.65503090511262
                                  [270,266,263,262,286,257,267,255,263,264,266,255,256,272,260,259,256,271,263,281]   # lambda = 846.63757726278155
             ).astype(float)/1000))} # divide by number of leaves to get percentage
'''

# modifying sequence length
k_original = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'cherries':np.log10(r_vs_cherries(np.array([89,94,93,93,96,90,99,96,89,88,87,79,96,96,95,88,81,93,85,91] +                     # length = 50
                                  [93,91,92,91,90,88,100,87,89,89,85,98,87,86,86,88,88,94,91,88] +                    # length = 100
                                  [86,87,84,91,92,87,95,93,82,90,95,91,91,89,84,82,96,85,93,95] +                     # length = 200
                                  [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] +                    # length = 300
                                  [88,86,88,80,94,91,96,95,91,92,80,91,90,102,84,88,97,90,89,86] +                    # length = 600
                                  [79,94,88,92,88,95,100,94,86,87,84,89,100,90,97,90,87,94,83,91] +                   # length = 1200
                                  [84,93,92,95,91,88,92,93,86,85,95,90,82,84,94,99,86,77,95,95] +                     # length = 2400
                                  [78,92,95,87,94,84,94,88,84,97,86,83,97,87,98,97,85,80,91,80]                       # length = 4800
             ).astype(float)/1000))} # divide by number of leaves to get percentage
k_fasttree = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'cherries':np.log10(r_vs_cherries(np.array([229,240,216,231,204,229,212,212,217,223,219,213,211,207,227,209,222,214,236,238] + # length = 50
                                  [225,238,240,243,233,225,232,244,249,229,252,239,241,222,262,233,227,236,234,248] + # length = 100
                                  [209,221,226,221,221,243,236,238,222,230,228,215,221,233,221,235,242,229,238,223] + # length = 200
                                  [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # length = 300
                                  [173,176,178,179,191,182,176,169,185,178,190,182,182,182,175,176,176,175,185,181] + # length = 600
                                  [130,141,154,163,145,159,164,150,159,156,144,152,161,148,153,149,143,161,141,144] + # length = 1200
                                  [131,134,133,137,125,123,134,125,131,123,128,133,113,121,128,134,128,122,131,118] + # length = 2400
                                  [106,121,113,109,111,113,120,116,115,121,116,104,124,103,131,115,105,104,119,111]   # length = 4800
             ).astype(float)/1000))} # divide by number of leaves to get percentage
k_fasttree_fix90 = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                    'cherries':np.log10(r_vs_cherries(np.array([0.144,0.126,0.129,0.122,0.127,0.123,0.13,0.118,0.127,0.124,0.135,0.127,0.115,0.11,0.131,0.115,0.102,0.125,0.126,0.13] +    # length = 50
                                        [0.108,0.111,0.096,0.102,0.098,0.098,0.115,0.101,0.095,0.113,0.117,0.105,0.116,0.095,0.11,0.106,0.106,0.112,0.109,0.099] +  # length = 100
                                        [0.09,0.092,0.085,0.091,0.093,0.096,0.097,0.092,0.087,0.093,0.1,0.089,0.092,0.093,0.093,0.084,0.105,0.09,0.093,0.095] +     # length = 200
                                        [0.089,0.097,0.098,0.091,0.088,0.092,0.088,0.085,0.101,0.1,0.09,0.089,0.093,0.096,0.099,0.086,0.089,0.092,0.097,0.096] +    # length = 300
                                        [0.092,0.087,0.094,0.087,0.093,0.089,0.101,0.093,0.088,0.097,0.084,0.097,0.092,0.105,0.095,0.089,0.098,0.092,0.093,0.083] + # length = 600
                                        [0.081,0.094,0.087,0.095,0.087,0.099,0.107,0.096,0.091,0.091,0.087,0.089,0.1,0.095,0.097,0.091,0.088,0.095,0.091,0.092] +   # length = 1200
                                        [0.086,0.098,0.092,0.097,0.091,0.09,0.095,0.094,0.087,0.087,0.097,0.091,0.083,0.087,0.093,0.103,0.089,0.08,0.098,0.096] +   # length = 2400
                                        [0.079,0.095,0.095,0.089,0.094,0.085,0.094,0.088,0.086,0.098,0.086,0.083,0.097,0.085,0.099,0.097,0.087,0.08,0.091,0.081]    # length = 4800
                   ).astype(float)))}
k_fasttree_fix95 = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                    'cherries':np.log10(r_vs_cherries(np.array([0.102,0.095,0.111,0.099,0.1,0.101,0.108,0.103,0.091,0.096,0.097,0.098,0.099,0.1,0.096,0.094,0.091,0.101,0.098,0.106] +     # length = 50
                                        [0.087,0.083,0.074,0.082,0.075,0.081,0.083,0.08,0.081,0.089,0.083,0.089,0.089,0.071,0.087,0.078,0.089,0.092,0.093,0.08] +   # length = 100
                                        [0.071,0.07,0.079,0.075,0.078,0.071,0.079,0.074,0.07,0.079,0.078,0.073,0.073,0.074,0.073,0.072,0.087,0.07,0.075,0.075] +    # length = 200
                                        [0.074,0.077,0.084,0.078,0.078,0.082,0.077,0.075,0.08,0.085,0.076,0.078,0.081,0.084,0.089,0.075,0.073,0.081,0.084,0.083] +  # length = 300
                                        [0.087,0.082,0.086,0.077,0.085,0.084,0.089,0.09,0.083,0.091,0.079,0.089,0.088,0.098,0.082,0.084,0.093,0.088,0.085,0.078] +  # length = 600
                                        [0.077,0.092,0.084,0.09,0.085,0.096,0.102,0.095,0.084,0.088,0.083,0.088,0.099,0.092,0.095,0.088,0.088,0.09,0.083,0.09] +    # length = 1200
                                        [0.085,0.095,0.092,0.096,0.09,0.085,0.093,0.093,0.087,0.085,0.096,0.09,0.082,0.083,0.092,0.101,0.087,0.079,0.096,0.095] +   # length = 2400
                                        [0.078,0.092,0.094,0.087,0.093,0.085,0.094,0.088,0.084,0.098,0.085,0.083,0.096,0.085,0.099,0.097,0.086,0.08,0.091,0.08]     # length = 4800
                   ).astype(float)))}
k_raxml    = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'cherries':np.log10(r_vs_cherries(np.array([285,293,273,278,267,270,262,280,277,286,275,276,270,277,278,279,276,272,268,277] + # length = 50
                                  [257,250,262,256,252,260,264,255,264,257,265,263,254,250,273,251,252,257,263,256] + # length = 100
                                  [223,225,230,231,229,239,239,238,219,229,240,219,234,242,224,233,240,238,245,229] + # length = 200
                                  [199,215,210,215,211,228,215,192,209,208,219,225,197,206,211,212,209,209,217,200] + # length = 300
                                  [176,175,173,175,189,187,170,170,184,181,178,184,170,182,176,175,174,179,181,177] + # length = 600
                                  [128,140,147,159,146,158,165,146,152,156,138,149,155,146,152,151,140,156,138,145] + # length = 1200
                                  [129,130,130,135,126,121,135,127,129,122,128,130,116,120,127,131,124,118,130,118] + # length = 2400
                                  [104,117,109,109,112,110,119,114,113,122,113,101,122,104,126,115,103,103,121,109]   # length = 4800
             ).astype(float)/1000))} # divide by number of leaves to get percentage
k_raxml_fix80 = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                 'cherries':np.log10(r_vs_cherries(np.array([0.12,0.108,0.115,0.109,0.107,0.119,0.129,0.112,0.115,0.113,0.101,0.098,0.117,0.106,0.111,0.106,0.102,0.109,0.109,0.118] +  # length = 50
                                     [0.102,0.101,0.096,0.106,0.095,0.087,0.1,0.097,0.091,0.095,0.096,0.107,0.101,0.097,0.09,0.095,0.099,0.102,0.104,0.089] +    # length = 100
                                     [0.092,0.09,0.087,0.096,0.1,0.094,0.105,0.096,0.089,0.096,0.106,0.103,0.094,0.095,0.086,0.084,0.102,0.09,0.094,0.101] +     # length = 200
                                     [0.084,0.093,0.102,0.093,0.092,0.091,0.102,0.096,0.094,0.096,0.093,0.1,0.089,0.092,0.103,0.095,0.092,0.099,0.104,0.097] +   # length = 300
                                     [0.093,0.088,0.093,0.082,0.092,0.098,0.099,0.098,0.095,0.095,0.084,0.095,0.093,0.105,0.086,0.092,0.101,0.094,0.092,0.088] + # length = 600
                                     [0.078,0.093,0.09,0.093,0.089,0.098,0.103,0.097,0.087,0.088,0.085,0.095,0.105,0.093,0.096,0.094,0.09,0.096,0.085,0.093] +   # length = 1200
                                     [0.086,0.096,0.095,0.097,0.095,0.088,0.095,0.095,0.087,0.086,0.095,0.091,0.083,0.084,0.093,0.099,0.087,0.081,0.094,0.098] + # length = 2400
                                     [0.08,0.091,0.093,0.087,0.094,0.086,0.095,0.091,0.086,0.097,0.089,0.084,0.1,0.086,0.099,0.096,0.086,0.079,0.095,0.081]      # length = 4800
                ).astype(float)))}
k_raxml_fix90 = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                 'cherries':np.log10(r_vs_cherries(np.array([0.052,0.05,0.048,0.05,0.05,0.051,0.066,0.043,0.047,0.044,0.045,0.048,0.052,0.047,0.047,0.043,0.042,0.053,0.037,0.046] +    # length = 50
                                     [0.062,0.067,0.05,0.058,0.061,0.06,0.055,0.065,0.059,0.055,0.061,0.062,0.062,0.059,0.057,0.069,0.066,0.067,0.064,0.059] +   # length = 100
                                     [0.073,0.075,0.071,0.081,0.076,0.076,0.086,0.078,0.075,0.078,0.084,0.08,0.077,0.076,0.076,0.069,0.086,0.07,0.077,0.077] +   # length = 200
                                     [0.077,0.087,0.085,0.078,0.077,0.08,0.083,0.08,0.084,0.089,0.08,0.079,0.082,0.08,0.09,0.078,0.081,0.085,0.089,0.082] +      # length = 300
                                     [0.086,0.079,0.086,0.079,0.088,0.088,0.095,0.09,0.084,0.089,0.079,0.086,0.088,0.1,0.082,0.084,0.096,0.087,0.085,0.082] +    # length = 600
                                     [0.077,0.092,0.084,0.091,0.087,0.095,0.099,0.093,0.085,0.085,0.083,0.087,0.098,0.089,0.093,0.088,0.085,0.091,0.082,0.088] + # length = 1200
                                     [0.082,0.092,0.091,0.094,0.089,0.086,0.091,0.092,0.085,0.084,0.094,0.089,0.081,0.083,0.092,0.098,0.086,0.076,0.094,0.094] + # length = 2400
                                     [0.077,0.091,0.093,0.086,0.092,0.083,0.094,0.087,0.083,0.096,0.084,0.082,0.095,0.084,0.098,0.096,0.084,0.079,0.09,0.08]     # length = 4800
                ).astype(float)))}
k_raxml_fix95 = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                 'cherries':np.log10(r_vs_cherries(np.array([0.012,0.018,0.019,0.016,0.018,0.022,0.022,0.016,0.015,0.018,0.022,0.02,0.018,0.022,0.022,0.018,0.013,0.021,0.015,0.019] +  # length = 50
                                     [0.039,0.046,0.033,0.035,0.04,0.035,0.036,0.039,0.036,0.035,0.042,0.034,0.042,0.035,0.037,0.044,0.043,0.04,0.039,0.036] +   # length = 100
                                     [0.053,0.058,0.063,0.067,0.061,0.061,0.06,0.058,0.055,0.063,0.06,0.069,0.057,0.058,0.056,0.059,0.072,0.054,0.058,0.058] +   # length = 200
                                     [0.071,0.072,0.075,0.07,0.068,0.075,0.07,0.068,0.069,0.081,0.071,0.074,0.072,0.068,0.079,0.065,0.07,0.075,0.078,0.077] +    # length = 300
                                     [0.083,0.075,0.083,0.074,0.083,0.083,0.086,0.088,0.081,0.087,0.077,0.083,0.087,0.097,0.081,0.082,0.092,0.087,0.083,0.075] + # length = 600
                                     [0.075,0.091,0.083,0.089,0.084,0.094,0.099,0.093,0.083,0.084,0.083,0.087,0.097,0.088,0.092,0.087,0.085,0.09,0.081,0.088] +  # length = 1200
                                     [0.082,0.091,0.091,0.094,0.089,0.084,0.091,0.091,0.085,0.084,0.093,0.089,0.081,0.083,0.092,0.097,0.086,0.076,0.093,0.094] + # length = 2400
                                     [0.077,0.091,0.093,0.086,0.092,0.083,0.093,0.087,0.083,0.096,0.084,0.082,0.095,0.084,0.098,0.096,0.084,0.079,0.09,0.079]    # length = 4800
                ).astype(float)))}
k_fasttree_bl = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                 'cherries':np.log10(np.array([0.0427802,0.0474117,0.0485844,0.0512438,0.0646607,0.0438524,0.0633359,0.0691174,0.0444996,0.0545086,0.0595854,0.0491783,0.0489498,0.05356,0.0415044,0.0538873,0.0429739,0.0514629,0.0392867,0.0502799] +  # length = 50
                                     [0.0228812,0.0241614,0.0163993,0.0194282,0.0229367,0.0244554,0.0196727,0.0216283,0.0205361,0.0246706,0.0171701,0.0248134,0.0213294,0.0230472,0.0159703,0.0226871,0.0214596,0.023457,0.020837,0.0214121] +   # length = 100
                                     [0.0111198,0.0145299,0.0156629,0.0161564,0.0159989,0.0112388,0.0133591,0.0161641,0.0136955,0.0195486,0.0149736,0.014879,0.0188827,0.0145646,0.012685,0.0128649,0.0193457,0.0115333,0.0131622,0.0164278] +   # length = 200
                                     [0.0122579,0.0140104,0.0147327,0.0129625,0.0127697,0.0166014,0.00966062,0.0170136,0.0205515,0.0116561,0.0104276,0.0129337,0.0144581,0.00953683,0.0153007,0.01193,0.0111577,0.0136173,0.0151836,0.0130099] +    # length = 300
                                     [0.00855219,0.00877734,0.00972551,0.00854478,0.0147576,0.0106901,0.0152375,0.0166326,0.0103016,0.0143491,0.0100936,0.0096417,0.013475,0.0170208,0.00999145,0.0111491,0.0164445,0.0119714,0.00961763,0.00915284] + # length = 600
                                     [0.00956276,0.00989205,0.012106,0.012994,0.00956605,0.0127947,0.0122727,0.0117936,0.0123229,0.0102325,0.00982698,0.00939633,0.0149589,0.0105688,0.0164763,0.0109572,0.010515,0.0136184,0.0100604,0.0137671] +  # length = 1200
                                     [0.00833246,0.0129986,0.0114098,0.014171,0.00918868,0.0100476,0.0112997,0.0121075,0.0103605,0.00929667,0.0105171,0.0108852,0.00850883,0.00826422,0.0114894,0.00961713,0.00943021,0.00642079,0.0116746,0.0121126] + # length = 2400
                                     [0.00760534,0.0113546,0.0147971,0.00792801,0.0132407,0.00977195,0.0136729,0.0104973,0.00857026,0.0111994,0.00798105,0.0110093,0.0123088,0.00877922,0.013396,0.0125421,0.00860825,0.00753932,0.011505,0.00903028]    # length = 4800
                ).astype(float))}
k_raxml_bl = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                 'cherries':np.log10(np.array([0.0238124,0.0263987,0.0290364,0.028915,0.0330315,0.0256918,0.0335829,0.0354851,0.0272294,0.0299068,0.0316723,0.024782,0.0261417,0.0283754,0.0225955,0.0304431,0.0217002,0.0311585,0.0233729,0.0275233] +  # length = 50
                                     [0.0185514,0.0193585,0.0117487,0.0156878,0.0170298,0.0182602,0.0151984,0.0168458,0.0141487,0.0181164,0.0146396,0.0183307,0.0170749,0.0180811,0.0110642,0.0184674,0.0167497,0.0178668,0.0156366,0.0168387] +   # length = 100
                                     [0.0100744,0.0133927,0.0141384,0.0147626,0.0143518,0.0105631,0.0117754,0.0145847,0.0124883,0.0175475,0.0138732,0.0132588,0.0176813,0.0129866,0.0114365,0.0116927,0.0181756,0.0102249,0.0116411,0.014984] +   # length = 200
                                     [0.0116796,0.0128327,0.0145352,0.0123368,0.0118993,0.0158731,0.00913205,0.0160686,0.0194957,0.0110458,0.00967891,0.0120827,0.0132024,0.00912984,0.0146636,0.0115625,0.0107406,0.0133031,0.014599,0.0121914] +    # length = 300
                                     [0.00853671,0.00865184,0.0094752,0.00841453,0.0144865,0.0105462,0.0147194,0.0166405,0.0101532,0.0142705,0.00989013,0.00948399,0.013364,0.0168005,0.009981,0.0110714,0.0162591,0.0115048,0.00966015,0.0089585] + # length = 600
                                     [0.0094413,0.00991061,0.0121278,0.0129669,0.00943164,0.0127004,0.0122888,0.0118003,0.0122739,0.0102148,0.00983116,0.00938313,0.0148654,0.0105713,0.0162827,0.0108938,0.0104154,0.0135422,0.010089,0.0137002] +  # length = 1200
                                     [0.00832997,0.0130088,0.0114084,0.0141906,0.00921681,0.0101034,0.0113182,0.0121352,0.0103804,0.0093393,0.0105383,0.0109388,0.00854012,0.00830718,0.0115082,0.00966318,0.0094308,0.00642568,0.0116843,0.0121424] + # length = 2400
                                     [0.00762159,0.0113809,0.0147904,0.00794803,0.0132574,0.00978842,0.0137171,0.0105242,0.00857839,0.011209,0.00799564,0.0110234,0.0123555,0.00880314,0.0134024,0.0125546,0.00863298,0.00755903,0.0115519,0.00903266]    # length = 4800
                ).astype(float))}
k_fasttree_bl_bootlier_log = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                 'cherries':np.log10(np.array([0.0062467,0.00992926,0.00630955,0.00928293,0.00876914,0.00821251,0.0108388,0.0120069,0.0091917,0.0103711,0.0113067,0.00662893,0.0082361,0.00843564,0.00825878,0.0107271,0.00759204,0.00879402,0.00809724,0.00743035] +  # length = 50
                                     [0.00827448,0.00909369,0.00497574,0.0073606,0.00900009,0.00770844,0.00654468,0.00923595,0.0069116,0.00648086,0.00645346,0.00686919,0.00667323,0.00850319,0.00422476,0.00847188,0.00591594,0.00829157,0.00584389,0.00844273] +   # length = 100
                                     [0.00577522,0.00908418,0.00906882,0.0100781,0.00754894,0.0076138,0.00816223,0.00949171,0.00713747,0.0106217,0.00759772,0.00852372,0.0112853,0.00721236,0.00659243,0.0070653,0.0116028,0.0062736,0.00745246,0.0089019] +   # length = 200
                                     [0.00886929,0.00960094,0.00993662,0.00944752,0.0102536,0.0118833,0.00595553,0.0120525,0.0147908,0.00832097,0.0073311,0.00849477,0.00918819,0.00560626,0.00915525,0.0082181,0.00766799,0.010339,0.0103675,0.00921321] +    # length = 300
                                     [0.00721978,0.00697536,0.00750691,0.0075526,0.0129379,0.00820345,0.0127316,0.0148362,0.00918372,0.0128808,0.00892631,0.00826422,0.0116853,0.0137962,0.00864348,0.00950289,0.0134626,0.00970082,0.00794113,0.00805642] + # length = 600
                                     [0.00886733,0.00918066,0.0104426,0.0126057,0.00887046,0.0114333,0.0117501,0.0111404,0.0120973,0.00950561,0.00911857,0.00846273,0.0132857,0.00936843,0.0144349,0.0101302,0.00990823,0.0121222,0.00947051,0.0125716] +  # length = 1200
                                     [0.00780914,0.0129206,0.0104909,0.0140886,0.00931225,0.00958793,0.0105275,0.0118844,0.00962954,0.0103845,0.00964583,0.0105387,0.00844929,0.00774399,0.0121473,0.0084237,0.00837362,0.00828159,0.010604,0.0113042] + # length = 2400
                                     [0.00700467,0.0105781,0.014207,0.00787096,0.0151179,0.00906834,0.0129559,0.00989305,0.00895885,0.0102945,0.00769668,0.0103858,0.0114913,0.00847687,0.0122248,0.0120132,0.00854828,0.00715629,0.0110048,0.00860182]    # length = 4800
                ).astype(float))}
k_raxml_bl_bootlier_log = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                 'cherries':np.log10(np.array([0.0239299,0.0265251,0.0291715,0.0290497,0.0331797,0.0258157,0.0337329,0.0356412,0.0273585,0.0300448,0.031816,0.0249029,0.0262671,0.0285083,0.0227089,0.0305828,0.0218104,0.0313006,0.023489,0.0276533] +  # length = 50
                                     [0.0186505,0.0194606,0.0118222,0.0157764,0.0171235,0.0183583,0.0152852,0.0169387,0.0142315,0.018214,0.0147243,0.0184291,0.0171687,0.0181786,0.0111349,0.0185663,0.0168424,0.0179635,0.0157251,0.0169317] +   # length = 100
                                     [0.010141,0.0134727,0.0142212,0.0148478,0.0144355,0.0106318,0.011849,0.0146692,0.0125647,0.017643,0.0139551,0.0133383,0.0177773,0.013065,0.0115087,0.011766,0.0182734,0.0102922,0.0117142,0.0150701] +   # length = 200
                                     [0.0117528,0.0129104,0.0146195,0.0124127,0.0119733,0.0159625,0.00919471,0.0161587,0.0195983,0.0111165,0.00974389,0.0121575,0.0132816,0.00919249,0.0147484,0.0116352,0.01081,0.0133828,0.0146836,0.0122667] +    # length = 300
                                     [0.00859679,0.00871242,0.00953932,0.00847407,0.0145706,0.0106148,0.0148044,0.0167327,0.0102202,0.0143538,0.009956,0.00954814,0.0134438,0.0168932,0.0100473,0.0111422,0.0163499,0.0115773,0.00972505,0.00902041] + # length = 600
                                     [0.00950528,0.00997656,0.0122028,0.0130452,0.00949558,0.0127776,0.0123644,0.011874,0.0123495,0.010282,0.00989679,0.00944686,0.014951,0.01064,0.0163736,0.0109638,0.0104835,0.0136227,0.0101557,0.0137814] +  # length = 1200
                                     [0.00838914,0.0130873,0.0114806,0.0142736,0.00927983,0.0101702,0.0122231,0.0122103,0.0104483,0.00994076,0.0106068,0.011009,0.00848038,0.00836625,0.0115807,0.0097281,0.00949473,0.00637554,0.0117575,0.0122175] + # length = 2400
                                     [0.00833839,0.0130745,0.0148757,0.00789089,0.0133368,0.00972335,0.0136364,0.0112925,0.00863865,0.0111381,0.00771095,0.0109532,0.01228,0.00886438,0.0134824,0.0126312,0.00833434,0.00761475,0.0109099,0.00860414]    # length = 4800
                ).astype(float))}

''' # VALUES FROM ORIGINAL RAXML TREES
k_raxml    = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'cherries':np.log10(r_vs_cherries(np.array([279,286,267,280,260,268,262,269,268,278,269,266,272,274,273,276,265,263,271,279] + # length = 50
                                  [255,245,257,237,240,240,254,240,252,251,259,253,243,250,256,235,250,253,253,255] + # length = 100
                                  [198,215,213,213,214,221,214,221,208,208,222,206,216,225,204,222,224,220,233,219] + # length = 200
                                  [193,190,199,193,197,196,209,190,190,199,205,218,192,199,185,197,203,203,198,189] + # length = 300
                                  [168,154,169,170,181,176,170,170,175,172,170,171,162,182,171,177,165,172,174,170] + # length = 600
                                  [140,136,143,154,147,153,166,162,153,151,141,152,154,153,152,146,150,157,140,142] + # length = 1200
                                  [136,135,129,138,133,128,135,128,131,128,137,137,128,125,128,138,133,118,135,128] + # length = 2400
                                  [112,124,114,117,118,116,126,118,125,128,121,106,130,113,128,119,113,110,129,116]   # length = 4800
             ).astype(float)/1000))} # divide by number of leaves to get percentage
'''

# modifying deviation from ultrametricity
g_original = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'cherries':np.log10(r_vs_cherries(np.array([93,88,91,93,89,80,86,91,84,86,93,92,104,95,88,89,93,84,96,90] +                    # gamma = 2.95181735298926
                                  [85,92,83,89,81,97,94,95,92,96,90,86,81,85,86,87,95,88,88,83] +                     # gamma = 5.90363470597852
                                  [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] +                    # gamma = 29.518173529892621
                                  [93,85,92,91,90,82,86,85,72,91,89,87,97,78,94,87,91,88,76,87] +                     # gamma = 147.590867649463
                                  [95,86,89,90,84,87,82,92,84,88,89,91,90,95,92,75,91,99,90,95] +                     # gamma = 295.181735298926
                                  [90,86,79,91,83,84,87,89,92,91,97,91,88,96,93,97,89,106,83,86]                      # gamma = infinity
             ).astype(float)/1000))} # divide by number of leaves to get percentage
g_fasttree = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'cherries':np.log10(r_vs_cherries(np.array([214,210,207,208,203,204,202,214,200,206,210,229,219,220,223,229,214,216,197,220] + # gamma = 2.95181735298926
                                  [210,208,204,201,206,213,219,211,209,218,192,210,192,205,213,214,212,225,212,215] + # gamma = 5.90363470597852
                                  [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # gamma = 29.518173529892621
                                  [211,200,220,196,195,196,228,212,210,211,217,215,214,202,207,204,216,220,206,201] + # gamma = 147.590867649463
                                  [209,204,220,205,197,211,184,209,197,205,223,217,214,214,215,208,205,202,211,205] + # gamma = 295.181735298926
                                  [207,210,207,210,201,203,204,210,224,204,220,206,209,217,227,214,217,204,203,196]   # gamma = infinity
             ).astype(float)/1000))} # divide by number of leaves to get percentage
g_fasttree_fix90 = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                    'cherries':np.log10(r_vs_cherries(np.array([0.097,0.09,0.096,0.093,0.09,0.083,0.085,0.106,0.093,0.086,0.095,0.089,0.104,0.098,0.085,0.094,0.101,0.085,0.095,0.091] +   # gamma = 2.95181735298926
                                        [0.09,0.091,0.088,0.09,0.089,0.096,0.094,0.092,0.092,0.101,0.095,0.089,0.083,0.091,0.091,0.091,0.095,0.097,0.096,0.088] +   # gamma = 5.90363470597852
                                        [0.089,0.097,0.098,0.091,0.088,0.092,0.088,0.085,0.101,0.1,0.09,0.089,0.093,0.096,0.099,0.086,0.089,0.092,0.097,0.096] +    # gamma = 29.518173529892621
                                        [0.097,0.087,0.09,0.098,0.091,0.086,0.093,0.097,0.078,0.101,0.095,0.095,0.094,0.086,0.099,0.099,0.097,0.087,0.078,0.095] +  # gamma = 147.590867649463
                                        [0.093,0.09,0.09,0.092,0.088,0.087,0.085,0.091,0.082,0.094,0.087,0.086,0.097,0.101,0.091,0.075,0.096,0.102,0.093,0.092] +   # gamma = 295.181735298926
                                        [0.094,0.087,0.082,0.095,0.088,0.09,0.092,0.088,0.101,0.09,0.102,0.09,0.092,0.099,0.095,0.095,0.094,0.101,0.092,0.088]      # gamma = infinity
                   ).astype(float)))}
g_fasttree_fix95 = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                    'cherries':np.log10(r_vs_cherries(np.array([0.077,0.078,0.084,0.075,0.08,0.075,0.08,0.083,0.08,0.076,0.086,0.076,0.093,0.08,0.078,0.077,0.083,0.072,0.081,0.08] +      # gamma = 2.95181735298926
                                        [0.072,0.082,0.074,0.073,0.072,0.087,0.073,0.079,0.078,0.086,0.081,0.076,0.069,0.072,0.073,0.071,0.082,0.082,0.079,0.072] + # gamma = 5.90363470597852
                                        [0.074,0.077,0.084,0.078,0.078,0.082,0.077,0.075,0.08,0.085,0.076,0.078,0.081,0.084,0.089,0.075,0.073,0.081,0.084,0.083] +  # gamma = 29.518173529892621
                                        [0.078,0.072,0.075,0.081,0.08,0.073,0.079,0.08,0.067,0.079,0.078,0.078,0.075,0.071,0.086,0.081,0.08,0.074,0.064,0.081] +    # gamma = 147.590867649463
                                        [0.079,0.073,0.081,0.079,0.077,0.076,0.074,0.076,0.071,0.074,0.077,0.079,0.077,0.079,0.079,0.066,0.08,0.09,0.078,0.077] +   # gamma = 295.181735298926
                                        [0.083,0.072,0.07,0.084,0.075,0.081,0.079,0.072,0.079,0.071,0.082,0.079,0.079,0.088,0.08,0.085,0.076,0.089,0.077,0.078]     # gamma = infinity
                   ).astype(float)))}
g_raxml    = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'cherries':np.log10(r_vs_cherries(np.array([225,215,219,208,219,214,209,212,210,215,215,226,210,218,223,226,221,214,203,207] + # gamma = 2.95181735298926
                                  [213,210,203,213,220,228,217,215,205,221,209,218,212,203,226,221,225,225,215,213] + # gamma = 5.90363470597852
                                  [199,215,210,215,211,228,215,192,209,208,219,225,197,206,211,212,209,209,217,200] + # gamma = 29.518173529892621
                                  [213,209,218,214,198,198,223,213,212,215,218,224,219,208,203,199,219,211,202,200] + # gamma = 147.590867649463
                                  [204,210,227,210,204,207,192,213,198,213,223,220,217,212,220,214,215,209,201,215] + # gamma = 295.181735298926
                                  [218,209,210,216,202,220,210,211,219,203,220,211,211,225,229,213,218,214,200,194]   # gamma = infinity
             ).astype(float)/1000))} # divide by number of leaves to get percentage
g_raxml_fix80 = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                 'cherries':np.log10(r_vs_cherries(np.array([0.091,0.094,0.093,0.091,0.094,0.088,0.088,0.096,0.091,0.096,0.091,0.09,0.104,0.101,0.098,0.096,0.102,0.095,0.102,0.088] +  # gamma = 2.95181735298926
                                     [0.091,0.097,0.089,0.09,0.09,0.097,0.094,0.1,0.095,0.095,0.097,0.094,0.085,0.088,0.094,0.094,0.095,0.093,0.09,0.088] +      # gamma = 5.90363470597852
                                     [0.084,0.093,0.102,0.093,0.092,0.091,0.102,0.096,0.094,0.096,0.093,0.1,0.089,0.092,0.103,0.095,0.092,0.099,0.104,0.097] +   # gamma = 29.518173529892621
                                     [0.098,0.089,0.098,0.094,0.093,0.086,0.091,0.091,0.078,0.093,0.096,0.092,0.098,0.081,0.098,0.091,0.095,0.085,0.077,0.098] + # gamma = 147.590867649463
                                     [0.098,0.091,0.09,0.091,0.088,0.088,0.089,0.095,0.088,0.087,0.088,0.091,0.095,0.1,0.093,0.082,0.1,0.101,0.093,0.1] +        # gamma = 295.181735298926
                                     [0.092,0.087,0.085,0.096,0.089,0.089,0.089,0.088,0.099,0.091,0.105,0.094,0.095,0.103,0.095,0.103,0.099,0.104,0.088,0.094]   # gamma = infinity
                ).astype(float)))}
g_raxml_fix90 = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                 'cherries':np.log10(r_vs_cherries(np.array([0.082,0.073,0.088,0.08,0.076,0.075,0.081,0.08,0.078,0.078,0.083,0.077,0.092,0.085,0.081,0.078,0.085,0.075,0.087,0.083] +   # gamma = 2.95181735298926
                                     [0.082,0.084,0.078,0.083,0.076,0.086,0.085,0.083,0.084,0.085,0.085,0.076,0.076,0.078,0.081,0.08,0.084,0.08,0.08,0.073] +    # gamma = 5.90363470597852
                                     [0.077,0.087,0.085,0.078,0.077,0.08,0.083,0.08,0.084,0.089,0.08,0.079,0.082,0.08,0.09,0.078,0.081,0.085,0.089,0.082] +      # gamma = 29.518173529892621
                                     [0.084,0.08,0.086,0.085,0.085,0.078,0.08,0.081,0.069,0.084,0.082,0.082,0.085,0.074,0.087,0.084,0.085,0.08,0.07,0.081] +     # gamma = 147.590867649463
                                     [0.084,0.08,0.083,0.084,0.076,0.08,0.078,0.082,0.075,0.082,0.075,0.081,0.083,0.087,0.084,0.071,0.082,0.09,0.084,0.086] +    # gamma = 295.181735298926
                                     [0.084,0.075,0.073,0.084,0.078,0.079,0.081,0.081,0.085,0.083,0.09,0.086,0.082,0.09,0.084,0.091,0.081,0.09,0.079,0.08]       # gamma = infinity
                ).astype(float)))}
g_raxml_fix95 = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                 'cherries':np.log10(r_vs_cherries(np.array([0.073,0.07,0.081,0.072,0.069,0.069,0.071,0.068,0.07,0.065,0.076,0.061,0.081,0.072,0.077,0.067,0.07,0.066,0.077,0.072] +    # gamma = 2.95181735298926
                                     [0.07,0.067,0.069,0.067,0.066,0.078,0.068,0.076,0.075,0.076,0.076,0.069,0.064,0.069,0.072,0.065,0.069,0.068,0.074,0.062] +  # gamma = 5.90363470597852
                                     [0.071,0.072,0.075,0.07,0.068,0.075,0.07,0.068,0.069,0.081,0.071,0.074,0.072,0.068,0.079,0.065,0.07,0.075,0.078,0.077] +    # gamma = 29.518173529892621
                                     [0.072,0.067,0.072,0.072,0.075,0.067,0.07,0.076,0.058,0.07,0.073,0.076,0.073,0.068,0.078,0.074,0.071,0.069,0.058,0.076] +   # gamma = 147.590867649463
                                     [0.074,0.069,0.072,0.073,0.066,0.072,0.07,0.07,0.063,0.07,0.07,0.073,0.073,0.065,0.08,0.065,0.07,0.083,0.07,0.076] +        # gamma = 295.181735298926
                                     [0.07,0.064,0.066,0.076,0.07,0.069,0.07,0.07,0.076,0.068,0.08,0.077,0.072,0.078,0.075,0.079,0.067,0.073,0.073,0.071]        # gamma = infinity
                ).astype(float)))}
g_fasttree_bl = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                 'cherries':np.log10(np.array([0.0102406,0.00919035,0.0115081,0.0147891,0.0122779,0.0112154,0.0134358,0.0117916,0.0106498,0.0102572,0.0170508,0.0108541,0.0165876,0.0145748,0.0155865,0.0121497,0.0117644,0.0132643,0.018171,0.018831] +    # gamma = 2.95181735298926
                                     [0.0132226,0.0130488,0.0144508,0.0138975,0.0123595,0.0206415,0.0116223,0.0149065,0.0116574,0.0114654,0.0135315,0.00927825,0.0114981,0.00952555,0.014528,0.0112802,0.0114177,0.0154756,0.0116301,0.012064] +  # gamma = 5.90363470597852
                                     [0.0122579,0.0140104,0.0147327,0.0129625,0.0127697,0.0166014,0.00966062,0.0170136,0.0205515,0.0116561,0.0104276,0.0129337,0.0144581,0.00953683,0.0153007,0.01193,0.0111577,0.0136173,0.0151836,0.0130099] +    # gamma = 29.518173529892621
                                     [0.0153578,0.0109353,0.0132417,0.0145235,0.0145225,0.0107188,0.0111282,0.0123176,0.00838662,0.0116098,0.012461,0.0116172,0.014534,0.00889949,0.0150935,0.00984349,0.0123763,0.0125835,0.00884112,0.0116644] +   # gamma = 147.590867649463
                                     [0.0148823,0.0121941,0.0133448,0.013683,0.0101743,0.0176761,0.0115887,0.0138486,0.0125669,0.0147383,0.0118118,0.0136548,0.0124376,0.0121298,0.014407,0.00957187,0.0107287,0.0145415,0.0122395,0.0144261] +        # gamma = 295.181735298926
                                     [0.0126154,0.00951075,0.00954195,0.0139637,0.0131583,0.0115978,0.0106451,0.0111683,0.0155404,0.0116249,0.0140551,0.0169731,0.0132624,0.0117782,0.0111374,0.0184172,0.0102189,0.0171867,0.0122307,0.0130963]        # gamma = infinity
                ).astype(float))}
g_raxml_bl = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                 'cherries':np.log10(np.array([0.00942352,0.00833048,0.0108756,0.0143512,0.0117049,0.0106471,0.012181,0.0116684,0.00995295,0.00963702,0.0157126,0.00987403,0.0156713,0.014367,0.0151278,0.0119494,0.0109711,0.0126528,0.0168896,0.0179312] +    # gamma = 2.95181735298926
                                     [0.012748,0.0125605,0.0136604,0.0128767,0.011879,0.0196796,0.0108641,0.0138477,0.0110647,0.0110084,0.0127802,0.00861143,0.0107866,0.00890205,0.0137482,0.0104897,0.0103873,0.0147223,0.0113472,0.0112625] +  # gamma = 5.90363470597852
                                     [0.0116796,0.0128327,0.0145352,0.0123368,0.0118993,0.0158731,0.00913205,0.0160686,0.0194957,0.0110458,0.00967891,0.0120827,0.0132024,0.00912984,0.0146636,0.0115625,0.0107406,0.0133031,0.014599,0.0121914] +    # gamma = 29.518173529892621
                                     [0.014589,0.0103896,0.0127874,0.0137691,0.0130813,0.010088,0.0110471,0.0114526,0.00802045,0.0111899,0.0115302,0.0113448,0.0140263,0.00840114,0.0136352,0.00937374,0.0117375,0.0119783,0.00842957,0.0112472] +   # gamma = 147.590867649463
                                     [0.0143025,0.0116274,0.0124971,0.0133305,0.00938278,0.0167998,0.0110728,0.0132797,0.0118169,0.013594,0.0113459,0.013195,0.0120778,0.0115385,0.0139171,0.00876632,0.0103641,0.0137551,0.0118614,0.0137252] +        # gamma = 295.181735298926
                                     [0.0122184,0.00903168,0.00893515,0.0128871,0.0123187,0.0111515,0.0101066,0.01087,0.0151499,0.0115506,0.0135429,0.0163078,0.0124123,0.0113076,0.0107022,0.0175676,0.00945462,0.0163576,0.0117161,0.0125759]        # gamma = infinity
                ).astype(float))}
g_fasttree_bl_bootlier_log = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                 'cherries':np.log10(np.array([0.00622809,0.00531525,0.00722279,0.00954953,0.00706585,0.00689178,0.00822751,0.0077349,0.00571014,0.00673744,0.0108992,0.00662186,0.0100843,0.0103907,0.0105278,0.00832254,0.00759872,0.00907051,0.0116542,0.0134975] +    # gamma = 2.95181735298926
                                     [0.00883376,0.00857098,0.0103736,0.0107265,0.00855805,0.0142261,0.00791456,0.0111944,0.00870286,0.00731001,0.00862486,0.00572521,0.00801401,0.00666294,0.0103647,0.00777135,0.00681184,0.0109759,0.00810628,0.00788336] +  # gamma = 5.90363470597852
                                     [0.00886929,0.00960094,0.00993662,0.00944752,0.0102536,0.0118833,0.00595553,0.0120525,0.0147908,0.00832097,0.0073311,0.00849477,0.00918819,0.00560626,0.00915525,0.0082181,0.00766799,0.010339,0.0103675,0.00921321] +    # gamma = 29.518173529892621
                                     [0.0116456,0.00731859,0.00995247,0.00894142,0.00957545,0.00768488,0.00795168,0.00697881,0.00595748,0.00711803,0.00864546,0.00866939,0.0107362,0.00680738,0.00943847,0.00663672,0.00909888,0.0088644,0.00595806,0.00890207] +   # gamma = 147.590867649463
                                     [0.0101322,0.00962217,0.00900575,0.00871678,0.00718697,0.0129078,0.00839303,0.00946599,0.00866209,0.0097452,0.00825109,0.00952387,0.00982662,0.0084421,0.0108524,0.0063742,0.00709803,0.00835164,0.00745575,0.0110178] +        # gamma = 295.181735298926
                                     [0.00799192,0.00508547,0.00718452,0.00950052,0.0100986,0.00777533,0.00762789,0.0079842,0.0127502,0.00906363,0.00976927,0.0130802,0.00847789,0.00784835,0.00753113,0.0113321,0.0076294,0.0117004,0.00891148,0.00914305]        # gamma = infinity
                ).astype(float))}
g_raxml_bl_bootlier_log = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                 'cherries':np.log10(np.array([0.00948742,0.00838965,0.0109456,0.0144349,0.0117782,0.0107162,0.0122562,0.0117415,0.0100191,0.00970183,0.0158013,0.00993983,0.0157599,0.0144507,0.0152144,0.0120237,0.0110415,0.0127299,0.0169828,0.0180281] +    # gamma = 2.95181735298926
                                     [0.0128254,0.0126372,0.0137414,0.0129546,0.011953,0.0197828,0.010934,0.0139294,0.0111354,0.0110788,0.0128577,0.00867183,0.0108562,0.00896372,0.0138296,0.0105581,0.0104552,0.0148074,0.0114191,0.011334] +  # gamma = 5.90363470597852
                                     [0.0117528,0.0129104,0.0146195,0.0124127,0.0119733,0.0159625,0.00919471,0.0161587,0.0195983,0.0111165,0.00974389,0.0121575,0.0132816,0.00919249,0.0147484,0.0116352,0.01081,0.0133828,0.0146836,0.0122667] +    # gamma = 29.518173529892621
                                     [0.0146736,0.0104576,0.012865,0.0138505,0.0131601,0.0101547,0.0111177,0.0115249,0.00807825,0.0112611,0.0116028,0.0114167,0.0141087,0.00846062,0.0137161,0.00943743,0.0118109,0.0120527,0.00848918,0.0113187] +   # gamma = 147.590867649463
                                     [0.014386,0.0117004,0.0125736,0.0134103,0.00944651,0.0168926,0.0111436,0.0133592,0.0118907,0.0136748,0.0114178,0.0132742,0.0121526,0.0116112,0.0139991,0.00882739,0.0104319,0.0138365,0.0119353,0.0138064] +        # gamma = 295.181735298926
                                     [0.0122937,0.00909391,0.00899696,0.0129651,0.0123945,0.0112226,0.0101734,0.0109399,0.0152365,0.0116233,0.0136234,0.0163988,0.0124884,0.0113793,0.0107714,0.0176632,0.00951865,0.0164488,0.0117895,0.0126527]        # gamma = infinity
                ).astype(float))}

''' # VALUES FROM ORIGINAL RAXML TREES
g_raxml    = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'cherries':np.log10(r_vs_cherries(np.array([212,196,204,200,202,196,199,205,194,205,202,215,206,203,213,207,218,206,194,193] + # gamma = 2.95181735298926
                                  [199,195,189,202,211,214,202,206,195,212,191,198,188,190,202,205,209,208,198,202] + # gamma = 5.90363470597852
                                  [193,190,199,193,197,196,209,190,190,199,205,218,192,199,185,197,203,203,198,189] + # gamma = 29.518173529892621
                                  [196,188,205,196,187,188,203,198,190,211,217,207,211,189,195,192,203,195,185,189] + # gamma = 147.590867649463
                                  [189,187,210,203,184,188,184,203,179,193,211,196,195,202,203,197,200,191,192,203] + # gamma = 295.181735298926
                                  [208,201,197,209,194,202,194,193,209,193,208,189,191,203,209,192,196,185,194,186]   # gamma = infinity
             ).astype(float)/1000))} # divide by number of leaves to get percentage
'''

# plot Estimated $\log_{10}{r}$ vs. r (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
ax = sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r_fasttree),order=x,color=pal['fasttree'],width=0.3)
plt.plot(np.asarray([sum(r_fasttree['r'][i:i+20])/20.0 for i in range(0,len(r_fasttree['cherries']),20)])+4,[sum(r_fasttree['cherries'][i:i+20])/20.0 for i in range(0,len(r_fasttree['cherries']),20)],color=pal['fasttree'],linestyle='--',linewidth=3)
sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r_fasttree_fix90),order=x,color=pal['fasttree_fix90'],scale='width',width=0.3)
plt.plot(np.asarray([sum(r_fasttree_fix90['r'][i:i+20])/20.0 for i in range(0,len(r_fasttree_fix90['cherries']),20)])+4,[sum(r_fasttree_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(r_fasttree_fix90['cherries']),20)],color=pal['fasttree_fix90'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r_raxml),order=x,color=pal['raxml'],width=0.3)
plt.plot(np.asarray([sum(r_raxml['r'][i:i+20])/20.0 for i in range(0,len(r_raxml['cherries']),20)])+4,[sum(r_raxml['cherries'][i:i+20])/20.0 for i in range(0,len(r_raxml['cherries']),20)],color=pal['raxml'],linestyle='--',linewidth=3)
#sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r_raxml_fix80),order=x,color=pal['raxml_fix80'],scale='width',width=0.3)
#plt.plot(np.asarray([sum(r_raxml_fix80['r'][i:i+20])/20.0 for i in range(0,len(r_raxml_fix80['cherries']),20)])+4,[sum(r_raxml_fix80['cherries'][i:i+20])/20.0 for i in range(0,len(r_raxml_fix80['cherries']),20)],color=pal['raxml_fix80'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r_raxml_fix90),order=x,color=pal['raxml_fix90'],scale='width',width=0.3)
plt.plot(np.asarray([sum(r_raxml_fix90['r'][i:i+20])/20.0 for i in range(0,len(r_raxml_fix90['cherries']),20)])+4,[sum(r_raxml_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(r_raxml_fix90['cherries']),20)],color=pal['raxml_fix90'],linestyle=':',linewidth=3)
setAlpha(ax,0.5)
plt.plot([-1,0,1,2,3,4,5],[-5,-4,-3,-2,-1,0,1],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(E(l_b)=0.298\right)$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title(r'Estimated $\log_{10}{r}$ vs. $\log_{10}{r}\ \left(E(l_b)=0.298\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_r_const-exp-branch-length_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. r (with constant lambda = lambdaA + lambdaB)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
ax = sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r2_fasttree),order=x,color=pal['fasttree'],width=0.3)
plt.plot(np.asarray([sum(r2_fasttree['r'][i:i+20])/20.0 for i in range(0,len(r2_fasttree['cherries']),20)])+4,[sum(r2_fasttree['cherries'][i:i+20])/20.0 for i in range(0,len(r2_fasttree['cherries']),20)],color=pal['fasttree'],linestyle='--',linewidth=3)
sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r2_fasttree_fix90),order=x,color=pal['fasttree_fix90'],scale='width',width=0.3)
plt.plot(np.asarray([sum(r2_fasttree_fix90['r'][i:i+20])/20.0 for i in range(0,len(r2_fasttree_fix90['cherries']),20)])+4,[sum(r2_fasttree_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(r2_fasttree_fix90['cherries']),20)],color=pal['fasttree_fix90'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r2_raxml),order=x,color=pal['raxml'],width=0.3)
plt.plot(np.asarray([sum(r2_raxml['r'][i:i+20])/20.0 for i in range(0,len(r2_raxml['cherries']),20)])+4,[sum(r2_raxml['cherries'][i:i+20])/20.0 for i in range(0,len(r2_raxml['cherries']),20)],color=pal['raxml'],linestyle='--',linewidth=3)
#sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r2_raxml_fix80),order=x,color=pal['raxml_fix80'],scale='width',width=0.3)
#plt.plot(np.asarray([sum(r2_raxml_fix80['r'][i:i+20])/20.0 for i in range(0,len(r2_raxml_fix80['cherries']),20)])+4,[sum(r2_raxml_fix80['cherries'][i:i+20])/20.0 for i in range(0,len(r2_raxml_fix80['cherries']),20)],color=pal['raxml_fix80'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='cherries',data=pd.DataFrame(r2_raxml_fix90),order=x,color=pal['raxml_fix90'],scale='width',width=0.3)
plt.plot(np.asarray([sum(r2_raxml_fix90['r'][i:i+20])/20.0 for i in range(0,len(r2_raxml_fix90['cherries']),20)])+4,[sum(r2_raxml_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(r2_raxml_fix90['cherries']),20)],color=pal['raxml_fix90'],linestyle=':',linewidth=3)
setAlpha(ax,0.5)
x = np.linspace(-4,0,100)
plt.plot([-1,0,1,2,3,4,5],[-5,-4,-3,-2,-1,0,1],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(\lambda = \lambda_A + \lambda_B = 169\right)$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title(r'Estimated $\log_{10}{r}$ vs. $\log_{10}{r}\ \left(\lambda=\lambda_A+\lambda_B=169\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_r_const-lambda_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. lambda
fig = plt.figure()
x = np.array([33.866,84.664,169.328,338.655,846.638])
ax = sns.violinplot(x='lambda',y='cherries',data=pd.DataFrame(l_fasttree),order=x,color=pal['fasttree'],width=0.3)
sns.pointplot(np.asarray([sum(l_fasttree['lambda'][i:i+20])/20.0 for i in range(0,len(l_fasttree['cherries']),20)]),[sum(l_fasttree['cherries'][i:i+20])/20.0 for i in range(0,len(l_fasttree['cherries']),20)],color=pal['fasttree'],linestyles=['--'],linewidth=3)
sns.violinplot(x='lambda',y='cherries',data=pd.DataFrame(l_fasttree_fix90),order=x,color=pal['fasttree_fix90'],scale='width',width=0.3)
sns.pointplot(np.asarray([sum(l_fasttree_fix90['lambda'][i:i+20])/20.0 for i in range(0,len(l_fasttree_fix90['cherries']),20)]),[sum(l_fasttree_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(l_fasttree_fix90['cherries']),20)],color=pal['fasttree_fix90'],linestyles=[':'],linewidth=3)
sns.violinplot(x='lambda',y='cherries',data=pd.DataFrame(l_raxml),order=x,color=pal['raxml'],width=0.3)
sns.pointplot(np.asarray([sum(l_raxml['lambda'][i:i+20])/20.0 for i in range(0,len(l_raxml['cherries']),20)]),[sum(l_raxml['cherries'][i:i+20])/20.0 for i in range(0,len(l_raxml['cherries']),20)],color=pal['raxml'],linestyles=['--'],linewidth=3)
#sns.violinplot(x='lambda',y='cherries',data=pd.DataFrame(l_raxml_fix80),order=x,color=pal['raxml_fix80'],scale='width',width=0.3)
#sns.pointplot(np.asarray([sum(l_raxml_fix80['lambda'][i:i+20])/20.0 for i in range(0,len(l_raxml_fix80['cherries']),20)]),[sum(l_raxml_fix80['cherries'][i:i+20])/20.0 for i in range(0,len(l_raxml_fix80['cherries']),20)],color=pal['raxml_fix80'],linestyles=[':'],linewidth=3)
sns.violinplot(x='lambda',y='cherries',data=pd.DataFrame(l_raxml_fix90),order=x,color=pal['raxml_fix90'],scale='width',width=0.3)
sns.pointplot(np.asarray([sum(l_raxml_fix90['lambda'][i:i+20])/20.0 for i in range(0,len(l_raxml_fix90['cherries']),20)]),[sum(l_raxml_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(l_raxml_fix90['cherries']),20)],color=pal['raxml_fix90'],linestyles=[':'],linewidth=3)
setAlpha(ax,0.5)
x = np.linspace(-100,1000,1100)
plt.plot([-10,10],[-2,-2],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\lambda = \lambda_A + \lambda_B$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title(r'Estimated $\log_{10}{r}$ vs. $\lambda$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_lambda_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. length
fig = plt.figure()
x = np.array([50,100,200,300,600,1200,2400,4800])
ax = sns.violinplot(x='length',y='cherries',data=pd.DataFrame(k_fasttree),order=x,color=pal['fasttree'],width=0.3)
sns.pointplot(np.asarray([sum(k_fasttree['length'][i:i+20])/20 for i in range(0,len(k_fasttree['cherries']),20)]),[sum(k_fasttree['cherries'][i:i+20])/20.0 for i in range(0,len(k_fasttree['cherries']),20)],color=pal['fasttree'],linestyles=['--'],linewidth=3)
sns.violinplot(x='length',y='cherries',data=pd.DataFrame(k_fasttree_fix90),order=x,color=pal['fasttree_fix90'],scale='width',width=0.3)
sns.pointplot(np.asarray([sum(k_fasttree_fix90['length'][i:i+20])/20 for i in range(0,len(k_fasttree_fix90['cherries']),20)]),[sum(k_fasttree_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(k_fasttree_fix90['cherries']),20)],color=pal['fasttree_fix90'],linestyles=[':'],linewidth=3)
sns.violinplot(x='length',y='cherries',data=pd.DataFrame(k_raxml),order=x,color=pal['raxml'],width=0.3)
sns.pointplot(np.asarray([sum(k_raxml['length'][i:i+20])/20 for i in range(0,len(k_raxml['cherries']),20)]),[sum(k_raxml['cherries'][i:i+20])/20.0 for i in range(0,len(k_raxml['cherries']),20)],color=pal['raxml'],linestyles=['--'],linewidth=3)
#sns.violinplot(x='length',y='cherries',data=pd.DataFrame(k_raxml_fix80),order=x,color=pal['raxml_fix80'],scale='width',width=0.3)
#sns.pointplot(np.asarray([sum(k_raxml_fix80['length'][i:i+20])/20 for i in range(0,len(k_raxml_fix80['cherries']),20)]),[sum(k_raxml_fix80['cherries'][i:i+20])/20.0 for i in range(0,len(k_raxml_fix80['cherries']),20)],color=pal['raxml_fix80'],linestyles=[':'],linewidth=3)
sns.violinplot(x='length',y='cherries',data=pd.DataFrame(k_raxml_fix90),order=x,color=pal['raxml_fix90'],scale='width',width=0.3)
sns.pointplot(np.asarray([sum(k_raxml_fix90['length'][i:i+20])/20 for i in range(0,len(k_raxml_fix90['cherries']),20)]),[sum(k_raxml_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(k_raxml_fix90['cherries']),20)],color=pal['raxml_fix90'],linestyles=[':'],linewidth=3)
setAlpha(ax,0.5)
plt.plot([-10,10],[-2,-2],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel('Sequence Length',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title('Estimated $\log_{10}{r}$ vs. Sequence Length',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_length_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. gamma rate
fig = plt.figure()
x = np.array([2.952,5.904,29.518,147.591,295.182,float('inf')])
ax = sns.violinplot(x='gammarate',y='cherries',data=pd.DataFrame(g_fasttree),order=x,color=pal['fasttree'],width=0.3)
sns.pointplot(np.asarray([sum(g_fasttree['gammarate'][i:i+20])/20.0 for i in range(0,len(g_fasttree['cherries']),20)]),[sum(g_fasttree['cherries'][i:i+20])/20.0 for i in range(0,len(g_fasttree['cherries']),20)],color=pal['fasttree'],linestyles=['--'],linewidth=3)
sns.violinplot(x='gammarate',y='cherries',data=pd.DataFrame(g_fasttree_fix90),order=x,color=pal['fasttree_fix90'],scale='width',width=0.3)
sns.pointplot(np.asarray([sum(g_fasttree_fix90['gammarate'][i:i+20])/20.0 for i in range(0,len(g_fasttree_fix90['cherries']),20)]),[sum(g_fasttree_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(g_fasttree_fix90['cherries']),20)],color=pal['fasttree_fix90'],linestyles=[':'],linewidth=3)
sns.violinplot(x='gammarate',y='cherries',data=pd.DataFrame(g_raxml),order=x,color=pal['raxml'],width=0.3)
sns.pointplot(np.asarray([sum(g_raxml['gammarate'][i:i+20])/20.0 for i in range(0,len(g_raxml['cherries']),20)]),[sum(g_raxml['cherries'][i:i+20])/20.0 for i in range(0,len(g_raxml['cherries']),20)],color=pal['raxml'],linestyles=['--'],linewidth=3)
#sns.violinplot(x='gammarate',y='cherries',data=pd.DataFrame(g_raxml_fix80),order=x,color=pal['raxml_fix80'],scale='width',width=0.3)
#sns.pointplot(np.asarray([sum(g_raxml_fix80['gammarate'][i:i+20])/20.0 for i in range(0,len(g_raxml_fix80['cherries']),20)]),[sum(g_raxml_fix80['cherries'][i:i+20])/20.0 for i in range(0,len(g_raxml_fix80['cherries']),20)],color=pal['raxml_fix80'],linestyles=[':'],linewidth=3)
sns.violinplot(x='gammarate',y='cherries',data=pd.DataFrame(g_raxml_fix90),order=x,color=pal['raxml_fix90'],scale='width',width=0.3)
sns.pointplot(np.asarray([sum(g_raxml_fix90['gammarate'][i:i+20])/20.0 for i in range(0,len(g_raxml_fix90['cherries']),20)]),[sum(g_raxml_fix90['cherries'][i:i+20])/20.0 for i in range(0,len(g_raxml_fix90['cherries']),20)],color=pal['raxml_fix90'],linestyles=[':'],linewidth=3)
setAlpha(ax,0.5)
plt.plot([-10,10],[-2,-2],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'Gamma Distribution Rate $\left(\alpha\right)$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title('Estimated $\log_{10}{r}$ vs. Deviation from Ultrametricity',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_gammarate_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()