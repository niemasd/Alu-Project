#! /usr/bin/env python3
'''
Niema Moshiri 2016

Generate plots of inferred r vs. various parameters (TRUE AND FASTTREE)
'''
# imports
from matplotlib import rcParams
from matplotlib.collections import PolyCollection
from matplotlib.patches import Patch
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns

# settings
sns.set_style("ticks")
rcParams['font.family'] = 'serif'
pal = {'theoretical':'#000000', 'original_bl':'#0000FF', 'original_cherries':'#00FF00','fasttree_bl':'#FF0000', 'fasttree_cherries':'#FFFF00'}
handles = [Patch(color=pal['theoretical'],label='Theoretical'), Patch(color=pal['original_cherries'],label='True (Cherries)'), Patch(color=pal['original_bl'],label='True (Branch Length)'), Patch(color=pal['fasttree_cherries'],label='FastTree (Cherries)'), Patch(color=pal['fasttree_bl'],label='FastTree (Branch Length)')]
axisY = np.asarray([-5,-4,-3,-2,-1,0,1])

# Expected Number of Cherries as a Function of r
def cherries_vs_r(r):
    return (r**0.5)/(1+r+r**0.5)

# Estimated r from number of cherries
def r_vs_cherries(c):
    if isinstance(c,np.ndarray):
        for i in range(len(c)):
            if c[i] > 1./3.:
                c[i] = 1./3.
    return ((1-c-((c+1)*(1-3*c))**0.5)/(2*c))**2

# set alpha transparency for axes
def setAlpha(ax,a):
    for art in ax.get_children():
        if isinstance(art, PolyCollection):
            art.set_alpha(a)

# DATASETS
# modifying r = lambdaA/lambdaB (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
r_original_cherries = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                    'inferred_r':np.log10(r_vs_cherries(np.array([14,12,7,10,10,12,8,10,8,12,14,7,13,9,8,8,10,9,9,11] + # r = 0.0001
                                                                 [33,28,26,30,25,31,33,28,32,29,28,29,25,27,30,31,32,27,27,27] + # r = 0.001
                                                                 [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] + # r = 0.01
                                                                 [230,238,226,233,225,219,216,219,225,221,217,224,223,219,222,219,213,225,225,229] + # r = 0.1
                                                                 [331,326,336,340,348,333,345,326,336,328,319,336,326,327,330,332,335,331,320,329] + # r = 1
                                                                 [])/1000.))}
r_original_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'inferred_r':np.log10(np.array([0.00016268136042829,0.000107824089173479,3.13913988722334e-05,0.000111604319986857,8.67868178848887e-05,0.000284905053519412,7.08851390289083e-05,0.000114403277983807,5.24075695615254e-05,0.000183838702026444,0.000124486933269662,4.47027562900884e-05,9.23923591032944e-05,7.82592599931925e-05,5.97067198812094e-05,0.000166150318799864,6.50780954511549e-05,5.68202178419353e-05,8.55468012169131e-05,0.000148985190549891] +# r = 0.0001
                                             [0.0011613566827559,0.000947875968385814,0.000521766150101983,0.000888004609264739,0.000742757376391939,0.00131670335946342,0.00147181700710193,0.000534901812749389,0.00106177621045856,0.00112657057058823,0.000878805628556667,0.000959868734041161,0.000629687461932642,0.000770794932872305,0.00149484445905015,0.000969154164751837,0.00142481611958629,0.000544059440694685,0.000729904376361542,0.00114990218092172] + # r = 0.001
                                             [0.00995117597171412,0.0111289089744208,0.0116730286415915,0.0111713941429863,0.0106494155513853,0.013229609652557,0.0076022779285254,0.0143143538301239,0.0173149555568293,0.0090642584253839,0.00821316131714652,0.00924879351955583,0.0121630365665877,0.00828441565109192,0.0133064398208696,0.00931618027234134,0.0090609615951467,0.0110299126137654,0.0116223823690031,0.0108293064302953] + # r = 0.01
                                             [0.149120083136613,0.165748986115498,0.143047718051708,0.13079248354193,0.122109392586412,0.101583981099976,0.099270016579542,0.119770242381605,0.119828475599297,0.133396894469096,0.12305313591207,0.126952203532532,0.108248085046574,0.13697481472255,0.116170313637056,0.11869894639182,0.0916648799641684,0.117917191424125,0.119412256053904,0.193342835342553] + # r = 0.1
                                             [1,0.736167348341578,1,0.741181243924812,1,1,0.637350417469382,1,1,0.895896612117044,1,0.596499543809233,1,0.475855006441753,0.783705635022939,1,0.5244225438468,0.687903584962215,0.608423286719068,0.78807627693633] + # r = 1
                                             []))}
r_fasttree_cherries = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                    'inferred_r':np.log10(r_vs_cherries(np.array([300,308,315,304,323,307,319,312,329,312,306,316,300,321,310,308,314,309,304,311] + # r = 0.0001
                                                                 [261,263,271,257,262,278,270,269,268,256,278,280,270,249,266,274,252,280,273,274] + # r = 0.001
                                                                 [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # r = 0.01
                                                                 [243,262,246,252,258,241,242,237,247,251,251,240,250,244,240,250,242,243,250,255] + # r = 0.1
                                                                 [326,325,328,338,348,327,343,325,341,329,320,334,327,327,330,324,333,332,314,329] + # r = 1
                                                                 [])/1000.))}
r_fasttree_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
              'inferred_r':np.log10(np.array([0.00259112275718735,0.00167373439855894,0.00125273348108517,0.00211273578013463,0.00153397071339219,0.00221708437739759,0.00127848084695329,0.00146812053513263,0.00106883819331104,0.00205367266312771,0.00171369602080276,0.00111848235272037,0.0014059714436895,0.00132293981399505,0.00122357161635551,0.00180501593762653,0.00134897376297376,0.00106581488273948,0.00146012873890867,0.00178701516127284] +# r = 0.0001
                                             [0.00270050288547256,0.00231558480778829,0.00149567876403744,0.00260693159806365,0.00202583570813006,0.00263540076006969,0.00325965359033411,0.00188967071399356,0.00264273211557207,0.00240021266028075,0.00222768350671284,0.00235425227938842,0.00171694697578304,0.00206359876944219,0.0029875902165445,0.00235696285031601,0.00307641224433667,0.00197012006323402,0.00197477096515125,0.00250448844901817] + # r = 0.001
                                             [0.0122579147016221,0.0140103720789263,0.0147327035321984,0.0129625491965347,0.0127696805376614,0.0166013558138436,0.00966062419265548,0.0170135675784685,0.0205515493185258,0.0116561323976982,0.01042762109447,0.0129336999874741,0.0144581019807326,0.00953682843475937,0.0153007440503203,0.0119300082256185,0.0111576599980953,0.0136172999063792,0.015183613341153,0.0130099110208662] + # r = 0.01
                                             [0.151918909334305,0.175476024958446,0.148687079472143,0.14699287659178,0.129048250835488,0.108830808011567,0.105747761336062,0.125227155506596,0.133087317363766,0.14582574920916,0.129651104323762,0.143007139878878,0.107576694705074,0.142740622875577,0.121936777560547,0.119136222594216,0.0934888001270602,0.123719621528573,0.129202017461058,0.201571855492501] + # r = 0.1
                                             [1,0.667568662697944,1,0.700721163828637,1,1,0.702306771709301,1,1,1,1,0.630382121124682,1,0.468370826698771,1,1,0.51135558060539,1,0.704684272591852,0.817547881117725] + # r = 1
                                             []))}

# modifying r = lambdaA/lambdaB (with constant lambda = lambdaA + lambdaB)
r2_original_cherries = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                    'inferred_r':np.log10(r_vs_cherries(np.array([12,8,9,9,10,11,11,11,10,10,9,11,11,11,9,9,7,14,11,9] + # r = 0.0001
                                                                 [36,36,36,30,26,25,34,32,31,30,26,30,32,33,33,25,35,29,36,32] + # r = 0.001
                                                                 [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] + # r = 0.01
                                                                 [220,232,233,225,232,221,221,223,224,230,234,218,230,218,227,227,227,231,223,219] + # r = 0.1
                                                                 [336,319,341,338,325,323,328,324,327,338,336,330,319,336,333,338,332,334,347,331] + # r = 1
                                                                 [])/1000.))}
r2_original_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'inferred_r':np.log10(np.array([0.000163403107737009,7.21674583874532e-05,0.000168078476309103,9.99016423744763e-05,9.70499505998035e-05,0.000119611257482643,9.36103152664487e-05,8.5676442058165e-05,0.000138082935122309,7.10001821296322e-05,6.48898040642074e-05,0.000118385824077488,0.000118312619946844,0.000135902491581701,0.000118250672464467,5.9906933775895e-05,4.8225928667266e-05,0.000235917650124199,0.00012157721178397,0.000109112019040417] +# r = 0.0001
                                                      [0.00113773867153112,0.00112042624283023,0.000747329067665651,0.000943529790122591,0.000686697202171868,0.000616773071850273,0.00118944125117544,0.00111773851453858,0.000756233852124321,0.000725517044054146,0.000647142915192107,0.00101663342064223,0.00121385303436001,0.00132694708940991,0.00121517069830972,0.000649143003026795,0.00137313149234877,0.000850197648824338,0.00103672569160286,0.00127798487760747] + # r = 0.001
                                                      [0.00995117597171412,0.0111289089744208,0.0116730286415915,0.0111713941429863,0.0106494155513853,0.013229609652557,0.0076022779285254,0.0143143538301239,0.0173149555568293,0.0090642584253839,0.00821316131714652,0.00924879351955583,0.0121630365665877,0.00828441565109192,0.0133064398208696,0.00931618027234134,0.0090609615951467,0.0110299126137654,0.0116223823690031,0.0108293064302953] + # r = 0.01
                                                      [0.0962478546083356,0.13782653191718,0.138387304714043,0.143254297759565,0.130381582502899,0.137280826769848,0.125571229732513,0.106314206716904,0.131782064600664,0.159909626571199,0.102374564999022,0.141863576796895,0.1649147907094,0.150081251995679,0.105017299179143,0.140843768754704,0.12806571019911,0.1460634762283,0.127048990582219,0.118078642899126] + # r = 0.1
                                                      [1,1,1,1,1,0.716140239977308,0.63491714318398,1,0.581784607031003,1,0.682585597784189,1,0.701937212371719,0.771455494824252,0.648285476725911,1,0.698883061051696,1,1,0.661213004941431] + # r = 1
                                                      []
                                                      ))}
r2_fasttree_cherries = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                    'inferred_r':np.log10(r_vs_cherries(np.array([292,295,285,275,309,289,306,297,298,285,296,298,290,286,291,296,296,282,277,278] + # r = 0.0001
                                                                 [238,248,238,257,245,232,264,239,252,252,243,223,241,232,225,243,235,244,231,228] + # r = 0.001
                                                                 [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # r = 0.01
                                                                 [253,261,268,268,242,247,230,249,243,256,251,245,260,256,265,254,252,257,261,244] + # r = 0.1
                                                                 [313,303,308,314,303,307,307,290,300,313,295,303,304,306,303,310,288,300,324,310] + # r = 1
                                                                 [])/1000.))}
r2_fasttree_bl = {'r':np.array([-4]*20+[-3]*20+[-2]*20+[-1]*20+[0]*20), # values of r (log-scaled)
                         'inferred_r':np.log10(np.array([0.00243968721878867,0.00220311211420852,0.00309256794382699,0.00217178895192164,0.0030005592290364,0.00326384384018824,0.00214554083564092,0.00211122209531969,0.0028440117201387,0.00397540918046695,0.00280597428100524,0.00238145758762604,0.00190641318105537,0.00162167003775563,0.00293471210816707,0.00579500193285692,0.00229673632743683,0.0018920152163712,0.00181872958217261,0.00193158310224201] +# r = 0.0001
                                                      [0.00248099767560883,0.00286042754306639,0.00197105248644641,0.0021966616355355,0.00194924405107439,0.00157952871008886,0.00288941585073502,0.00260789072877858,0.00211668867262314,0.00185037064093429,0.00195815132602287,0.00214997645308852,0.00270159598540128,0.00308161995493438,0.00242884282074032,0.00194002584548445,0.00299547726410288,0.00231593460012558,0.00245447507193851,0.00280262155708526] + # r = 0.001
                                                      [0.0122579147016221,0.0140103720789263,0.0147327035321984,0.0129625491965347,0.0127696805376614,0.0166013558138436,0.00966062419265548,0.0170135675784685,0.0205515493185258,0.0116561323976982,0.01042762109447,0.0129336999874741,0.0144581019807326,0.00953682843475937,0.0153007440503203,0.0119300082256185,0.0111576599980953,0.0136172999063792,0.015183613341153,0.0130099110208662] + # r = 0.01
                                                      [0.111899561156037,0.154427849210386,0.145552558981915,0.155258157353189,0.131635116038168,0.151120790456486,0.149797657317199,0.125632584138187,0.170715679068567,0.188351540838524,0.125711913389771,0.180573036282557,0.199526158635631,0.159263284771297,0.116346940883264,0.158982840216419,0.162494162250399,0.1628625148791,0.135714721851037,0.131588855759145] + # r = 0.1
                                                      [1,1,1,1,0.860620695326256,1,0.845821767448824,1,1,1,0.633468279964869,1,1,0.738930368766074,1,1,1,1,1,1] + # r = 1
                                                      []
                                                      ))}

# modifying lambda = lambdaA + lambdaB
l_original_cherries = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                    'inferred_r':np.log10(r_vs_cherries(np.array([88,88,91,98,86,90,98,106,96,83,96,83,87,98,98,95,85,96,101,92] + # lambda = 33.86550309051126
                                                                 [97,85,92,87,84,94,96,97,88,93,80,98,95,91,100,91,87,87,90,98] + # lambda = 84.66375772627816
                                                                 [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] + # lambda = 169.32751545255631
                                                                 [91,89,90,82,94,79,81,89,92,91,90,93,95,92,96,94,91,90,86,94] + # lambda = 338.65503090511262
                                                                 [88,89,89,87,89,87,89,86,85,87,94,84,83,85,84,87,86,84,83,89] + # lambda = 846.63757726278155
                                                                 [])/1000.))}
l_original_bl = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'inferred_r':np.log10(np.array([0.00785081009996067,0.0119329999057956,0.0109628260016497,0.0131522600521357,0.0107629608183666,0.0116061979421825,0.0127847024503173,0.013775191055107,0.0112918094330685,0.00772357077359569,0.0136847492730292,0.00955835730071778,0.009954286094797,0.011250307028044,0.0095643034690251,0.0116501523957631,0.00949580435428387,0.0125084475449579,0.0145204954155884,0.011106844710964] +   # lambda = 33.86550309051126
                                             [0.0102038040906061,0.00787325900498187,0.00943736965475865,0.0109769156720502,0.009445378338016,0.0130233006994807,0.011698100362764,0.012541390972483,0.00987512398432041,0.0120993789891892,0.0065827285640053,0.0123269508679611,0.0117339535367744,0.0127800152949131,0.0152854580757555,0.0101003474413212,0.0092068024340575,0.00943494150625514,0.00977696872992583,0.0122384533277993] +  # lambda = 84.66375772627816
                                             [0.00995117597171412,0.0111289089744208,0.0116730286415915,0.0111713941429863,0.0106494155513853,0.013229609652557,0.0076022779285254,0.0143143538301239,0.0173149555568293,0.0090642584253839,0.00821316131714652,0.00924879351955583,0.0121630365665877,0.00828441565109192,0.0133064398208696,0.00931618027234134,0.0090609615951467,0.0110299126137654,0.0116223823690031,0.0108293064302953] +    # lambda = 169.32751545255631
                                             [0.00944899031378639,0.00818450598805003,0.011062332673155,0.00727301365312137,0.0102961191527149,0.00879082543091982,0.0126923389971855,0.00874539984339075,0.0119556041558348,0.0107732535447052,0.0133824968524907,0.00847764407894782,0.0140775538995988,0.0103866040946973,0.0141786800025749,0.0121092257607518,0.0118019671816682,0.0106805808587605,0.00809850095526546,0.0147836517413571] +      # lambda = 338.65503090511262
                                             [0.0103898482692651,0.00915434767713435,0.0114252429595168,0.00789080124643515,0.00870856183458284,0.0110576901356713,0.00785380498952369,0.00798499978126592,0.010081807229029,0.0093083701269422,0.011746491208884,0.00783960292179091,0.00902503455104734,0.0100009975531183,0.0112106205377676,0.0111583653191386,0.0087076573078973,0.0122751400665717,0.00973680264511528,0.010333977645913]      # lambda = 846.63757726278155
                                             ))}
l_fasttree_cherries = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
                    'inferred_r':np.log10(r_vs_cherries(np.array([215,190,198,191,196,190,204,211,189,184,181,202,189,190,183,199,170,182,189,182] + # lambda = 33.86550309051126
                                                                 [195,211,200,203,204,205,184,189,182,197,194,198,191,200,190,192,193,200,187,195] + # lambda = 84.66375772627816
                                                                 [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # lambda = 169.32751545255631
                                                                 [234,223,227,222,232,231,218,225,227,229,223,209,226,237,240,237,227,220,227,221] + # lambda = 338.65503090511262
                                                                 [233,229,217,222,225,219,217,227,222,219,246,213,233,246,209,210,232,240,218,231] + # lambda = 846.63757726278155
                                                                 [])/1000.))}
l_fasttree_bl = {'lambda':np.array([33.866]*20+[84.664]*20+[169.328]*20+[338.655]*20+[846.638]*20),
              'inferred_r':np.log10(np.array([0.0120516431823903,0.0157999516404197,0.0147479457851056,0.017390056068545,0.0150183778127879,0.0157791329248665,0.0171816356942722,0.0180579405842047,0.0143784534458148,0.0110717471477146,0.018719231852614,0.0131640138446701,0.0145258536622741,0.015268053204601,0.0120730017671618,0.0161175834089771,0.0123912194702559,0.0163398104088684,0.0176516275421179,0.015260925093779] +   # lambda = 33.86550309051126
                                             [0.0121021480523067,0.00946927619547923,0.0113080815161437,0.0132259146587527,0.0119619235140296,0.0152158279345688,0.0134191062922933,0.0148024277547634,0.0111964235642829,0.0139221189495668,0.00860437536931164,0.0145687421738843,0.014563247888886,0.0161801910240817,0.0181722483708266,0.01221174968005,0.0111502648019398,0.0113377564821981,0.0111689526168588,0.0150551777291226] +  # lambda = 84.66375772627816
                                             [0.0122579147016221,0.0140103720789263,0.0147327035321984,0.0129625491965347,0.0127696805376614,0.0166013558138436,0.00966062419265548,0.0170135675784685,0.0205515493185258,0.0116561323976982,0.01042762109447,0.0129336999874741,0.0144581019807326,0.00953682843475937,0.0153007440503203,0.0119300082256185,0.0111576599980953,0.0136172999063792,0.015183613341153,0.0130099110208662] +    # lambda = 169.32751545255631
                                             [0.0121162158650414,0.011027268872939,0.0140669064749011,0.0106744055874253,0.0136181987157274,0.0106018051615654,0.0169918215403707,0.0126881815532284,0.0163902509476134,0.0148205221128395,0.0191372570231518,0.0112141655457021,0.0179405730874824,0.0131293335319312,0.018068783821405,0.0154466250696842,0.0164913044160996,0.016313459716967,0.0113110636542522,0.0203698637006331] +      # lambda = 338.65503090511262
                                             [0.0202849882989993,0.0175386089147837,0.0282337743016734,0.0169180479680728,0.0199040846809252,0.0219234520066434,0.0209557747446319,0.0141997413261038,0.0186491424058323,0.0214897335587527,0.0207527773525418,0.0159977240499275,0.0178943878858349,0.0207508356455813,0.0226515022372653,0.0195752098725454,0.0182026206014404,0.0227461442847652,0.0242889657091457,0.01944643939856]      # lambda = 846.63757726278155
                                             ))}

# modifying sequence length
k_original_cherries = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                    'inferred_r':np.log10(r_vs_cherries(np.array([89,94,93,93,96,90,99,96,89,88,87,79,96,96,95,88,81,93,85,91] + # length = 50
                                                                 [93,91,92,91,90,88,100,87,89,89,85,98,87,86,86,88,88,94,91,88] + # length = 100
                                                                 [86,87,84,91,92,87,95,93,82,90,95,91,91,89,84,82,96,85,93,95] + # length = 200
                                                                 [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] + # length = 300
                                                                 [88,86,88,80,94,91,96,95,91,92,80,91,90,102,84,88,97,90,89,86] + # length = 600
                                                                 [79,94,88,92,88,95,100,94,86,87,84,89,100,90,97,90,87,94,83,91] + # length = 1200
                                                                 [84,93,92,95,91,88,92,93,86,85,95,90,82,84,94,99,86,77,95,95] + # length = 2400
                                                                 [78,92,95,87,94,84,94,88,84,97,86,83,97,87,98,97,85,80,91,80] + # length = 4800
                                                                 [])/1000.))}
k_original_bl = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'inferred_r':np.log10(np.array([0.00984571707194724,0.0112155756966057,0.0134869389410411,0.0120130034758359,0.0143493937340528,0.00812461381845304,0.013750247950098,0.0139133847773096,0.012229429917699,0.0105482262099953,0.0124106032681132,0.00897778207015866,0.0101987599479363,0.0140248730051336,0.0111270706940141,0.0119710441565137,0.00801556865997862,0.0133542059822873,0.00799143023984682,0.0107292324758363] +  # length = 50
                                             [0.0121995723028395,0.0118033097825297,0.0078530089982621,0.00977263309695195,0.0123229704946144,0.0126708453346072,0.0113894905081007,0.0103243309558277,0.00921291178856361,0.0143833244962444,0.00957150401712051,0.0109342693630874,0.0121109892240324,0.0097925215165162,0.00799682365535605,0.0130597899932883,0.0100248690404565,0.0111454760646579,0.00968719624906858,0.0108493725838781] +   # length = 100
                                             [0.0083472561583729,0.0107321230529506,0.0116824924697447,0.0111638611917574,0.0109526724607088,0.0085441557413318,0.0101224415125433,0.0128643162933733,0.0100763207053476,0.0136831601693873,0.0118351575466516,0.0107784313893369,0.0143067257029203,0.0101884027531282,0.00931619366206703,0.00938717130824654,0.013679525752666,0.00826393047916948,0.00994657074394661,0.0128294342735068] +   # length = 200
                                             [0.00995117597171412,0.0111289089744208,0.0116730286415915,0.0111713941429863,0.0106494155513853,0.013229609652557,0.0076022779285254,0.0143143538301239,0.0173149555568293,0.0090642584253839,0.00821316131714652,0.00924879351955583,0.0121630365665877,0.00828441565109192,0.0133064398208696,0.00931618027234134,0.0090609615951467,0.0110299126137654,0.0116223823690031,0.0108293064302953] +    # length = 300
                                             [0.00801568337071582,0.00820400845402349,0.00830461635881927,0.00780353519408335,0.0132952890960524,0.0093554429780462,0.0134092906971072,0.0152664570367218,0.00938786457899151,0.0130258784427677,0.00917218802701452,0.00878591428449447,0.0131363246247451,0.0148892990774734,0.00929144909539212,0.0104046016391315,0.0159145900250167,0.0104577913793561,0.00902346470338216,0.00808354650732496] + # length = 600
                                             [0.00902271072572604,0.00939230751832821,0.0116159498028072,0.0122330135583286,0.00892576375714932,0.012171945342393,0.0124315949865392,0.0113460404746164,0.0117684975333365,0.0103854574635851,0.00928921975013351,0.00916561617662985,0.0135065785539669,0.010413446526465,0.0153708340427975,0.0104270352652001,0.00998734232778423,0.0131046662543132,0.00986624417015075,0.0135411962334216] +  # length = 1200
                                             [0.00818766033723503,0.0126056063292889,0.0109599564850613,0.0140029272727125,0.00903328565359916,0.010043342629838,0.0109100105001401,0.0124720818466406,0.0102348546479624,0.00898725055025161,0.0102076722384657,0.0105634269889727,0.00822644378279633,0.00798742841320038,0.0109524834456427,0.00949932890511381,0.00898095173056808,0.00631580509075939,0.011292635288916,0.0121037480250617] + # length = 2400
                                             [0.00747189592630703,0.0114025841465185,0.0144257087970065,0.00778507744608168,0.0130962946624102,0.00961033997677054,0.0138831083032616,0.0102164037968684,0.00843213629631247,0.0113554360013981,0.00788360689469464,0.0108506872554409,0.0120399735142445,0.00871160268417927,0.0130675036853344,0.0122878518887825,0.00857108383120754,0.0075266106281867,0.0115178747516829,0.00886995728167685]    # length = 4800
                                             ))}
k_fasttree_cherries = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
                    'inferred_r':np.log10(r_vs_cherries(np.array([229,240,216,231,204,229,212,212,217,223,219,213,211,207,227,209,222,214,236,238] + # length = 50
                                                                 [225,238,240,243,233,225,232,244,249,229,252,239,241,222,262,233,227,236,234,248] + # length = 100
                                                                 [209,221,226,221,221,243,236,238,222,230,228,215,221,233,221,235,242,229,238,223] + # length = 200
                                                                 [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # length = 300
                                                                 [173,176,178,179,191,182,176,169,185,178,190,182,182,182,175,176,176,175,185,181] + # length = 600
                                                                 [130,141,154,163,145,159,164,150,159,156,144,152,161,148,153,149,143,161,141,144] + # length = 1200
                                                                 [131,134,133,137,125,123,134,125,131,123,128,133,113,121,128,134,128,122,131,118] + # length = 2400
                                                                 [106,121,113,109,111,113,120,116,115,121,116,104,124,103,131,115,105,104,119,111] + # length = 4800
                                                                 [])/1000.))}
k_fasttree_bl = {'length':np.array([50]*20+[100]*20+[200]*20+[300]*20+[600]*20+[1200]*20+[2400]*20+[4800]*20), # values of length
              'inferred_r':np.log10(np.array([0.042780179737857,0.0474116628261749,0.0485843523689138,0.0512437808064374,0.0646606748191029,0.0438524431287474,0.0633359036438687,0.0691174077366441,0.0444995960297354,0.0545085627511482,0.05958538112172,0.0491782597362705,0.048949751641574,0.0535600233062325,0.0415044313967037,0.0538873370765499,0.0429738763861515,0.0514628971253634,0.0392866573707744,0.0502799286051359] +  # length = 50
                                             [0.0228811681732233,0.0241613766554294,0.016399339941465,0.0194281563640824,0.0229367443489213,0.0244553580080789,0.0196726672970695,0.0216282678758392,0.0205361415245541,0.0246706071954748,0.0171701133533639,0.0248133999632418,0.0213294298552044,0.0230472002286211,0.0159703498303153,0.0226871078158276,0.0214595671934692,0.0234570191292426,0.0208370416404174,0.0214121236423593] +   # length = 100
                                             [0.011119771753787,0.0145298779767955,0.015662918543308,0.0161564162470366,0.0159988786315072,0.0112388165279437,0.0133591098156743,0.016164132174586,0.0136954768825172,0.0195485786984124,0.0149736394328861,0.0148789898660187,0.0188827082684133,0.0145646211539596,0.0126850477786065,0.0128649093479918,0.0193456793495481,0.0115332930171917,0.0131621682835711,0.0164278296982256] +   # length = 200
                                             [0.0122579147016221,0.0140103720789263,0.0147327035321984,0.0129625491965347,0.0127696805376614,0.0166013558138436,0.00966062419265548,0.0170135675784685,0.0205515493185258,0.0116561323976982,0.01042762109447,0.0129336999874741,0.0144581019807326,0.00953682843475937,0.0153007440503203,0.0119300082256185,0.0111576599980953,0.0136172999063792,0.015183613341153,0.0130099110208662] +    # length = 300
                                             [0.00855219206619395,0.00877734119592148,0.00972551006493732,0.00854477638147167,0.0147576036719751,0.0106901294366519,0.015237502845739,0.0166326122508082,0.0103016130930287,0.0143490865580559,0.0100935654012711,0.00964169697177239,0.0134749957583007,0.0170207978660019,0.00999144911977127,0.0111490644154635,0.0164445358746057,0.011971376387578,0.00961762979281501,0.00915283673740431] + # length = 600
                                             [0.00956275569634447,0.00989205482547865,0.0121060438510361,0.012994023024551,0.00956604683242142,0.0127946891127204,0.0122726916039566,0.0117936110537609,0.0123228706706023,0.0102325262960279,0.00982698116336402,0.00939633384563928,0.0149589457623773,0.0105688087750286,0.0164762707462096,0.0109571805618602,0.0105150385892894,0.0136183712808483,0.0100604486518832,0.0137671121072277] +  # length = 1200
                                             [0.00833245721245053,0.012998551632969,0.0114097884655949,0.0141710292392175,0.00918867741255152,0.0100476167084069,0.0112997263645286,0.0121074620832737,0.0103604871229851,0.00929666503019719,0.0105170608124519,0.0108851663253762,0.00850883157764568,0.00826422306161716,0.0114893575727725,0.00961712813112998,0.00943020989993543,0.00642079457635757,0.0116746366057772,0.0121125729441792] + # length = 2400
                                             [0.00760534155982273,0.0113546443124137,0.0147970894830325,0.00792800655403207,0.0132407287481247,0.00977195135288448,0.0136729332093354,0.0104973422453352,0.00857026294795865,0.0111994010342483,0.0079810493040395,0.0110092600548564,0.0123087907782968,0.00877921724596242,0.0133959903470761,0.0125421000070484,0.00860825258608149,0.00753932493931993,0.0115050148892176,0.00903027866181442]    # length = 4800
                                             ))}

# modifying deviation from ultrametricity
g_original_cherries = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                    'inferred_r':np.log10(r_vs_cherries(np.array([93,88,91,93,89,80,86,91,84,86,93,92,104,95,88,89,93,84,96,90] + # gamma = 2.95181735298926
                                                                 [85,92,83,89,81,97,94,95,92,96,90,86,81,85,86,87,95,88,88,83] + # gamma = 5.90363470597852
                                                                 [88,91,90,88,86,90,90,91,92,94,85,87,88,86,100,88,91,91,98,90] + # gamma = 29.518173529892621
                                                                 [93,85,92,91,90,82,86,85,72,91,89,87,97,78,94,87,91,88,76,87] + # gamma = 147.590867649463
                                                                 [95,86,89,90,84,87,82,92,84,88,89,91,90,95,92,75,91,99,90,95] + # gamma = 295.181735298926
                                                                 [90,86,79,91,83,84,87,89,92,91,97,91,88,96,93,97,89,106,83,86] + # gamma = infinity
                                                                 [])/1000.))}
g_original_bl = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'inferred_r':np.log10(np.array([0.0082403050210136,0.00699035765055394,0.00964277847862366,0.0127023214304448,0.0103565651167209,0.00866030397026998,0.0101211950309588,0.00962985901371004,0.00830049773843224,0.00787711154488407,0.0131746496948708,0.00816305329507622,0.0139795789846283,0.0123205213531811,0.0124305745022504,0.00937531231640375,0.00916051266964387,0.00967952664596224,0.0138481928260075,0.0142761941839552] +    # gamma = 2.95181735298926
                                             [0.0101960878824483,0.0106099120779768,0.0114910796426104,0.0118178578932328,0.00998106963701763,0.0167823728142697,0.0100181228865634,0.0122337252194081,0.00908385191624164,0.00955762011599896,0.0111159869663835,0.00733570727210089,0.00822151481382116,0.00724177658332583,0.011369292160206,0.00826999622895066,0.00883512604714786,0.0125680949636244,0.00913278214318304,0.00944561633458305] +  # gamma = 5.90363470597852
                                             [0.00995117597171412,0.0111289089744208,0.0116730286415915,0.0111713941429863,0.0106494155513853,0.013229609652557,0.0076022779285254,0.0143143538301239,0.0173149555568293,0.0090642584253839,0.00821316131714652,0.00924879351955583,0.0121630365665877,0.00828441565109192,0.0133064398208696,0.00931618027234134,0.0090609615951467,0.0110299126137654,0.0116223823690031,0.0108293064302953] +    # gamma = 29.518173529892621
                                             [0.013089290431104,0.00896413439507696,0.0112245890212973,0.0113178490849957,0.0113382968648553,0.00952212939985906,0.00975116100444717,0.010107859960312,0.00718159812648784,0.00981291959361954,0.00970669494005008,0.0101057082670303,0.0128944228219767,0.00700456139574575,0.0121336669473123,0.00779975307019657,0.0102954871043493,0.0116373576547546,0.00730137426932137,0.00965293345943269] +   # gamma = 147.590867649463
                                             [0.0131683189657273,0.00944074484652559,0.0119272875001875,0.0109257776995836,0.00845835068614003,0.0136668197895269,0.00857579609526422,0.0110816853512431,0.0106009696344089,0.0114654173937148,0.0101144472307221,0.0116087840251028,0.0110523668335175,0.00994619837194147,0.0120967452266261,0.00763330652973047,0.00901947088547953,0.0126417358350605,0.00993333254326352,0.0125182981618273] +        # gamma = 295.181735298926
                                             [0.0112070856268166,0.00858255769906094,0.00784574839549448,0.0106090017074369,0.010663987424162,0.00978117324087128,0.00881280842187751,0.00939428347106856,0.0124417051274349,0.0108798413777212,0.0117853288161422,0.0146023671615921,0.0110452702673398,0.0104299647819676,0.00953904440065211,0.0150174883714762,0.00762306196093852,0.015848705210617,0.0105752135893478,0.0107776025968358]        # gamma = infinity
                                             ))}
g_fasttree_cherries = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
                    'inferred_r':np.log10(r_vs_cherries(np.array([214,210,207,208,203,204,202,214,200,206,210,229,219,220,223,229,214,216,197,220] + # gamma = 2.95181735298926
                                                                 [210,208,204,201,206,213,219,211,209,218,192,210,192,205,213,214,212,225,212,215] + # gamma = 5.90363470597852
                                                                 [208,204,216,214,213,216,216,196,207,197,221,219,176,206,205,217,219,210,214,197] + # gamma = 29.518173529892621
                                                                 [211,200,220,196,195,196,228,212,210,211,217,215,214,202,207,204,216,220,206,201] + # gamma = 147.590867649463
                                                                 [209,204,220,205,197,211,184,209,197,205,223,217,214,214,215,208,205,202,211,205] + # gamma = 295.181735298926
                                                                 [207,210,207,210,201,203,204,210,224,204,220,206,209,217,227,214,217,204,203,196] + # gamma = infinity
                                                                 [])/1000.))}
g_fasttree_bl = {'gammarate':np.array([2.952]*20+[5.904]*20+[29.518]*20+[147.591]*20+[295.182]*20+[float('inf')]*20),
              'inferred_r':np.log10(np.array([0.0102405685040844,0.00919034726892346,0.0115080880100249,0.0147891192196016,0.0122779293848874,0.0112154429493024,0.0134358498322316,0.0117915715229034,0.0106498132826456,0.0102572035808217,0.0170508383616678,0.010854109454305,0.0165876068409653,0.0145747507481327,0.0155864626589819,0.0121497388203261,0.0117644030353769,0.0132642824096361,0.0181710461500864,0.0188309955150529] +    # gamma = 2.95181735298926
                                             [0.0132225592638813,0.0130488268226032,0.0144507533709183,0.0138974553339668,0.0123595149805478,0.0206415157543277,0.0116222528739649,0.0149064959359614,0.0116574468225896,0.0114653513033351,0.013531535981256,0.00927825227015497,0.0114980962410902,0.00952555121469971,0.0145280175846461,0.0112802408997202,0.0114176600670029,0.0154756240691722,0.0116301464847299,0.0120640335036624] +  # gamma = 5.90363470597852
                                             [0.0122579147016221,0.0140103720789263,0.0147327035321984,0.0129625491965347,0.0127696805376614,0.0166013558138436,0.00966062419265548,0.0170135675784685,0.0205515493185258,0.0116561323976982,0.01042762109447,0.0129336999874741,0.0144581019807326,0.00953682843475937,0.0153007440503203,0.0119300082256185,0.0111576599980953,0.0136172999063792,0.015183613341153,0.0130099110208662] +    # gamma = 29.518173529892621
                                             [0.0153577546826077,0.0109353044908002,0.0132417123611588,0.0145235252167346,0.0145225275959652,0.0107187933536503,0.0111281998508638,0.01231759306101,0.00838661753963196,0.011609774863579,0.0124609674034296,0.0116171831805107,0.0145339504371067,0.00889949125989193,0.0150935042989778,0.00984348554459385,0.012376338976851,0.0125834632666299,0.0088411216803623,0.0116644320810125] +   # gamma = 147.590867649463
                                             [0.0148823372479727,0.0121940963343727,0.0133447744239227,0.0136830248610638,0.0101742846269072,0.0176761010297192,0.0115887233678656,0.0138485745378905,0.0125668938022077,0.0147382774114443,0.0118118010568928,0.0136548158277758,0.0124376148485955,0.0121297797710194,0.0144069570443631,0.00957187070913477,0.0107286887773908,0.0145415473962005,0.012239455253895,0.014426124708321] +        # gamma = 295.181735298926
                                             [0.0126154156064224,0.00951074597733264,0.00954195332852844,0.0139636585571634,0.0131582692535884,0.0115978160200427,0.0106451156972638,0.0111683484719911,0.0155403856211836,0.0116248952378628,0.014055141386785,0.016973056125392,0.013262407256844,0.0117782351429518,0.0111374292168484,0.0184171993804374,0.0102189068120201,0.0171866524403393,0.0122307148355795,0.013096316210753]        # gamma = infinity
                                             ))}

# modifying n
n_original_cherries = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
                    'inferred_r':np.log10(r_vs_cherries(np.array([0.12,0.08,0.08,0.16,0.08,0.12,0.08,0.12,0.12,0.08,0.08,0.08,0.12,0.12,0.12,0.08,0.08,0.08,0.08,0.12] + # n = 25
                                                                 [0.08,0.12,0.16,0.14,0.08,0.08,0.1,0.1,0.1,0.1,0.12,0.16,0.12,0.1,0.08,0.12,0.08,0.1,0.12,0.06] + # n = 50
                                                                 [0.1,0.092,0.1,0.092,0.08,0.084,0.084,0.08,0.088,0.096,0.092,0.084,0.112,0.104,0.088,0.092,0.088,0.096,0.108,0.096] + # n = 250
                                                                 [0.098,0.102,0.09,0.098,0.086,0.096,0.096,0.1,0.098,0.092,0.09,0.088,0.096,0.1,0.1,0.092,0.094,0.086,0.09,0.078] + # n = 500
                                                                 [0.088,0.091,0.09,0.088,0.086,0.09,0.09,0.091,0.092,0.094,0.085,0.087,0.088,0.086,0.1,0.088,0.091,0.091,0.098,0.09] + # n = 1000
                                                                 [0.088,0.0895,0.0895,0.0905,0.088,0.086,0.094,0.0905,0.102,0.091,0.087,0.0815,0.093,0.089,0.095,0.089,0.0875,0.0905,0.0955,0.0945] + # n = 2000
                                                                 [0.09175,0.0895,0.09275,0.09425,0.09225,0.09125,0.089,0.0875,0.09225,0.08725,0.089,0.09225,0.09175,0.09125,0.08925,0.09,0.0885,0.09025,0.0915,0.09075] + # n = 4000
                                                                 [])))}
n_original_bl = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'inferred_r':np.log10(np.array([0.116192253411934,0.00904366203864153,0.00819199080474415,0.0298564006567837,0.00492744459625981,0.00857405365961714,0.0117825243709795,0.00676494973285414,0.029628247944738,0.00909434923809543,0.00714931521323773,0.00881232908225265,0.0451196086380976,0.0130762773092253,0.011612946750185,0.00455161544332266,0.0171613712272519,0.0142981383944169,0.0144212570676074,0.0214354563368179] + # n = 25
                                             [0.00638541796133548,0.0104502040745998,0.0192866923280638,0.029189514539236,0.00720286913534934,0.00564775511205899,0.0191219498824754,0.0102503651086249,0.0148087176804655,0.0137662032983065,0.0180631645924542,0.0268271485685527,0.00780189651300449,0.00943797818951622,0.00517534802509982,0.0165685257441282,0.00862189692446612,0.00985000862273074,0.0177299446654189,0.00642174386809582] + # n = 50
                                             [0.0150708707677028,0.00955492908105741,0.0135446094879501,0.007542650434973,0.0131353892803493,0.00978831651854296,0.0078058852979721,0.00897799577091409,0.00823321678569177,0.0106720699522741,0.01442003930781,0.0142089044774879,0.014649848970736,0.0233610816457426,0.0110663600966107,0.0121782588621712,0.00769630224340349,0.0125620771063761,0.0291420303813717,0.0103731446889437] +    # n = 250
                                             [0.01449820912783,0.0107374840638851,0.00982638912078216,0.0185898199301954,0.00884901338552988,0.00998742831789797,0.0150566445571809,0.0118847779841383,0.0142237551805507,0.00918818838466038,0.0120630886031837,0.0072766669417694,0.0122903129624804,0.0125165539026526,0.0120863426733852,0.0112265985352574,0.0154473946428339,0.00833427631678504,0.0151245064408068,0.00688089578243504] +  # n = 500
                                             [0.00995117597171412,0.0111289089744208,0.0116730286415915,0.0111713941429863,0.0106494155513853,0.013229609652557,0.0076022779285254,0.0143143538301239,0.0173149555568293,0.0090642584253839,0.00821316131714652,0.00924879351955583,0.0121630365665877,0.00828441565109192,0.0133064398208696,0.00931618027234134,0.0090609615951467,0.0110299126137654,0.0116223823690031,0.0108293064302953] +    # n = 1000
                                             [0.0104600898619612,0.00935888817444923,0.0110159195080505,0.0111170020544824,0.00984072208222469,0.00892602409721819,0.0121861244018588,0.0106034552652016,0.0162848263897884,0.0113156842809023,0.00923491644725173,0.00931847257316883,0.0120127581193998,0.00978531712373417,0.0128332468366232,0.0103925661037348,0.00789513160183411,0.0123473887862717,0.011280961557621,0.014668537774882] +   # n = 2000
                                             [0.0113732606502396,0.0102400939509893,0.0114620104548981,0.0115347844398557,0.0114919601330945,0.00999759735620461,0.0109604825228391,0.0105918548243058,0.0116994924373941,0.00998429870178093,0.0121158597788053,0.0129824876445585,0.0101805654208769,0.0116404264552885,0.0110436622286265,0.0102482920162353,0.0120773315834719,0.0125991463214465,0.012429099355846,0.0106784296273599]        # n = 4000
                                             ))}
n_fasttree_cherries = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
                    'inferred_r':np.log10(r_vs_cherries(np.array([0.16,0.24,0.16,0.16,0.24,0.2,0.12,0.2,0.2,0.24,0.2,0.12,0.2,0.2,0.24,0.2,0.16,0.2,0.12,0.24] + # n = 25
                                                                 [0.2,0.2,0.2,0.22,0.22,0.14,0.16,0.26,0.22,0.18,0.24,0.2,0.2,0.22,0.2,0.16,0.18,0.18,0.24,0.22] + # n = 50
                                                                 [0.208,0.184,0.212,0.224,0.224,0.224,0.22,0.196,0.228,0.216,0.204,0.208,0.216,0.196,0.192,0.216,0.228,0.188,0.208,0.172] + # n = 250
                                                                 [0.204,0.198,0.218,0.208,0.208,0.19,0.204,0.204,0.192,0.226,0.202,0.226,0.226,0.208,0.22,0.202,0.2,0.2,0.206,0.206] + # n = 500
                                                                 [0.208,0.204,0.216,0.214,0.213,0.216,0.216,0.196,0.207,0.197,0.221,0.219,0.176,0.206,0.205,0.217,0.219,0.21,0.214,0.197] + # n = 1000
                                                                 [0.2215,0.214,0.214,0.2095,0.209,0.2055,0.2055,0.205,0.208,0.206,0.2075,0.219,0.217,0.2105,0.2175,0.199,0.215,0.216,0.211,0.202] + # n = 2000
                                                                 [0.208,0.212,0.21,0.21225,0.21275,0.20925,0.2075,0.213,0.20325,0.2085,0.195,0.2125,0.218,0.207,0.21225,0.212,0.205,0.2075,0.204,0.2105] + # n = 4000
                                                                 [])))}
n_fasttree_bl = {'n':np.array([25]*20+[50]*20+[250]*20+[500]*20+[1000]*20+[2000]*20+[4000]*20),
              'inferred_r':np.log10(np.array([0.159762647895528,0.019951484556287,0.0127568629006961,0.0244364500500072,0.00815860566209206,0.0129013041804854,0.0163822291347621,0.00768330997710769,0.0147327581559349,0.0102539073808229,0.0100962579521527,0.0210131023257338,0.0566301537780392,0.0124908016782733,0.0215822184117142,0.00993008127552933,0.0190285939455761,0.0187115575082232,0.0199060694346575,0.0283917316590405] + # n = 25
                                             [0.00635022619093672,0.014708585686689,0.0326354602972663,0.0420243180390515,0.00426338791573129,0.00968408786016034,0.0233067274098173,0.0137395896268259,0.0147486918925854,0.0164506572935725,0.0237159987816277,0.0287221266941862,0.00890666416683024,0.0121695035027777,0.00570980691526924,0.0298177693556526,0.0107395482364327,0.010649854374324,0.0227743086350343,0.0102521142424179] + # n = 50
                                             [0.019797368211059,0.0122794544703436,0.0181351797464784,0.00986024872314304,0.0161233730070629,0.0126391973288973,0.00930048567586518,0.0111153702323523,0.010129791601681,0.0130332715396195,0.0200082290660713,0.0161309396905363,0.0171538125297358,0.0298474056767121,0.0141707010293795,0.0145010334867257,0.00965904508763792,0.0148807711689563,0.0397718507636164,0.0148421662678022] +    # n = 250
                                             [0.0166646828099884,0.0129803872329129,0.0136157037247987,0.0237901610213837,0.0110036296391138,0.0124538991503133,0.0162247588809183,0.0134640338499879,0.0184867585190738,0.012517187305129,0.0141392792456096,0.00917473172124963,0.0146074863711469,0.0142803130551302,0.0144693780088085,0.0146419578866755,0.0176765983302097,0.0101739734287483,0.0202148463851148,0.00915807871440696] +  # n = 500
                                             [0.0122579147016221,0.0140103720789263,0.0147327035321984,0.0129625491965347,0.0127696805376614,0.0166013558138436,0.00966062419265548,0.0170135675784685,0.0205515493185258,0.0116561323976982,0.01042762109447,0.0129336999874741,0.0144581019807326,0.00953682843475937,0.0153007440503203,0.0119300082256185,0.0111576599980953,0.0136172999063792,0.015183613341153,0.0130099110208662] +    # n = 1000
                                             [0.0124105240438965,0.0119446116720127,0.0132859162519778,0.0135338351669979,0.0117810833637531,0.0104937682997019,0.0150600797642881,0.0129157464249034,0.0188463830840799,0.0131102867216517,0.0110527442607632,0.0113475042864065,0.0138096819595874,0.0112530366634499,0.0154476996976917,0.0120617108333427,0.00955404109991701,0.0142599381482412,0.0131524761619279,0.0180928313673281] +   # n = 2000
                                             [0.013775825366655,0.0121571381466063,0.01354572915387,0.0131313027546302,0.0132184488762507,0.0120673045892059,0.0133645937497721,0.0123862099696911,0.0145972198070904,0.0119118241976839,0.0147075184735567,0.0161307038869194,0.0121304246352677,0.0144306855149803,0.0135545705684828,0.0126574422487482,0.0148028940425942,0.0154711730316754,0.0149429571958578,0.0131381856190489]        # n = 4000
                                             ))}

# plot Estimated $\log_{10}{r}$ vs. r (with different lambda = lambdaA+lambdaB to keep expected branch length constant)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
ax = sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r_original_bl),order=x,color=pal['original_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r_original_bl['r'][i:i+20])/20.0 for i in range(0,len(r_original_bl['inferred_r']),20)])+4,[sum(r_original_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(r_original_bl['inferred_r']),20)],color=pal['original_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r_original_cherries),order=x,color=pal['original_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r_original_cherries['r'][i:i+20])/20.0 for i in range(0,len(r_original_cherries['inferred_r']),20)])+4,[sum(r_original_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(r_original_cherries['inferred_r']),20)],color=pal['original_cherries'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r_fasttree_bl),order=x,color=pal['fasttree_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r_fasttree_bl['r'][i:i+20])/20.0 for i in range(0,len(r_fasttree_bl['inferred_r']),20)])+4,[sum(r_fasttree_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(r_fasttree_bl['inferred_r']),20)],color=pal['fasttree_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r_fasttree_cherries),order=x,color=pal['fasttree_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r_fasttree_cherries['r'][i:i+20])/20.0 for i in range(0,len(r_fasttree_cherries['inferred_r']),20)])+4,[sum(r_fasttree_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(r_fasttree_cherries['inferred_r']),20)],color=pal['fasttree_cherries'],linestyle=':',linewidth=3)
setAlpha(ax,0.7)
plt.plot([-1,0,1,2,3,4,5],[-5,-4,-3,-2,-1,0,1],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title(r'Estimated $\log_{10}{r}$ vs. $\log_{10}{r}$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_r_const-exp-branch-length_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. r (with constant lambda = lambdaA + lambdaB)
fig = plt.figure()
x = np.array([-4,-3,-2,-1,0])
ax = sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r2_original_bl),order=x,color=pal['original_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r2_original_bl['r'][i:i+20])/20.0 for i in range(0,len(r2_original_bl['inferred_r']),20)])+4,[sum(r2_original_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(r2_original_bl['inferred_r']),20)],color=pal['original_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r2_original_cherries),order=x,color=pal['original_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r2_original_cherries['r'][i:i+20])/20.0 for i in range(0,len(r2_original_cherries['inferred_r']),20)])+4,[sum(r2_original_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(r2_original_cherries['inferred_r']),20)],color=pal['original_cherries'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r2_fasttree_bl),order=x,color=pal['fasttree_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r2_fasttree_bl['r'][i:i+20])/20.0 for i in range(0,len(r2_fasttree_bl['inferred_r']),20)])+4,[sum(r2_fasttree_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(r2_fasttree_bl['inferred_r']),20)],color=pal['fasttree_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='r',y='inferred_r',data=pd.DataFrame(r2_fasttree_cherries),order=x,color=pal['fasttree_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([sum(r2_fasttree_cherries['r'][i:i+20])/20.0 for i in range(0,len(r2_fasttree_cherries['inferred_r']),20)])+4,[sum(r2_fasttree_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(r2_fasttree_cherries['inferred_r']),20)],color=pal['fasttree_cherries'],linestyle=':',linewidth=3)
setAlpha(ax,0.7)
x = np.linspace(-4,0,100)
plt.plot([-1,0,1,2,3,4,5],[-5,-4,-3,-2,-1,0,1],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\log_{10}{r} = \log_{10}{\left(\frac{\lambda_A}{\lambda_B}\right)}\ \left(\lambda = \lambda_A + \lambda_B = 169\right)$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title(r'Estimated $\log_{10}{r}$ vs. $\log_{10}{r}\ \left(\lambda=\lambda_A+\lambda_B=169\right)$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_r_const-lambda_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. lambda
fig = plt.figure()
x = np.array([33.866,84.664,169.328,338.655,846.638])
ax = sns.violinplot(x='lambda',y='inferred_r',data=pd.DataFrame(l_original_bl),order=x,color=pal['original_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(l_original_bl['inferred_r']),20)]),[sum(l_original_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(l_original_bl['inferred_r']),20)],color=pal['original_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='lambda',y='inferred_r',data=pd.DataFrame(l_original_cherries),order=x,color=pal['original_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(l_original_cherries['inferred_r']),20)]),[sum(l_original_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(l_original_cherries['inferred_r']),20)],color=pal['original_cherries'],linestyle=':',linewidth=3)
sns.violinplot(x='lambda',y='inferred_r',data=pd.DataFrame(l_fasttree_bl),order=x,color=pal['fasttree_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(l_fasttree_bl['inferred_r']),20)]),[sum(l_fasttree_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(l_fasttree_bl['inferred_r']),20)],color=pal['fasttree_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='lambda',y='inferred_r',data=pd.DataFrame(l_fasttree_cherries),order=x,color=pal['fasttree_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(l_fasttree_cherries['inferred_r']),20)]),[sum(l_fasttree_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(l_fasttree_cherries['inferred_r']),20)],color=pal['fasttree_cherries'],linestyle=':',linewidth=3)
setAlpha(ax,0.7)
x = np.linspace(-100,1000,1100)
plt.plot([-10,10],[-2,-2],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$\lambda = \lambda_A + \lambda_B$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title(r'Estimated $\log_{10}{r}$ vs. $\lambda$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_lambda_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. length
fig = plt.figure()
x = np.array([50,100,200,300,600,1200,2400,4800])
ax = sns.violinplot(x='length',y='inferred_r',data=pd.DataFrame(k_original_bl),order=x,color=pal['original_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(k_original_bl['inferred_r']),20)]),[sum(k_original_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(k_original_bl['inferred_r']),20)],color=pal['original_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='length',y='inferred_r',data=pd.DataFrame(k_original_cherries),order=x,color=pal['original_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(k_original_cherries['inferred_r']),20)]),[sum(k_original_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(k_original_cherries['inferred_r']),20)],color=pal['original_cherries'],linestyle=':',linewidth=3)
sns.violinplot(x='length',y='inferred_r',data=pd.DataFrame(k_fasttree_bl),order=x,color=pal['fasttree_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(k_fasttree_bl['inferred_r']),20)]),[sum(k_fasttree_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(k_fasttree_bl['inferred_r']),20)],color=pal['fasttree_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='length',y='inferred_r',data=pd.DataFrame(k_fasttree_cherries),order=x,color=pal['fasttree_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(k_fasttree_cherries['inferred_r']),20)]),[sum(k_fasttree_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(k_fasttree_cherries['inferred_r']),20)],color=pal['fasttree_cherries'],linestyle=':',linewidth=3)
setAlpha(ax,0.7)
plt.plot([-10,10],[-2,-2],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel('Sequence Length',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title('Estimated $\log_{10}{r}$ vs. Sequence Length',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_length_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. gamma rate
fig = plt.figure()
x = np.array([2.952,5.904,29.518,147.591,295.182,float('inf')])
ax = sns.violinplot(x='gammarate',y='inferred_r',data=pd.DataFrame(g_original_bl),order=x,color=pal['original_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(g_original_bl['inferred_r']),20)]),[sum(g_original_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(g_original_bl['inferred_r']),20)],color=pal['original_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='gammarate',y='inferred_r',data=pd.DataFrame(g_original_cherries),order=x,color=pal['original_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(g_original_cherries['inferred_r']),20)]),[sum(g_original_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(g_original_cherries['inferred_r']),20)],color=pal['original_cherries'],linestyle=':',linewidth=3)
sns.violinplot(x='gammarate',y='inferred_r',data=pd.DataFrame(g_fasttree_bl),order=x,color=pal['fasttree_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(g_fasttree_bl['inferred_r']),20)]),[sum(g_fasttree_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(g_fasttree_bl['inferred_r']),20)],color=pal['fasttree_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='gammarate',y='inferred_r',data=pd.DataFrame(g_fasttree_cherries),order=x,color=pal['fasttree_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(g_fasttree_cherries['inferred_r']),20)]),[sum(g_fasttree_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(g_fasttree_cherries['inferred_r']),20)],color=pal['fasttree_cherries'],linestyle=':',linewidth=3)
setAlpha(ax,0.7)
plt.plot([-10,10],[-2,-2],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'Gamma Distribution Rate $\left(\alpha\right)$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title('Estimated $\log_{10}{r}$ vs. Ultrametricity',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_gammarate_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()

# plot Estimated $\log_{10}{r}$ vs. n
fig = plt.figure()
x = np.array([25,50,250,500,1000,2000,4000])
ax = sns.violinplot(x='n',y='inferred_r',data=pd.DataFrame(n_original_bl),order=x,color=pal['original_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(n_original_bl['inferred_r']),20)]),[sum(n_original_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(n_original_bl['inferred_r']),20)],color=pal['original_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='n',y='inferred_r',data=pd.DataFrame(n_original_cherries),order=x,color=pal['original_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(n_original_cherries['inferred_r']),20)]),[sum(n_original_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(n_original_cherries['inferred_r']),20)],color=pal['original_cherries'],linestyle=':',linewidth=3)
sns.violinplot(x='n',y='inferred_r',data=pd.DataFrame(n_fasttree_bl),order=x,color=pal['fasttree_bl'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(n_fasttree_bl['inferred_r']),20)]),[sum(n_fasttree_bl['inferred_r'][i:i+20])/20.0 for i in range(0,len(n_fasttree_bl['inferred_r']),20)],color=pal['fasttree_bl'],linestyle=':',linewidth=3)
sns.violinplot(x='n',y='inferred_r',data=pd.DataFrame(n_fasttree_cherries),order=x,color=pal['fasttree_cherries'],scale='width',width=0.3,inner=None)
plt.plot(np.asarray([int(i/20) for i in range(0,len(n_fasttree_cherries['inferred_r']),20)]),[sum(n_fasttree_cherries['inferred_r'][i:i+20])/20.0 for i in range(0,len(n_fasttree_cherries['inferred_r']),20)],color=pal['fasttree_cherries'],linestyle=':',linewidth=3)
setAlpha(ax,0.7)
plt.plot([-10,10],[-2,-2],label='Theoretical',linestyle='--',color=pal['theoretical'])
plt.yticks(axisY); plt.ylim(axisY[0],axisY[-1])
legend = plt.legend(handles=handles,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., frameon=True)
sns.plt.xlabel(r'$n$',fontsize=14)
sns.plt.ylabel(r'Estimated $\log_{10}{r}$',fontsize=14)
sns.plt.title('Estimated $\log_{10}{r}$ vs. $n$',fontsize=18,y=1.05)
sns.plt.show()
fig.savefig('estimated-r_vs_n_with-corrections.pdf', format='pdf', bbox_extra_artists=(legend,), bbox_inches='tight')
plt.close()