#! /usr/bin/env python3
from statistics import stdev
'''
Niema Moshiri 2017

Inferred Alu parameters from subsampling the full dataset
'''

# compute the average of a given list
def avg(x):
    return float(sum(x))/len(x)

# estimate lambda from r and average branch length
def Lambda(r,avg_bl):
    return ((r+1)/(r**0.5))/(2*avg_bl)

# estimate cherry fraction from r
def cherries(r):
    return (r**0.5)/(1+r+(r**0.5))

# compute lambda_A from r and lambda
def lambda_A(r,l):
    return (r*l)/(1+r)

# compute number of right leaves from r
def n_r(r):
    return (r**0.5)/(1+(r**0.5))

# start with just initial r estimates and average (pendant) branch length
data = {
    1000: {
        'r': [0.00341917197231271,0.00321396780437646,0.00345661241430053,0.00330634577190767,0.00338010070485413,0.00338293870112355,0.00340307198682967,0.00347876282073909,0.00362987630721065,0.00341399342687651,0.00366415356320988,0.00345450810599956,0.00354388962752987,0.00337604386585058,0.00348677513767933,0.00347158112387733,0.00347444038371308,0.00332437822719241,0.0035447757531558,0.00320354475950627],
        'avg_bl': [0.0666031199179177,0.0688266284309306,0.0668386369104103,0.0671783520260259,0.0665746136921921,0.066656165456957,0.0676314796066065,0.06689716291992,0.0675101348428427,0.0670930951396397,0.0661709424169169,0.0671763676806808,0.0680639753703703,0.0669787776351349,0.0679167529734735,0.0662205349509509,0.0670829251226224,0.0684565959804803,0.0665374315920919,0.0662414824159158],
        'avg_pen_bl': [0.119625385146,0.12399297928,0.119983625206,0.12085748825,0.119641986176,0.11978359634,0.12150073628,0.12005054208,0.120891982356,0.12051445414,0.118437303802,0.12059354067,0.122031236116,0.120375424746,0.121866281296,0.118848522588,0.120391354422,0.12312442989,0.119292813742,0.11935443248],
    },
    10000: {
        'r': [0.00394583622198527,0.00404536682996279,0.00408169853970025,0.00396167904112442,0.00395203652995482,0.00406130983336834,0.00405383209783885,0.00397613189492412,0.00408814229804549,0.00409197729868878,0.00398534039775265,0.00395975039865549,0.00408646240342413,0.00405368937024752,0.00410380805870494,0.00399585271433057,0.00401848574374438,0.0039949052717652,0.00403132102994341,0.00409890263826593],
        'avg_bl': [0.0636422991828176,0.0641711593395836,0.06343470790354,0.0635428817522747,0.0638067860352028,0.0637435256084104,0.0638350263363843,0.0636324734355651,0.0638105598098306,0.0636664450376036,0.064019632029903,0.063143896151765,0.0637837490060497,0.0634952500254018,0.0638995747784273,0.0638364708303334,0.0622574394310929,0.0636676781386631,0.0631016240522552,0.0636323003863386],
        'avg_pen_bl': [0.1134761460965,0.1142688495101,0.1129038180323,0.1132750374124,0.113760053241999,0.113483675864099,0.113657696513,0.1134130185339,0.1135632374957,0.1133010982749,0.1140891537344,0.112566664985,0.1135180070517,0.113052939065499,0.1136984765666,0.1137469419636,0.110900256650401,0.113447598130499,0.1123850510652,0.1132301290327],
    },
    100000: {
        'r': [0.00409953787343536,0.0041163255609281,0.00392242251485858,0.00403924447941364,0.00395856555161129,0.00403539225880063,0.00407890664975576,0.00412798863093909,0.00401189491065905,0.00394376002980995,0.00398104300291373,0.00398704644476533,0.00407113624989654,0.00388605621659614,0.00402397367283451,0.00416667680040088,0.00397787229696555,0.00400411290903793,0.00399414142929841,0.00398118286613707],
        'avg_bl': [0.0636246324955002,0.0630730860513074,0.0640252057993298,0.0624844993467846,0.0633256100457543,0.0639255099096411,0.0629667784398943,0.0629214638904895,0.0626088326779178,0.0641237727338237,0.0638920083864383,0.0630591519255929,0.0637475201951194,0.0636349431930694,0.0635715722376741,0.0626235100729071,0.0637596082947794,0.063642942342434,0.0637305088889394,0.0628767294029398],
        'avg_pen_bl': [0.1132155490246,0.1122096376708,0.1141944997341,0.1112743669788,0.1128923820816,0.1138463193046,0.112075057875,0.1119229713906,0.1115358774841,0.114337785943,0.1138681887317,0.1123749507399,0.1134762142655,0.1135536881774,0.1132329697087,0.1113373227463,0.1136369941952,0.113389743926399,0.1135606999216,0.112058553508701],
    },
    885011: {
        'r': [0.0109931045950768,0.0106521765079129,0.01099348577874,0.0115014286769766,0.0107508933831004,0.0114963885294728,0.0132189270104432,0.0107446384069147,0.0120090827419484,0.0101856323776938,0.0108666169325112,0.0115204204044002,0.0109758569281474,0.0110097278602254,0.0110532794959593,0.0106530046787547,0.0118710469473347,0.0105733575437312,0.0106783446610319,0.0102800077364432,0.0105093548000064,0.0109341806279494,0.0111131632496006,0.0114561028388926,0.0114116504930541,0.0124086494189253,0.0111162424766627,0.010796409198338,0.0107027561676511,0.0104142194987892,0.0111601737378819,0.0107665409206016,0.010861147650254,0.0103949588561331,0.0104345380989583,0.0109650691420586,0.010852138837969,0.0105974033836493,0.0116443433190611,0.0115991622732481,0.0116753347709805,0.0110320255006111,0.0123679113221537,0.0117512669069117,0.0110034244546963,0.0118129997894284,0.0120816864367182,0.0108898019044407,0.0103956189860421,0.01060522880815,0.0114041383317586,0.0105447204764588,0.0106479407552692,0.0111737533856564,0.0118354169378751,0.0113128456429365,0.0113255995259617,0.0114433393388808,0.0120234836849598,0.0113575112455545,0.0109926671661835,0.0121644116258419,0.0117159404175955,0.0106576019565876,0.0101944381635289,0.0106493063682876,0.0121700461758517,0.0129158869378998,0.0108418254989637,0.00980075509595177,0.0104962610635946,0.011300992870693,0.0106077594934849,0.0109752646973846,0.0106289669015184,0.0110548443706444,0.0109194096987673,0.0110054231600823,0.0124973538820848,0.0122177334409018,0.010967933885746,0.010958974995681,0.0113688313727371,0.0129229195761722,0.0108260326139835,0.0114878682057819,0.0111721561214624,0.0101459312347876,0.0115321551271428,0.011156050559476,0.0118744260533529,0.0110882487627788,0.0119792083925562,0.0108197687777582,0.0105820472391626,0.0114740690717098,0.0116044982145623,0.0125289203556993,0.0109084853124784,0.0114071841118912],
        'avg_bl': [0.0436567681543333,0.0438932326454274,0.0435893236821095,0.0423214282958098,0.0448007676667472,0.04548107760631,0.0499360161020128,0.046468077280606,0.0469674798530598,0.0469113109487163,0.0436347563864766,0.0470503181466491,0.0444805230981084,0.0430050488128391,0.0449155116911445,0.0445624975232929,0.0478819730345358,0.0428164260809979,0.0446374982528237,0.0438171099306488,0.0434071804088617,0.0467289753436576,0.0479875627287198,0.0461267985694907,0.0462875324637447,0.052043440952885,0.0454856211455716,0.0468450535972911,0.0472200061485093,0.0477008653345501,0.0505193035699722,0.0462985374163644,0.044973895984978,0.0444911021627218,0.0463035018140572,0.0480624409249739,0.049595590661746,0.0455185791181754,0.0432796140607191,0.0471916416211305,0.0474218858115786,0.0496894901996263,0.0471410494332859,0.0484587206346414,0.045230193253619,0.0512688803496774,0.0479308957257794,0.0518850329617568,0.040907356440797,0.0454908231229003,0.0442915144439112,0.0481057166421462,0.0441391733623881,0.04950908417647,0.0473803325275828,0.0460256379619595,0.0452509426980188,0.0478697369370878,0.0524279477031505,0.0479938273815855,0.0414712907562294,0.0462682526815115,0.0480013876245615,0.0457042633972073,0.0468408802346452,0.0454572593627101,0.0515184706235788,0.0442630099405392,0.0469612527221182,0.0439130821148021,0.0385137735045439,0.0467952258618577,0.0485793252666624,0.0424982882230386,0.041945084541368,0.0438492101843851,0.0435049746194787,0.0453947657907136,0.04861189196983,0.0484408354463366,0.0485682518978204,0.0480424363910277,0.0470601392712287,0.0469583559022664,0.046982134447218,0.0473331202489294,0.049717258963666,0.042523864755256,0.0467559597106993,0.0452564022082942,0.0466667319730607,0.0453439289482359,0.0469840529632374,0.0465666972193391,0.0460569389162923,0.0477022133228706,0.0457141271283804,0.0469224150361685,0.0430114290456152,0.0499796173833285],
        'avg_pen_bl': [0.072840013657672,0.0734143822271283,0.0727272871224089,0.0703605161829157,0.0748787211925178,0.0756161559792222,0.0820824465290684,0.0776689249113328,0.0778146549303717,0.0787325681667989,0.072869147161278,0.0782121492738343,0.0742235461223815,0.0717441486823163,0.0749081338389222,0.0745333242004234,0.0794037800819867,0.0716544750881525,0.0746450323705412,0.0734877699022357,0.0726771363890946,0.0779986831150074,0.0799976163462735,0.0767111337332383,0.0770022139144357,0.0859952391312781,0.0758251058877459,0.0782697767671753,0.0789496559248219,0.0799219685068164,0.0841901906211869,0.0773733080768693,0.0751084306344592,0.0745546567914566,0.0775690985916865,0.0802067741185535,0.0828322258848814,0.0761632406892381,0.0718826837068862,0.078404477940466,0.0787457999256244,0.082882477070643,0.0779155926770584,0.0804257239867992,0.0754596814584342,0.0850538914201562,0.0793720980934815,0.0866325366171051,0.068548966280019,0.0761124570983587,0.0736855630630055,0.0805230974159413,0.0738280072213671,0.0824987643693394,0.0785909022318576,0.0766193128551814,0.0753229542568176,0.0796167777562696,0.0868530182599365,0.0798708552406679,0.0691938254762714,0.0765764195581009,0.0796859293430918,0.0764404397389477,0.0786091888022049,0.0760319078814599,0.0852626029506523,0.0728981039131167,0.0784382891887617,0.0739155048768006,0.0644902403922763,0.0779069127055498,0.0812784508441553,0.0709161393649169,0.0701678147487494,0.0731289904279519,0.072624941880664,0.0757331682416522,0.0802781982459411,0.0801436675559256,0.081049217006111,0.0801768767475183,0.0783108384732396,0.0773336592735494,0.0784820771614236,0.0786999765875624,0.0828465862769603,0.0713902052900039,0.0777165324064711,0.0754217832712611,0.0773867447253397,0.075603881174116,0.0778577795028565,0.0777916083341558,0.0770726745522552,0.0793212438495827,0.0759469377069875,0.077472145733446,0.0718066552191942,0.0831468117618814],
    }
}

# estimate lambda
for n in data:
    data[n]['lambda'] = [Lambda(data[n]['r'][i],data[n]['avg_bl'][i]) for i in range(len(data[n]['r']))]

# compute lambda_A and lambda_b
for n in data:
    data[n]['lambda_a'] =[lambda_A(data[n]['r'][i],data[n]['lambda'][i]) for i in range(len(data[n]['r']))]
    data[n]['lambda_b'] = [(data[n]['lambda'][i]-data[n]['lambda_a'][i]) for i in range(len(data[n]['r']))]

# compute number of right leaves
for n in data:
    data[n]['n_r'] = [n_r(data[n]['r'][i]) for i in range(len(data[n]['r']))]

# output data cleanly
COLS = ['n_r','r','lambda','lambda_a','lambda_b','avg_bl','avg_pen_bl']
pad = {'n_r':'            ','r':'              ','lambda':'           ','lambda_a':'       ','lambda_b':'         ','avg_bl':'         ','avg_pen_bl':'     '}
head = '| n      | ' + ' | '.join([e + pad[e] for e in COLS]) + ' |'
print(head)
print('-'*len(head))
for n in sorted(data.keys()):
    print('| ' + str(n),end=(6-len(str(n)))*' ' + ' | ')
    for col in COLS:
        print("%0.4f" % avg(data[n][col]),end=' ± ')
        try:
            s = stdev(data[n][col])
        except:
            s = 0
        print("%0.4f" % s,end=' | ')
    print()